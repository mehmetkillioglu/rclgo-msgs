/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package composition_interfaces_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lcomposition_interfaces__rosidl_typesupport_c -lcomposition_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <composition_interfaces/srv/list_nodes.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("composition_interfaces/ListNodes_Response", ListNodes_ResponseTypeSupport)
}

// Do not create instances of this type directly. Always use NewListNodes_Response
// function instead.
type ListNodes_Response struct {
	FullNodeNames []string `yaml:"full_node_names"`// List of full node names including namespace.
	UniqueIds []uint64 `yaml:"unique_ids"`// List of full node names including namespace.corresponding unique ids (must have same length as full_node_names).
}

// NewListNodes_Response creates a new ListNodes_Response with default values.
func NewListNodes_Response() *ListNodes_Response {
	self := ListNodes_Response{}
	self.SetDefaults()
	return &self
}

func (t *ListNodes_Response) Clone() *ListNodes_Response {
	c := &ListNodes_Response{}
	if t.FullNodeNames != nil {
		c.FullNodeNames = make([]string, len(t.FullNodeNames))
		copy(c.FullNodeNames, t.FullNodeNames)
	}
	if t.UniqueIds != nil {
		c.UniqueIds = make([]uint64, len(t.UniqueIds))
		copy(c.UniqueIds, t.UniqueIds)
	}
	return c
}

func (t *ListNodes_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ListNodes_Response) SetDefaults() {
	t.FullNodeNames = nil
	t.UniqueIds = nil
}

// CloneListNodes_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneListNodes_ResponseSlice(dst, src []ListNodes_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ListNodes_ResponseTypeSupport types.MessageTypeSupport = _ListNodes_ResponseTypeSupport{}

type _ListNodes_ResponseTypeSupport struct{}

func (t _ListNodes_ResponseTypeSupport) New() types.Message {
	return NewListNodes_Response()
}

func (t _ListNodes_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.composition_interfaces__srv__ListNodes_Response
	return (unsafe.Pointer)(C.composition_interfaces__srv__ListNodes_Response__create())
}

func (t _ListNodes_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.composition_interfaces__srv__ListNodes_Response__destroy((*C.composition_interfaces__srv__ListNodes_Response)(pointer_to_free))
}

func (t _ListNodes_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ListNodes_Response)
	mem := (*C.composition_interfaces__srv__ListNodes_Response)(dst)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.full_node_names)), m.FullNodeNames)
	primitives.Uint64__Sequence_to_C((*primitives.CUint64__Sequence)(unsafe.Pointer(&mem.unique_ids)), m.UniqueIds)
}

func (t _ListNodes_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ListNodes_Response)
	mem := (*C.composition_interfaces__srv__ListNodes_Response)(ros2_message_buffer)
	primitives.String__Sequence_to_Go(&m.FullNodeNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.full_node_names)))
	primitives.Uint64__Sequence_to_Go(&m.UniqueIds, *(*primitives.CUint64__Sequence)(unsafe.Pointer(&mem.unique_ids)))
}

func (t _ListNodes_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__composition_interfaces__srv__ListNodes_Response())
}

type CListNodes_Response = C.composition_interfaces__srv__ListNodes_Response
type CListNodes_Response__Sequence = C.composition_interfaces__srv__ListNodes_Response__Sequence

func ListNodes_Response__Sequence_to_Go(goSlice *[]ListNodes_Response, cSlice CListNodes_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ListNodes_Response, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.composition_interfaces__srv__ListNodes_Response__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_composition_interfaces__srv__ListNodes_Response * uintptr(i)),
		))
		ListNodes_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func ListNodes_Response__Sequence_to_C(cSlice *CListNodes_Response__Sequence, goSlice []ListNodes_Response) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.composition_interfaces__srv__ListNodes_Response)(C.malloc((C.size_t)(C.sizeof_struct_composition_interfaces__srv__ListNodes_Response * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.composition_interfaces__srv__ListNodes_Response)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_composition_interfaces__srv__ListNodes_Response * uintptr(i)),
		))
		ListNodes_ResponseTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func ListNodes_Response__Array_to_Go(goSlice []ListNodes_Response, cSlice []CListNodes_Response) {
	for i := 0; i < len(cSlice); i++ {
		ListNodes_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ListNodes_Response__Array_to_C(cSlice []CListNodes_Response, goSlice []ListNodes_Response) {
	for i := 0; i < len(goSlice); i++ {
		ListNodes_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
