/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package diagnostic_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -ldiagnostic_msgs__rosidl_typesupport_c -ldiagnostic_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <diagnostic_msgs/msg/diagnostic_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("diagnostic_msgs/DiagnosticStatus", DiagnosticStatusTypeSupport)
}
const (
	DiagnosticStatus_OK byte = 0// Possible levels of operations.
	DiagnosticStatus_WARN byte = 1// Possible levels of operations.
	DiagnosticStatus_ERROR byte = 2// Possible levels of operations.
	DiagnosticStatus_STALE byte = 3// Possible levels of operations.
)

// Do not create instances of this type directly. Always use NewDiagnosticStatus
// function instead.
type DiagnosticStatus struct {
	Level byte `yaml:"level"`// Level of operation enumerated above.
	Name string `yaml:"name"`// Level of operation enumerated above.A description of the test/component reporting.
	Message string `yaml:"message"`// Level of operation enumerated above.A description of the test/component reporting.A description of the status.
	HardwareId string `yaml:"hardware_id"`// Level of operation enumerated above.A description of the test/component reporting.A description of the status.A hardware unique string.
	Values []KeyValue `yaml:"values"`// Level of operation enumerated above.A description of the test/component reporting.A description of the status.A hardware unique string.An array of values associated with the status.
}

// NewDiagnosticStatus creates a new DiagnosticStatus with default values.
func NewDiagnosticStatus() *DiagnosticStatus {
	self := DiagnosticStatus{}
	self.SetDefaults()
	return &self
}

func (t *DiagnosticStatus) Clone() *DiagnosticStatus {
	c := &DiagnosticStatus{}
	c.Level = t.Level
	c.Name = t.Name
	c.Message = t.Message
	c.HardwareId = t.HardwareId
	if t.Values != nil {
		c.Values = make([]KeyValue, len(t.Values))
		CloneKeyValueSlice(c.Values, t.Values)
	}
	return c
}

func (t *DiagnosticStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DiagnosticStatus) SetDefaults() {
	t.Level = 0
	t.Name = ""
	t.Message = ""
	t.HardwareId = ""
	t.Values = nil
}

// CloneDiagnosticStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDiagnosticStatusSlice(dst, src []DiagnosticStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DiagnosticStatusTypeSupport types.MessageTypeSupport = _DiagnosticStatusTypeSupport{}

type _DiagnosticStatusTypeSupport struct{}

func (t _DiagnosticStatusTypeSupport) New() types.Message {
	return NewDiagnosticStatus()
}

func (t _DiagnosticStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.diagnostic_msgs__msg__DiagnosticStatus
	return (unsafe.Pointer)(C.diagnostic_msgs__msg__DiagnosticStatus__create())
}

func (t _DiagnosticStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.diagnostic_msgs__msg__DiagnosticStatus__destroy((*C.diagnostic_msgs__msg__DiagnosticStatus)(pointer_to_free))
}

func (t _DiagnosticStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DiagnosticStatus)
	mem := (*C.diagnostic_msgs__msg__DiagnosticStatus)(dst)
	mem.level = C.uint8_t(m.Level)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.message), m.Message)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.hardware_id), m.HardwareId)
	KeyValue__Sequence_to_C(&mem.values, m.Values)
}

func (t _DiagnosticStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DiagnosticStatus)
	mem := (*C.diagnostic_msgs__msg__DiagnosticStatus)(ros2_message_buffer)
	m.Level = byte(mem.level)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	primitives.StringAsGoStruct(&m.Message, unsafe.Pointer(&mem.message))
	primitives.StringAsGoStruct(&m.HardwareId, unsafe.Pointer(&mem.hardware_id))
	KeyValue__Sequence_to_Go(&m.Values, mem.values)
}

func (t _DiagnosticStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__diagnostic_msgs__msg__DiagnosticStatus())
}

type CDiagnosticStatus = C.diagnostic_msgs__msg__DiagnosticStatus
type CDiagnosticStatus__Sequence = C.diagnostic_msgs__msg__DiagnosticStatus__Sequence

func DiagnosticStatus__Sequence_to_Go(goSlice *[]DiagnosticStatus, cSlice CDiagnosticStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DiagnosticStatus, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.diagnostic_msgs__msg__DiagnosticStatus__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_diagnostic_msgs__msg__DiagnosticStatus * uintptr(i)),
		))
		DiagnosticStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func DiagnosticStatus__Sequence_to_C(cSlice *CDiagnosticStatus__Sequence, goSlice []DiagnosticStatus) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.diagnostic_msgs__msg__DiagnosticStatus)(C.malloc((C.size_t)(C.sizeof_struct_diagnostic_msgs__msg__DiagnosticStatus * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.diagnostic_msgs__msg__DiagnosticStatus)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_diagnostic_msgs__msg__DiagnosticStatus * uintptr(i)),
		))
		DiagnosticStatusTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func DiagnosticStatus__Array_to_Go(goSlice []DiagnosticStatus, cSlice []CDiagnosticStatus) {
	for i := 0; i < len(cSlice); i++ {
		DiagnosticStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DiagnosticStatus__Array_to_C(cSlice []CDiagnosticStatus, goSlice []DiagnosticStatus) {
	for i := 0; i < len(goSlice); i++ {
		DiagnosticStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
