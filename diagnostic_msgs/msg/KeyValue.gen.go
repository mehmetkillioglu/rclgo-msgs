/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package diagnostic_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -ldiagnostic_msgs__rosidl_typesupport_c -ldiagnostic_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <diagnostic_msgs/msg/key_value.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("diagnostic_msgs/KeyValue", KeyValueTypeSupport)
}

// Do not create instances of this type directly. Always use NewKeyValue
// function instead.
type KeyValue struct {
	Key string `yaml:"key"`// What to label this value when viewing.
	Value string `yaml:"value"`// What to label this value when viewing.A value to track over time.
}

// NewKeyValue creates a new KeyValue with default values.
func NewKeyValue() *KeyValue {
	self := KeyValue{}
	self.SetDefaults()
	return &self
}

func (t *KeyValue) Clone() *KeyValue {
	c := &KeyValue{}
	c.Key = t.Key
	c.Value = t.Value
	return c
}

func (t *KeyValue) CloneMsg() types.Message {
	return t.Clone()
}

func (t *KeyValue) SetDefaults() {
	t.Key = ""
	t.Value = ""
}

// CloneKeyValueSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneKeyValueSlice(dst, src []KeyValue) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var KeyValueTypeSupport types.MessageTypeSupport = _KeyValueTypeSupport{}

type _KeyValueTypeSupport struct{}

func (t _KeyValueTypeSupport) New() types.Message {
	return NewKeyValue()
}

func (t _KeyValueTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.diagnostic_msgs__msg__KeyValue
	return (unsafe.Pointer)(C.diagnostic_msgs__msg__KeyValue__create())
}

func (t _KeyValueTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.diagnostic_msgs__msg__KeyValue__destroy((*C.diagnostic_msgs__msg__KeyValue)(pointer_to_free))
}

func (t _KeyValueTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*KeyValue)
	mem := (*C.diagnostic_msgs__msg__KeyValue)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.key), m.Key)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.value), m.Value)
}

func (t _KeyValueTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*KeyValue)
	mem := (*C.diagnostic_msgs__msg__KeyValue)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Key, unsafe.Pointer(&mem.key))
	primitives.StringAsGoStruct(&m.Value, unsafe.Pointer(&mem.value))
}

func (t _KeyValueTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__diagnostic_msgs__msg__KeyValue())
}

type CKeyValue = C.diagnostic_msgs__msg__KeyValue
type CKeyValue__Sequence = C.diagnostic_msgs__msg__KeyValue__Sequence

func KeyValue__Sequence_to_Go(goSlice *[]KeyValue, cSlice CKeyValue__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]KeyValue, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.diagnostic_msgs__msg__KeyValue__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_diagnostic_msgs__msg__KeyValue * uintptr(i)),
		))
		KeyValueTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func KeyValue__Sequence_to_C(cSlice *CKeyValue__Sequence, goSlice []KeyValue) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.diagnostic_msgs__msg__KeyValue)(C.malloc((C.size_t)(C.sizeof_struct_diagnostic_msgs__msg__KeyValue * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.diagnostic_msgs__msg__KeyValue)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_diagnostic_msgs__msg__KeyValue * uintptr(i)),
		))
		KeyValueTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func KeyValue__Array_to_Go(goSlice []KeyValue, cSlice []CKeyValue) {
	for i := 0; i < len(cSlice); i++ {
		KeyValueTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func KeyValue__Array_to_C(cSlice []CKeyValue, goSlice []KeyValue) {
	for i := 0; i < len(goSlice); i++ {
		KeyValueTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
