/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package fog_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/tiiuae/rclgo-msgs/std_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lfog_msgs__rosidl_typesupport_c -lfog_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <fog_msgs/msg/odometry_diagnostics.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("fog_msgs/OdometryDiagnostics", OdometryDiagnosticsTypeSupport)
}

// Do not create instances of this type directly. Always use NewOdometryDiagnostics
// function instead.
type OdometryDiagnostics struct {
	Header std_msgs_msg.Header `yaml:"header"`
	GpsUse bool `yaml:"gps_use"`
	HectorUse bool `yaml:"hector_use"`
	GpsReliable bool `yaml:"gps_reliable"`
	HectorReliable bool `yaml:"hector_reliable"`
	Ekf2AidMask uint16 `yaml:"ekf2_aid_mask"`
	Ekf2HgtMode uint8 `yaml:"ekf2_hgt_mode"`
}

// NewOdometryDiagnostics creates a new OdometryDiagnostics with default values.
func NewOdometryDiagnostics() *OdometryDiagnostics {
	self := OdometryDiagnostics{}
	self.SetDefaults()
	return &self
}

func (t *OdometryDiagnostics) Clone() *OdometryDiagnostics {
	c := &OdometryDiagnostics{}
	c.Header = *t.Header.Clone()
	c.GpsUse = t.GpsUse
	c.HectorUse = t.HectorUse
	c.GpsReliable = t.GpsReliable
	c.HectorReliable = t.HectorReliable
	c.Ekf2AidMask = t.Ekf2AidMask
	c.Ekf2HgtMode = t.Ekf2HgtMode
	return c
}

func (t *OdometryDiagnostics) CloneMsg() types.Message {
	return t.Clone()
}

func (t *OdometryDiagnostics) SetDefaults() {
	t.Header.SetDefaults()
	t.GpsUse = false
	t.HectorUse = false
	t.GpsReliable = false
	t.HectorReliable = false
	t.Ekf2AidMask = 0
	t.Ekf2HgtMode = 0
}

// CloneOdometryDiagnosticsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneOdometryDiagnosticsSlice(dst, src []OdometryDiagnostics) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var OdometryDiagnosticsTypeSupport types.MessageTypeSupport = _OdometryDiagnosticsTypeSupport{}

type _OdometryDiagnosticsTypeSupport struct{}

func (t _OdometryDiagnosticsTypeSupport) New() types.Message {
	return NewOdometryDiagnostics()
}

func (t _OdometryDiagnosticsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.fog_msgs__msg__OdometryDiagnostics
	return (unsafe.Pointer)(C.fog_msgs__msg__OdometryDiagnostics__create())
}

func (t _OdometryDiagnosticsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.fog_msgs__msg__OdometryDiagnostics__destroy((*C.fog_msgs__msg__OdometryDiagnostics)(pointer_to_free))
}

func (t _OdometryDiagnosticsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*OdometryDiagnostics)
	mem := (*C.fog_msgs__msg__OdometryDiagnostics)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.gps_use = C.bool(m.GpsUse)
	mem.hector_use = C.bool(m.HectorUse)
	mem.gps_reliable = C.bool(m.GpsReliable)
	mem.hector_reliable = C.bool(m.HectorReliable)
	mem.ekf2_aid_mask = C.uint16_t(m.Ekf2AidMask)
	mem.ekf2_hgt_mode = C.uint8_t(m.Ekf2HgtMode)
}

func (t _OdometryDiagnosticsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*OdometryDiagnostics)
	mem := (*C.fog_msgs__msg__OdometryDiagnostics)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.GpsUse = bool(mem.gps_use)
	m.HectorUse = bool(mem.hector_use)
	m.GpsReliable = bool(mem.gps_reliable)
	m.HectorReliable = bool(mem.hector_reliable)
	m.Ekf2AidMask = uint16(mem.ekf2_aid_mask)
	m.Ekf2HgtMode = uint8(mem.ekf2_hgt_mode)
}

func (t _OdometryDiagnosticsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__fog_msgs__msg__OdometryDiagnostics())
}

type COdometryDiagnostics = C.fog_msgs__msg__OdometryDiagnostics
type COdometryDiagnostics__Sequence = C.fog_msgs__msg__OdometryDiagnostics__Sequence

func OdometryDiagnostics__Sequence_to_Go(goSlice *[]OdometryDiagnostics, cSlice COdometryDiagnostics__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]OdometryDiagnostics, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.fog_msgs__msg__OdometryDiagnostics__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_fog_msgs__msg__OdometryDiagnostics * uintptr(i)),
		))
		OdometryDiagnosticsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func OdometryDiagnostics__Sequence_to_C(cSlice *COdometryDiagnostics__Sequence, goSlice []OdometryDiagnostics) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.fog_msgs__msg__OdometryDiagnostics)(C.malloc((C.size_t)(C.sizeof_struct_fog_msgs__msg__OdometryDiagnostics * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.fog_msgs__msg__OdometryDiagnostics)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_fog_msgs__msg__OdometryDiagnostics * uintptr(i)),
		))
		OdometryDiagnosticsTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func OdometryDiagnostics__Array_to_Go(goSlice []OdometryDiagnostics, cSlice []COdometryDiagnostics) {
	for i := 0; i < len(cSlice); i++ {
		OdometryDiagnosticsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func OdometryDiagnostics__Array_to_C(cSlice []COdometryDiagnostics, goSlice []OdometryDiagnostics) {
	for i := 0; i < len(goSlice); i++ {
		OdometryDiagnosticsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
