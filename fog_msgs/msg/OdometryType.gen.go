/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package fog_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lfog_msgs__rosidl_typesupport_c -lfog_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <fog_msgs/msg/odometry_type.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("fog_msgs/OdometryType", OdometryTypeTypeSupport)
}
const (
	OdometryType_GPSHECTOR uint8 = 0
	OdometryType_GPS uint8 = 1
	OdometryType_HECTOR uint8 = 2
	OdometryType_TYPE_COUNT uint8 = 3
)

// Do not create instances of this type directly. Always use NewOdometryType
// function instead.
type OdometryType struct {
	Type uint8 `yaml:"type"`
}

// NewOdometryType creates a new OdometryType with default values.
func NewOdometryType() *OdometryType {
	self := OdometryType{}
	self.SetDefaults()
	return &self
}

func (t *OdometryType) Clone() *OdometryType {
	c := &OdometryType{}
	c.Type = t.Type
	return c
}

func (t *OdometryType) CloneMsg() types.Message {
	return t.Clone()
}

func (t *OdometryType) SetDefaults() {
	t.Type = 0
}

// CloneOdometryTypeSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneOdometryTypeSlice(dst, src []OdometryType) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var OdometryTypeTypeSupport types.MessageTypeSupport = _OdometryTypeTypeSupport{}

type _OdometryTypeTypeSupport struct{}

func (t _OdometryTypeTypeSupport) New() types.Message {
	return NewOdometryType()
}

func (t _OdometryTypeTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.fog_msgs__msg__OdometryType
	return (unsafe.Pointer)(C.fog_msgs__msg__OdometryType__create())
}

func (t _OdometryTypeTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.fog_msgs__msg__OdometryType__destroy((*C.fog_msgs__msg__OdometryType)(pointer_to_free))
}

func (t _OdometryTypeTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*OdometryType)
	mem := (*C.fog_msgs__msg__OdometryType)(dst)
	mem._type = C.uint8_t(m.Type)
}

func (t _OdometryTypeTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*OdometryType)
	mem := (*C.fog_msgs__msg__OdometryType)(ros2_message_buffer)
	m.Type = uint8(mem._type)
}

func (t _OdometryTypeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__fog_msgs__msg__OdometryType())
}

type COdometryType = C.fog_msgs__msg__OdometryType
type COdometryType__Sequence = C.fog_msgs__msg__OdometryType__Sequence

func OdometryType__Sequence_to_Go(goSlice *[]OdometryType, cSlice COdometryType__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]OdometryType, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.fog_msgs__msg__OdometryType__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_fog_msgs__msg__OdometryType * uintptr(i)),
		))
		OdometryTypeTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func OdometryType__Sequence_to_C(cSlice *COdometryType__Sequence, goSlice []OdometryType) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.fog_msgs__msg__OdometryType)(C.malloc((C.size_t)(C.sizeof_struct_fog_msgs__msg__OdometryType * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.fog_msgs__msg__OdometryType)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_fog_msgs__msg__OdometryType * uintptr(i)),
		))
		OdometryTypeTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func OdometryType__Array_to_Go(goSlice []OdometryType, cSlice []COdometryType) {
	for i := 0; i < len(cSlice); i++ {
		OdometryTypeTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func OdometryType__Array_to_C(cSlice []COdometryType, goSlice []OdometryType) {
	for i := 0; i < len(goSlice); i++ {
		OdometryTypeTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
