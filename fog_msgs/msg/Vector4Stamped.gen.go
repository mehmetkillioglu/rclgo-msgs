/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package fog_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/mehmetkillioglu/rclgo-msgs/std_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lfog_msgs__rosidl_typesupport_c -lfog_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <fog_msgs/msg/vector4_stamped.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("fog_msgs/Vector4Stamped", Vector4StampedTypeSupport)
}

// Do not create instances of this type directly. Always use NewVector4Stamped
// function instead.
type Vector4Stamped struct {
	Header std_msgs_msg.Header `yaml:"header"`
	X float64 `yaml:"x"`
	Y float64 `yaml:"y"`
	Z float64 `yaml:"z"`
	W float64 `yaml:"w"`
}

// NewVector4Stamped creates a new Vector4Stamped with default values.
func NewVector4Stamped() *Vector4Stamped {
	self := Vector4Stamped{}
	self.SetDefaults()
	return &self
}

func (t *Vector4Stamped) Clone() *Vector4Stamped {
	c := &Vector4Stamped{}
	c.Header = *t.Header.Clone()
	c.X = t.X
	c.Y = t.Y
	c.Z = t.Z
	c.W = t.W
	return c
}

func (t *Vector4Stamped) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Vector4Stamped) SetDefaults() {
	t.Header.SetDefaults()
	t.X = 0
	t.Y = 0
	t.Z = 0
	t.W = 0
}

// CloneVector4StampedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVector4StampedSlice(dst, src []Vector4Stamped) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Vector4StampedTypeSupport types.MessageTypeSupport = _Vector4StampedTypeSupport{}

type _Vector4StampedTypeSupport struct{}

func (t _Vector4StampedTypeSupport) New() types.Message {
	return NewVector4Stamped()
}

func (t _Vector4StampedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.fog_msgs__msg__Vector4Stamped
	return (unsafe.Pointer)(C.fog_msgs__msg__Vector4Stamped__create())
}

func (t _Vector4StampedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.fog_msgs__msg__Vector4Stamped__destroy((*C.fog_msgs__msg__Vector4Stamped)(pointer_to_free))
}

func (t _Vector4StampedTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Vector4Stamped)
	mem := (*C.fog_msgs__msg__Vector4Stamped)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.x = C.double(m.X)
	mem.y = C.double(m.Y)
	mem.z = C.double(m.Z)
	mem.w = C.double(m.W)
}

func (t _Vector4StampedTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Vector4Stamped)
	mem := (*C.fog_msgs__msg__Vector4Stamped)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.X = float64(mem.x)
	m.Y = float64(mem.y)
	m.Z = float64(mem.z)
	m.W = float64(mem.w)
}

func (t _Vector4StampedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__fog_msgs__msg__Vector4Stamped())
}

type CVector4Stamped = C.fog_msgs__msg__Vector4Stamped
type CVector4Stamped__Sequence = C.fog_msgs__msg__Vector4Stamped__Sequence

func Vector4Stamped__Sequence_to_Go(goSlice *[]Vector4Stamped, cSlice CVector4Stamped__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Vector4Stamped, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.fog_msgs__msg__Vector4Stamped__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_fog_msgs__msg__Vector4Stamped * uintptr(i)),
		))
		Vector4StampedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func Vector4Stamped__Sequence_to_C(cSlice *CVector4Stamped__Sequence, goSlice []Vector4Stamped) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.fog_msgs__msg__Vector4Stamped)(C.malloc((C.size_t)(C.sizeof_struct_fog_msgs__msg__Vector4Stamped * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.fog_msgs__msg__Vector4Stamped)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_fog_msgs__msg__Vector4Stamped * uintptr(i)),
		))
		Vector4StampedTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func Vector4Stamped__Array_to_Go(goSlice []Vector4Stamped, cSlice []CVector4Stamped) {
	for i := 0; i < len(cSlice); i++ {
		Vector4StampedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Vector4Stamped__Array_to_C(cSlice []CVector4Stamped, goSlice []Vector4Stamped) {
	for i := 0; i < len(goSlice); i++ {
		Vector4StampedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
