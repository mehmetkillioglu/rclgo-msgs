/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package gazebo_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "github.com/tiiuae/rclgo-msgs/geometry_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgazebo_msgs__rosidl_typesupport_c -lgazebo_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <gazebo_msgs/msg/contact_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("gazebo_msgs/ContactState", ContactStateTypeSupport)
}

// Do not create instances of this type directly. Always use NewContactState
// function instead.
type ContactState struct {
	Info string `yaml:"info"`// text info on this contact
	Collision1Name string `yaml:"collision1_name"`// name of contact collision1
	Collision2Name string `yaml:"collision2_name"`// name of contact collision2
	Wrenches []geometry_msgs_msg.Wrench `yaml:"wrenches"`// list of forces/torques
	TotalWrench geometry_msgs_msg.Wrench `yaml:"total_wrench"`// sum of forces/torques in every DOF
	ContactPositions []geometry_msgs_msg.Vector3 `yaml:"contact_positions"`// list of contact position
	ContactNormals []geometry_msgs_msg.Vector3 `yaml:"contact_normals"`// list of contact normals
	Depths []float64 `yaml:"depths"`// list of penetration depths
}

// NewContactState creates a new ContactState with default values.
func NewContactState() *ContactState {
	self := ContactState{}
	self.SetDefaults()
	return &self
}

func (t *ContactState) Clone() *ContactState {
	c := &ContactState{}
	c.Info = t.Info
	c.Collision1Name = t.Collision1Name
	c.Collision2Name = t.Collision2Name
	if t.Wrenches != nil {
		c.Wrenches = make([]geometry_msgs_msg.Wrench, len(t.Wrenches))
		geometry_msgs_msg.CloneWrenchSlice(c.Wrenches, t.Wrenches)
	}
	c.TotalWrench = *t.TotalWrench.Clone()
	if t.ContactPositions != nil {
		c.ContactPositions = make([]geometry_msgs_msg.Vector3, len(t.ContactPositions))
		geometry_msgs_msg.CloneVector3Slice(c.ContactPositions, t.ContactPositions)
	}
	if t.ContactNormals != nil {
		c.ContactNormals = make([]geometry_msgs_msg.Vector3, len(t.ContactNormals))
		geometry_msgs_msg.CloneVector3Slice(c.ContactNormals, t.ContactNormals)
	}
	if t.Depths != nil {
		c.Depths = make([]float64, len(t.Depths))
		copy(c.Depths, t.Depths)
	}
	return c
}

func (t *ContactState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ContactState) SetDefaults() {
	t.Info = ""
	t.Collision1Name = ""
	t.Collision2Name = ""
	t.Wrenches = nil
	t.TotalWrench.SetDefaults()
	t.ContactPositions = nil
	t.ContactNormals = nil
	t.Depths = nil
}

// CloneContactStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneContactStateSlice(dst, src []ContactState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ContactStateTypeSupport types.MessageTypeSupport = _ContactStateTypeSupport{}

type _ContactStateTypeSupport struct{}

func (t _ContactStateTypeSupport) New() types.Message {
	return NewContactState()
}

func (t _ContactStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.gazebo_msgs__msg__ContactState
	return (unsafe.Pointer)(C.gazebo_msgs__msg__ContactState__create())
}

func (t _ContactStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.gazebo_msgs__msg__ContactState__destroy((*C.gazebo_msgs__msg__ContactState)(pointer_to_free))
}

func (t _ContactStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ContactState)
	mem := (*C.gazebo_msgs__msg__ContactState)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.info), m.Info)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.collision1_name), m.Collision1Name)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.collision2_name), m.Collision2Name)
	geometry_msgs_msg.Wrench__Sequence_to_C((*geometry_msgs_msg.CWrench__Sequence)(unsafe.Pointer(&mem.wrenches)), m.Wrenches)
	geometry_msgs_msg.WrenchTypeSupport.AsCStruct(unsafe.Pointer(&mem.total_wrench), &m.TotalWrench)
	geometry_msgs_msg.Vector3__Sequence_to_C((*geometry_msgs_msg.CVector3__Sequence)(unsafe.Pointer(&mem.contact_positions)), m.ContactPositions)
	geometry_msgs_msg.Vector3__Sequence_to_C((*geometry_msgs_msg.CVector3__Sequence)(unsafe.Pointer(&mem.contact_normals)), m.ContactNormals)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.depths)), m.Depths)
}

func (t _ContactStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ContactState)
	mem := (*C.gazebo_msgs__msg__ContactState)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Info, unsafe.Pointer(&mem.info))
	primitives.StringAsGoStruct(&m.Collision1Name, unsafe.Pointer(&mem.collision1_name))
	primitives.StringAsGoStruct(&m.Collision2Name, unsafe.Pointer(&mem.collision2_name))
	geometry_msgs_msg.Wrench__Sequence_to_Go(&m.Wrenches, *(*geometry_msgs_msg.CWrench__Sequence)(unsafe.Pointer(&mem.wrenches)))
	geometry_msgs_msg.WrenchTypeSupport.AsGoStruct(&m.TotalWrench, unsafe.Pointer(&mem.total_wrench))
	geometry_msgs_msg.Vector3__Sequence_to_Go(&m.ContactPositions, *(*geometry_msgs_msg.CVector3__Sequence)(unsafe.Pointer(&mem.contact_positions)))
	geometry_msgs_msg.Vector3__Sequence_to_Go(&m.ContactNormals, *(*geometry_msgs_msg.CVector3__Sequence)(unsafe.Pointer(&mem.contact_normals)))
	primitives.Float64__Sequence_to_Go(&m.Depths, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.depths)))
}

func (t _ContactStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__gazebo_msgs__msg__ContactState())
}

type CContactState = C.gazebo_msgs__msg__ContactState
type CContactState__Sequence = C.gazebo_msgs__msg__ContactState__Sequence

func ContactState__Sequence_to_Go(goSlice *[]ContactState, cSlice CContactState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ContactState, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.gazebo_msgs__msg__ContactState__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__ContactState * uintptr(i)),
		))
		ContactStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func ContactState__Sequence_to_C(cSlice *CContactState__Sequence, goSlice []ContactState) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.gazebo_msgs__msg__ContactState)(C.malloc((C.size_t)(C.sizeof_struct_gazebo_msgs__msg__ContactState * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.gazebo_msgs__msg__ContactState)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__ContactState * uintptr(i)),
		))
		ContactStateTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func ContactState__Array_to_Go(goSlice []ContactState, cSlice []CContactState) {
	for i := 0; i < len(cSlice); i++ {
		ContactStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ContactState__Array_to_C(cSlice []CContactState, goSlice []ContactState) {
	for i := 0; i < len(goSlice); i++ {
		ContactStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
