/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package gazebo_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "github.com/mehmetkillioglu/rclgo-msgs/geometry_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgazebo_msgs__rosidl_typesupport_c -lgazebo_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <gazebo_msgs/msg/entity_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("gazebo_msgs/EntityState", EntityStateTypeSupport)
}

// Do not create instances of this type directly. Always use NewEntityState
// function instead.
type EntityState struct {
	Name string `yaml:"name"`// Entity's scoped name.. Holds an entity's pose and twist
	Pose geometry_msgs_msg.Pose `yaml:"pose"`// Pose in reference frame.. Holds an entity's pose and twistAn entity can be a model, link, collision, light, etc.Be sure to use gazebo scoped naming notation (e.g. [model_name::link_name])
	Twist geometry_msgs_msg.Twist `yaml:"twist"`// Twist in reference frame.. Holds an entity's pose and twistAn entity can be a model, link, collision, light, etc.Be sure to use gazebo scoped naming notation (e.g. [model_name::link_name])
	ReferenceFrame string `yaml:"reference_frame"`// Pose/twist are expressed relative to the frame of this entity.. Holds an entity's pose and twistAn entity can be a model, link, collision, light, etc.Be sure to use gazebo scoped naming notation (e.g. [model_name::link_name])
}

// NewEntityState creates a new EntityState with default values.
func NewEntityState() *EntityState {
	self := EntityState{}
	self.SetDefaults()
	return &self
}

func (t *EntityState) Clone() *EntityState {
	c := &EntityState{}
	c.Name = t.Name
	c.Pose = *t.Pose.Clone()
	c.Twist = *t.Twist.Clone()
	c.ReferenceFrame = t.ReferenceFrame
	return c
}

func (t *EntityState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *EntityState) SetDefaults() {
	t.Name = ""
	t.Pose.SetDefaults()
	t.Twist.SetDefaults()
	t.ReferenceFrame = ""
}

// CloneEntityStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneEntityStateSlice(dst, src []EntityState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var EntityStateTypeSupport types.MessageTypeSupport = _EntityStateTypeSupport{}

type _EntityStateTypeSupport struct{}

func (t _EntityStateTypeSupport) New() types.Message {
	return NewEntityState()
}

func (t _EntityStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.gazebo_msgs__msg__EntityState
	return (unsafe.Pointer)(C.gazebo_msgs__msg__EntityState__create())
}

func (t _EntityStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.gazebo_msgs__msg__EntityState__destroy((*C.gazebo_msgs__msg__EntityState)(pointer_to_free))
}

func (t _EntityStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*EntityState)
	mem := (*C.gazebo_msgs__msg__EntityState)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
	geometry_msgs_msg.TwistTypeSupport.AsCStruct(unsafe.Pointer(&mem.twist), &m.Twist)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.reference_frame), m.ReferenceFrame)
}

func (t _EntityStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*EntityState)
	mem := (*C.gazebo_msgs__msg__EntityState)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
	geometry_msgs_msg.TwistTypeSupport.AsGoStruct(&m.Twist, unsafe.Pointer(&mem.twist))
	primitives.StringAsGoStruct(&m.ReferenceFrame, unsafe.Pointer(&mem.reference_frame))
}

func (t _EntityStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__gazebo_msgs__msg__EntityState())
}

type CEntityState = C.gazebo_msgs__msg__EntityState
type CEntityState__Sequence = C.gazebo_msgs__msg__EntityState__Sequence

func EntityState__Sequence_to_Go(goSlice *[]EntityState, cSlice CEntityState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]EntityState, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.gazebo_msgs__msg__EntityState__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__EntityState * uintptr(i)),
		))
		EntityStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func EntityState__Sequence_to_C(cSlice *CEntityState__Sequence, goSlice []EntityState) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.gazebo_msgs__msg__EntityState)(C.malloc((C.size_t)(C.sizeof_struct_gazebo_msgs__msg__EntityState * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.gazebo_msgs__msg__EntityState)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__EntityState * uintptr(i)),
		))
		EntityStateTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func EntityState__Array_to_Go(goSlice []EntityState, cSlice []CEntityState) {
	for i := 0; i < len(cSlice); i++ {
		EntityStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func EntityState__Array_to_C(cSlice []CEntityState, goSlice []EntityState) {
	for i := 0; i < len(goSlice); i++ {
		EntityStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
