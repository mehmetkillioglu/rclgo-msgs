/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package gazebo_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "github.com/mehmetkillioglu/rclgo-msgs/geometry_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgazebo_msgs__rosidl_typesupport_c -lgazebo_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <gazebo_msgs/msg/link_states.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("gazebo_msgs/LinkStates", LinkStatesTypeSupport)
}

// Do not create instances of this type directly. Always use NewLinkStates
// function instead.
type LinkStates struct {
	Name []string `yaml:"name"`// link names. broadcast all link states in world frame
	Pose []geometry_msgs_msg.Pose `yaml:"pose"`// desired pose in world frame. broadcast all link states in world frame
	Twist []geometry_msgs_msg.Twist `yaml:"twist"`// desired twist in world frame. broadcast all link states in world frame
}

// NewLinkStates creates a new LinkStates with default values.
func NewLinkStates() *LinkStates {
	self := LinkStates{}
	self.SetDefaults()
	return &self
}

func (t *LinkStates) Clone() *LinkStates {
	c := &LinkStates{}
	if t.Name != nil {
		c.Name = make([]string, len(t.Name))
		copy(c.Name, t.Name)
	}
	if t.Pose != nil {
		c.Pose = make([]geometry_msgs_msg.Pose, len(t.Pose))
		geometry_msgs_msg.ClonePoseSlice(c.Pose, t.Pose)
	}
	if t.Twist != nil {
		c.Twist = make([]geometry_msgs_msg.Twist, len(t.Twist))
		geometry_msgs_msg.CloneTwistSlice(c.Twist, t.Twist)
	}
	return c
}

func (t *LinkStates) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LinkStates) SetDefaults() {
	t.Name = nil
	t.Pose = nil
	t.Twist = nil
}

// CloneLinkStatesSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLinkStatesSlice(dst, src []LinkStates) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LinkStatesTypeSupport types.MessageTypeSupport = _LinkStatesTypeSupport{}

type _LinkStatesTypeSupport struct{}

func (t _LinkStatesTypeSupport) New() types.Message {
	return NewLinkStates()
}

func (t _LinkStatesTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.gazebo_msgs__msg__LinkStates
	return (unsafe.Pointer)(C.gazebo_msgs__msg__LinkStates__create())
}

func (t _LinkStatesTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.gazebo_msgs__msg__LinkStates__destroy((*C.gazebo_msgs__msg__LinkStates)(pointer_to_free))
}

func (t _LinkStatesTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LinkStates)
	mem := (*C.gazebo_msgs__msg__LinkStates)(dst)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.name)), m.Name)
	geometry_msgs_msg.Pose__Sequence_to_C((*geometry_msgs_msg.CPose__Sequence)(unsafe.Pointer(&mem.pose)), m.Pose)
	geometry_msgs_msg.Twist__Sequence_to_C((*geometry_msgs_msg.CTwist__Sequence)(unsafe.Pointer(&mem.twist)), m.Twist)
}

func (t _LinkStatesTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LinkStates)
	mem := (*C.gazebo_msgs__msg__LinkStates)(ros2_message_buffer)
	primitives.String__Sequence_to_Go(&m.Name, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.name)))
	geometry_msgs_msg.Pose__Sequence_to_Go(&m.Pose, *(*geometry_msgs_msg.CPose__Sequence)(unsafe.Pointer(&mem.pose)))
	geometry_msgs_msg.Twist__Sequence_to_Go(&m.Twist, *(*geometry_msgs_msg.CTwist__Sequence)(unsafe.Pointer(&mem.twist)))
}

func (t _LinkStatesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__gazebo_msgs__msg__LinkStates())
}

type CLinkStates = C.gazebo_msgs__msg__LinkStates
type CLinkStates__Sequence = C.gazebo_msgs__msg__LinkStates__Sequence

func LinkStates__Sequence_to_Go(goSlice *[]LinkStates, cSlice CLinkStates__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LinkStates, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.gazebo_msgs__msg__LinkStates__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__LinkStates * uintptr(i)),
		))
		LinkStatesTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func LinkStates__Sequence_to_C(cSlice *CLinkStates__Sequence, goSlice []LinkStates) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.gazebo_msgs__msg__LinkStates)(C.malloc((C.size_t)(C.sizeof_struct_gazebo_msgs__msg__LinkStates * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.gazebo_msgs__msg__LinkStates)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__LinkStates * uintptr(i)),
		))
		LinkStatesTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func LinkStates__Array_to_Go(goSlice []LinkStates, cSlice []CLinkStates) {
	for i := 0; i < len(cSlice); i++ {
		LinkStatesTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LinkStates__Array_to_C(cSlice []CLinkStates, goSlice []LinkStates) {
	for i := 0; i < len(goSlice); i++ {
		LinkStatesTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
