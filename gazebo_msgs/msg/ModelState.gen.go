/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package gazebo_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "github.com/tiiuae/rclgo-msgs/geometry_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgazebo_msgs__rosidl_typesupport_c -lgazebo_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <gazebo_msgs/msg/model_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("gazebo_msgs/ModelState", ModelStateTypeSupport)
}

// Do not create instances of this type directly. Always use NewModelState
// function instead.
type ModelState struct {
	ModelName string `yaml:"model_name"`// model to set state (pose and twist). Deprecated, kept for ROS 1 bridge.Use EntityStateSet Gazebo Model pose and twist
	Pose geometry_msgs_msg.Pose `yaml:"pose"`// desired pose in reference frame. Deprecated, kept for ROS 1 bridge.Use EntityStateSet Gazebo Model pose and twist
	Twist geometry_msgs_msg.Twist `yaml:"twist"`// desired twist in reference frame. Deprecated, kept for ROS 1 bridge.Use EntityStateSet Gazebo Model pose and twist
	ReferenceFrame string `yaml:"reference_frame"`// set pose/twist relative to the frame of this entity (Body/Model). Deprecated, kept for ROS 1 bridge.Use EntityStateSet Gazebo Model pose and twist
}

// NewModelState creates a new ModelState with default values.
func NewModelState() *ModelState {
	self := ModelState{}
	self.SetDefaults()
	return &self
}

func (t *ModelState) Clone() *ModelState {
	c := &ModelState{}
	c.ModelName = t.ModelName
	c.Pose = *t.Pose.Clone()
	c.Twist = *t.Twist.Clone()
	c.ReferenceFrame = t.ReferenceFrame
	return c
}

func (t *ModelState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ModelState) SetDefaults() {
	t.ModelName = ""
	t.Pose.SetDefaults()
	t.Twist.SetDefaults()
	t.ReferenceFrame = ""
}

// CloneModelStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneModelStateSlice(dst, src []ModelState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ModelStateTypeSupport types.MessageTypeSupport = _ModelStateTypeSupport{}

type _ModelStateTypeSupport struct{}

func (t _ModelStateTypeSupport) New() types.Message {
	return NewModelState()
}

func (t _ModelStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.gazebo_msgs__msg__ModelState
	return (unsafe.Pointer)(C.gazebo_msgs__msg__ModelState__create())
}

func (t _ModelStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.gazebo_msgs__msg__ModelState__destroy((*C.gazebo_msgs__msg__ModelState)(pointer_to_free))
}

func (t _ModelStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ModelState)
	mem := (*C.gazebo_msgs__msg__ModelState)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.model_name), m.ModelName)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
	geometry_msgs_msg.TwistTypeSupport.AsCStruct(unsafe.Pointer(&mem.twist), &m.Twist)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.reference_frame), m.ReferenceFrame)
}

func (t _ModelStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ModelState)
	mem := (*C.gazebo_msgs__msg__ModelState)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.ModelName, unsafe.Pointer(&mem.model_name))
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
	geometry_msgs_msg.TwistTypeSupport.AsGoStruct(&m.Twist, unsafe.Pointer(&mem.twist))
	primitives.StringAsGoStruct(&m.ReferenceFrame, unsafe.Pointer(&mem.reference_frame))
}

func (t _ModelStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__gazebo_msgs__msg__ModelState())
}

type CModelState = C.gazebo_msgs__msg__ModelState
type CModelState__Sequence = C.gazebo_msgs__msg__ModelState__Sequence

func ModelState__Sequence_to_Go(goSlice *[]ModelState, cSlice CModelState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ModelState, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.gazebo_msgs__msg__ModelState__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__ModelState * uintptr(i)),
		))
		ModelStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func ModelState__Sequence_to_C(cSlice *CModelState__Sequence, goSlice []ModelState) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.gazebo_msgs__msg__ModelState)(C.malloc((C.size_t)(C.sizeof_struct_gazebo_msgs__msg__ModelState * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.gazebo_msgs__msg__ModelState)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__ModelState * uintptr(i)),
		))
		ModelStateTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func ModelState__Array_to_Go(goSlice []ModelState, cSlice []CModelState) {
	for i := 0; i < len(cSlice); i++ {
		ModelStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ModelState__Array_to_C(cSlice []CModelState, goSlice []ModelState) {
	for i := 0; i < len(goSlice); i++ {
		ModelStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
