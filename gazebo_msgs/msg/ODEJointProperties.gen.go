/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package gazebo_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgazebo_msgs__rosidl_typesupport_c -lgazebo_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <gazebo_msgs/msg/ode_joint_properties.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("gazebo_msgs/ODEJointProperties", ODEJointPropertiesTypeSupport)
}

// Do not create instances of this type directly. Always use NewODEJointProperties
// function instead.
type ODEJointProperties struct {
	Damping []float64 `yaml:"damping"`// joint damping. access to low level joint properties, change these at your own risk
	HiStop []float64 `yaml:"hi_stop"`// joint limit. access to low level joint properties, change these at your own risk
	LoStop []float64 `yaml:"lo_stop"`// joint limit. access to low level joint properties, change these at your own risk
	Erp []float64 `yaml:"erp"`// set joint erp. access to low level joint properties, change these at your own risk
	Cfm []float64 `yaml:"cfm"`// set joint cfm. access to low level joint properties, change these at your own risk
	StopErp []float64 `yaml:"stop_erp"`// set joint erp for joint limit "contact" joint. access to low level joint properties, change these at your own risk
	StopCfm []float64 `yaml:"stop_cfm"`// set joint cfm for joint limit "contact" joint. access to low level joint properties, change these at your own risk
	FudgeFactor []float64 `yaml:"fudge_factor"`// joint fudge_factor applied at limits, see ODE manual for info.. access to low level joint properties, change these at your own risk
	Fmax []float64 `yaml:"fmax"`// ode joint param fmax. access to low level joint properties, change these at your own risk
	Vel []float64 `yaml:"vel"`// ode joint param vel. access to low level joint properties, change these at your own risk
}

// NewODEJointProperties creates a new ODEJointProperties with default values.
func NewODEJointProperties() *ODEJointProperties {
	self := ODEJointProperties{}
	self.SetDefaults()
	return &self
}

func (t *ODEJointProperties) Clone() *ODEJointProperties {
	c := &ODEJointProperties{}
	if t.Damping != nil {
		c.Damping = make([]float64, len(t.Damping))
		copy(c.Damping, t.Damping)
	}
	if t.HiStop != nil {
		c.HiStop = make([]float64, len(t.HiStop))
		copy(c.HiStop, t.HiStop)
	}
	if t.LoStop != nil {
		c.LoStop = make([]float64, len(t.LoStop))
		copy(c.LoStop, t.LoStop)
	}
	if t.Erp != nil {
		c.Erp = make([]float64, len(t.Erp))
		copy(c.Erp, t.Erp)
	}
	if t.Cfm != nil {
		c.Cfm = make([]float64, len(t.Cfm))
		copy(c.Cfm, t.Cfm)
	}
	if t.StopErp != nil {
		c.StopErp = make([]float64, len(t.StopErp))
		copy(c.StopErp, t.StopErp)
	}
	if t.StopCfm != nil {
		c.StopCfm = make([]float64, len(t.StopCfm))
		copy(c.StopCfm, t.StopCfm)
	}
	if t.FudgeFactor != nil {
		c.FudgeFactor = make([]float64, len(t.FudgeFactor))
		copy(c.FudgeFactor, t.FudgeFactor)
	}
	if t.Fmax != nil {
		c.Fmax = make([]float64, len(t.Fmax))
		copy(c.Fmax, t.Fmax)
	}
	if t.Vel != nil {
		c.Vel = make([]float64, len(t.Vel))
		copy(c.Vel, t.Vel)
	}
	return c
}

func (t *ODEJointProperties) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ODEJointProperties) SetDefaults() {
	t.Damping = nil
	t.HiStop = nil
	t.LoStop = nil
	t.Erp = nil
	t.Cfm = nil
	t.StopErp = nil
	t.StopCfm = nil
	t.FudgeFactor = nil
	t.Fmax = nil
	t.Vel = nil
}

// CloneODEJointPropertiesSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneODEJointPropertiesSlice(dst, src []ODEJointProperties) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ODEJointPropertiesTypeSupport types.MessageTypeSupport = _ODEJointPropertiesTypeSupport{}

type _ODEJointPropertiesTypeSupport struct{}

func (t _ODEJointPropertiesTypeSupport) New() types.Message {
	return NewODEJointProperties()
}

func (t _ODEJointPropertiesTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.gazebo_msgs__msg__ODEJointProperties
	return (unsafe.Pointer)(C.gazebo_msgs__msg__ODEJointProperties__create())
}

func (t _ODEJointPropertiesTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.gazebo_msgs__msg__ODEJointProperties__destroy((*C.gazebo_msgs__msg__ODEJointProperties)(pointer_to_free))
}

func (t _ODEJointPropertiesTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ODEJointProperties)
	mem := (*C.gazebo_msgs__msg__ODEJointProperties)(dst)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.damping)), m.Damping)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.hi_stop)), m.HiStop)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.lo_stop)), m.LoStop)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.erp)), m.Erp)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.cfm)), m.Cfm)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.stop_erp)), m.StopErp)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.stop_cfm)), m.StopCfm)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.fudge_factor)), m.FudgeFactor)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.fmax)), m.Fmax)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.vel)), m.Vel)
}

func (t _ODEJointPropertiesTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ODEJointProperties)
	mem := (*C.gazebo_msgs__msg__ODEJointProperties)(ros2_message_buffer)
	primitives.Float64__Sequence_to_Go(&m.Damping, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.damping)))
	primitives.Float64__Sequence_to_Go(&m.HiStop, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.hi_stop)))
	primitives.Float64__Sequence_to_Go(&m.LoStop, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.lo_stop)))
	primitives.Float64__Sequence_to_Go(&m.Erp, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.erp)))
	primitives.Float64__Sequence_to_Go(&m.Cfm, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.cfm)))
	primitives.Float64__Sequence_to_Go(&m.StopErp, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.stop_erp)))
	primitives.Float64__Sequence_to_Go(&m.StopCfm, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.stop_cfm)))
	primitives.Float64__Sequence_to_Go(&m.FudgeFactor, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.fudge_factor)))
	primitives.Float64__Sequence_to_Go(&m.Fmax, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.fmax)))
	primitives.Float64__Sequence_to_Go(&m.Vel, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.vel)))
}

func (t _ODEJointPropertiesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__gazebo_msgs__msg__ODEJointProperties())
}

type CODEJointProperties = C.gazebo_msgs__msg__ODEJointProperties
type CODEJointProperties__Sequence = C.gazebo_msgs__msg__ODEJointProperties__Sequence

func ODEJointProperties__Sequence_to_Go(goSlice *[]ODEJointProperties, cSlice CODEJointProperties__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ODEJointProperties, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.gazebo_msgs__msg__ODEJointProperties__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__ODEJointProperties * uintptr(i)),
		))
		ODEJointPropertiesTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func ODEJointProperties__Sequence_to_C(cSlice *CODEJointProperties__Sequence, goSlice []ODEJointProperties) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.gazebo_msgs__msg__ODEJointProperties)(C.malloc((C.size_t)(C.sizeof_struct_gazebo_msgs__msg__ODEJointProperties * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.gazebo_msgs__msg__ODEJointProperties)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__ODEJointProperties * uintptr(i)),
		))
		ODEJointPropertiesTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func ODEJointProperties__Array_to_Go(goSlice []ODEJointProperties, cSlice []CODEJointProperties) {
	for i := 0; i < len(cSlice); i++ {
		ODEJointPropertiesTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ODEJointProperties__Array_to_C(cSlice []CODEJointProperties, goSlice []ODEJointProperties) {
	for i := 0; i < len(goSlice); i++ {
		ODEJointPropertiesTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
