/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package gazebo_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/tiiuae/rclgo-msgs/std_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgazebo_msgs__rosidl_typesupport_c -lgazebo_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <gazebo_msgs/msg/performance_metrics.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("gazebo_msgs/PerformanceMetrics", PerformanceMetricsTypeSupport)
}

// Do not create instances of this type directly. Always use NewPerformanceMetrics
// function instead.
type PerformanceMetrics struct {
	Header std_msgs_msg.Header `yaml:"header"`
	RealTimeFactor float64 `yaml:"real_time_factor"`
	Sensors []SensorPerformanceMetric `yaml:"sensors"`
}

// NewPerformanceMetrics creates a new PerformanceMetrics with default values.
func NewPerformanceMetrics() *PerformanceMetrics {
	self := PerformanceMetrics{}
	self.SetDefaults()
	return &self
}

func (t *PerformanceMetrics) Clone() *PerformanceMetrics {
	c := &PerformanceMetrics{}
	c.Header = *t.Header.Clone()
	c.RealTimeFactor = t.RealTimeFactor
	if t.Sensors != nil {
		c.Sensors = make([]SensorPerformanceMetric, len(t.Sensors))
		CloneSensorPerformanceMetricSlice(c.Sensors, t.Sensors)
	}
	return c
}

func (t *PerformanceMetrics) CloneMsg() types.Message {
	return t.Clone()
}

func (t *PerformanceMetrics) SetDefaults() {
	t.Header.SetDefaults()
	t.RealTimeFactor = 0
	t.Sensors = nil
}

// ClonePerformanceMetricsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePerformanceMetricsSlice(dst, src []PerformanceMetrics) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PerformanceMetricsTypeSupport types.MessageTypeSupport = _PerformanceMetricsTypeSupport{}

type _PerformanceMetricsTypeSupport struct{}

func (t _PerformanceMetricsTypeSupport) New() types.Message {
	return NewPerformanceMetrics()
}

func (t _PerformanceMetricsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.gazebo_msgs__msg__PerformanceMetrics
	return (unsafe.Pointer)(C.gazebo_msgs__msg__PerformanceMetrics__create())
}

func (t _PerformanceMetricsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.gazebo_msgs__msg__PerformanceMetrics__destroy((*C.gazebo_msgs__msg__PerformanceMetrics)(pointer_to_free))
}

func (t _PerformanceMetricsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*PerformanceMetrics)
	mem := (*C.gazebo_msgs__msg__PerformanceMetrics)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.real_time_factor = C.double(m.RealTimeFactor)
	SensorPerformanceMetric__Sequence_to_C(&mem.sensors, m.Sensors)
}

func (t _PerformanceMetricsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PerformanceMetrics)
	mem := (*C.gazebo_msgs__msg__PerformanceMetrics)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.RealTimeFactor = float64(mem.real_time_factor)
	SensorPerformanceMetric__Sequence_to_Go(&m.Sensors, mem.sensors)
}

func (t _PerformanceMetricsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__gazebo_msgs__msg__PerformanceMetrics())
}

type CPerformanceMetrics = C.gazebo_msgs__msg__PerformanceMetrics
type CPerformanceMetrics__Sequence = C.gazebo_msgs__msg__PerformanceMetrics__Sequence

func PerformanceMetrics__Sequence_to_Go(goSlice *[]PerformanceMetrics, cSlice CPerformanceMetrics__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PerformanceMetrics, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.gazebo_msgs__msg__PerformanceMetrics__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__PerformanceMetrics * uintptr(i)),
		))
		PerformanceMetricsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func PerformanceMetrics__Sequence_to_C(cSlice *CPerformanceMetrics__Sequence, goSlice []PerformanceMetrics) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.gazebo_msgs__msg__PerformanceMetrics)(C.malloc((C.size_t)(C.sizeof_struct_gazebo_msgs__msg__PerformanceMetrics * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.gazebo_msgs__msg__PerformanceMetrics)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__PerformanceMetrics * uintptr(i)),
		))
		PerformanceMetricsTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func PerformanceMetrics__Array_to_Go(goSlice []PerformanceMetrics, cSlice []CPerformanceMetrics) {
	for i := 0; i < len(cSlice); i++ {
		PerformanceMetricsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func PerformanceMetrics__Array_to_C(cSlice []CPerformanceMetrics, goSlice []PerformanceMetrics) {
	for i := 0; i < len(goSlice); i++ {
		PerformanceMetricsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
