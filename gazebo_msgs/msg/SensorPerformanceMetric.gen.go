/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package gazebo_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgazebo_msgs__rosidl_typesupport_c -lgazebo_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <gazebo_msgs/msg/sensor_performance_metric.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("gazebo_msgs/SensorPerformanceMetric", SensorPerformanceMetricTypeSupport)
}

// Do not create instances of this type directly. Always use NewSensorPerformanceMetric
// function instead.
type SensorPerformanceMetric struct {
	Name string `yaml:"name"`
	SimUpdateRate float64 `yaml:"sim_update_rate"`
	RealUpdateRate float64 `yaml:"real_update_rate"`
	Fps float64 `yaml:"fps"`
}

// NewSensorPerformanceMetric creates a new SensorPerformanceMetric with default values.
func NewSensorPerformanceMetric() *SensorPerformanceMetric {
	self := SensorPerformanceMetric{}
	self.SetDefaults()
	return &self
}

func (t *SensorPerformanceMetric) Clone() *SensorPerformanceMetric {
	c := &SensorPerformanceMetric{}
	c.Name = t.Name
	c.SimUpdateRate = t.SimUpdateRate
	c.RealUpdateRate = t.RealUpdateRate
	c.Fps = t.Fps
	return c
}

func (t *SensorPerformanceMetric) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SensorPerformanceMetric) SetDefaults() {
	t.Name = ""
	t.SimUpdateRate = 0
	t.RealUpdateRate = 0
	t.Fps = 0
}

// CloneSensorPerformanceMetricSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSensorPerformanceMetricSlice(dst, src []SensorPerformanceMetric) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SensorPerformanceMetricTypeSupport types.MessageTypeSupport = _SensorPerformanceMetricTypeSupport{}

type _SensorPerformanceMetricTypeSupport struct{}

func (t _SensorPerformanceMetricTypeSupport) New() types.Message {
	return NewSensorPerformanceMetric()
}

func (t _SensorPerformanceMetricTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.gazebo_msgs__msg__SensorPerformanceMetric
	return (unsafe.Pointer)(C.gazebo_msgs__msg__SensorPerformanceMetric__create())
}

func (t _SensorPerformanceMetricTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.gazebo_msgs__msg__SensorPerformanceMetric__destroy((*C.gazebo_msgs__msg__SensorPerformanceMetric)(pointer_to_free))
}

func (t _SensorPerformanceMetricTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SensorPerformanceMetric)
	mem := (*C.gazebo_msgs__msg__SensorPerformanceMetric)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	mem.sim_update_rate = C.double(m.SimUpdateRate)
	mem.real_update_rate = C.double(m.RealUpdateRate)
	mem.fps = C.double(m.Fps)
}

func (t _SensorPerformanceMetricTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SensorPerformanceMetric)
	mem := (*C.gazebo_msgs__msg__SensorPerformanceMetric)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	m.SimUpdateRate = float64(mem.sim_update_rate)
	m.RealUpdateRate = float64(mem.real_update_rate)
	m.Fps = float64(mem.fps)
}

func (t _SensorPerformanceMetricTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__gazebo_msgs__msg__SensorPerformanceMetric())
}

type CSensorPerformanceMetric = C.gazebo_msgs__msg__SensorPerformanceMetric
type CSensorPerformanceMetric__Sequence = C.gazebo_msgs__msg__SensorPerformanceMetric__Sequence

func SensorPerformanceMetric__Sequence_to_Go(goSlice *[]SensorPerformanceMetric, cSlice CSensorPerformanceMetric__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorPerformanceMetric, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.gazebo_msgs__msg__SensorPerformanceMetric__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__SensorPerformanceMetric * uintptr(i)),
		))
		SensorPerformanceMetricTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func SensorPerformanceMetric__Sequence_to_C(cSlice *CSensorPerformanceMetric__Sequence, goSlice []SensorPerformanceMetric) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.gazebo_msgs__msg__SensorPerformanceMetric)(C.malloc((C.size_t)(C.sizeof_struct_gazebo_msgs__msg__SensorPerformanceMetric * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.gazebo_msgs__msg__SensorPerformanceMetric)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__SensorPerformanceMetric * uintptr(i)),
		))
		SensorPerformanceMetricTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func SensorPerformanceMetric__Array_to_Go(goSlice []SensorPerformanceMetric, cSlice []CSensorPerformanceMetric) {
	for i := 0; i < len(cSlice); i++ {
		SensorPerformanceMetricTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SensorPerformanceMetric__Array_to_C(cSlice []CSensorPerformanceMetric, goSlice []SensorPerformanceMetric) {
	for i := 0; i < len(goSlice); i++ {
		SensorPerformanceMetricTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
