/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package gazebo_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "github.com/tiiuae/rclgo-msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/tiiuae/rclgo-msgs/std_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgazebo_msgs__rosidl_typesupport_c -lgazebo_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <gazebo_msgs/msg/world_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("gazebo_msgs/WorldState", WorldStateTypeSupport)
}

// Do not create instances of this type directly. Always use NewWorldState
// function instead.
type WorldState struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Name []string `yaml:"name"`
	Pose []geometry_msgs_msg.Pose `yaml:"pose"`
	Twist []geometry_msgs_msg.Twist `yaml:"twist"`
	Wrench []geometry_msgs_msg.Wrench `yaml:"wrench"`
}

// NewWorldState creates a new WorldState with default values.
func NewWorldState() *WorldState {
	self := WorldState{}
	self.SetDefaults()
	return &self
}

func (t *WorldState) Clone() *WorldState {
	c := &WorldState{}
	c.Header = *t.Header.Clone()
	if t.Name != nil {
		c.Name = make([]string, len(t.Name))
		copy(c.Name, t.Name)
	}
	if t.Pose != nil {
		c.Pose = make([]geometry_msgs_msg.Pose, len(t.Pose))
		geometry_msgs_msg.ClonePoseSlice(c.Pose, t.Pose)
	}
	if t.Twist != nil {
		c.Twist = make([]geometry_msgs_msg.Twist, len(t.Twist))
		geometry_msgs_msg.CloneTwistSlice(c.Twist, t.Twist)
	}
	if t.Wrench != nil {
		c.Wrench = make([]geometry_msgs_msg.Wrench, len(t.Wrench))
		geometry_msgs_msg.CloneWrenchSlice(c.Wrench, t.Wrench)
	}
	return c
}

func (t *WorldState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *WorldState) SetDefaults() {
	t.Header.SetDefaults()
	t.Name = nil
	t.Pose = nil
	t.Twist = nil
	t.Wrench = nil
}

// CloneWorldStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneWorldStateSlice(dst, src []WorldState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var WorldStateTypeSupport types.MessageTypeSupport = _WorldStateTypeSupport{}

type _WorldStateTypeSupport struct{}

func (t _WorldStateTypeSupport) New() types.Message {
	return NewWorldState()
}

func (t _WorldStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.gazebo_msgs__msg__WorldState
	return (unsafe.Pointer)(C.gazebo_msgs__msg__WorldState__create())
}

func (t _WorldStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.gazebo_msgs__msg__WorldState__destroy((*C.gazebo_msgs__msg__WorldState)(pointer_to_free))
}

func (t _WorldStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*WorldState)
	mem := (*C.gazebo_msgs__msg__WorldState)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.name)), m.Name)
	geometry_msgs_msg.Pose__Sequence_to_C((*geometry_msgs_msg.CPose__Sequence)(unsafe.Pointer(&mem.pose)), m.Pose)
	geometry_msgs_msg.Twist__Sequence_to_C((*geometry_msgs_msg.CTwist__Sequence)(unsafe.Pointer(&mem.twist)), m.Twist)
	geometry_msgs_msg.Wrench__Sequence_to_C((*geometry_msgs_msg.CWrench__Sequence)(unsafe.Pointer(&mem.wrench)), m.Wrench)
}

func (t _WorldStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*WorldState)
	mem := (*C.gazebo_msgs__msg__WorldState)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.String__Sequence_to_Go(&m.Name, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.name)))
	geometry_msgs_msg.Pose__Sequence_to_Go(&m.Pose, *(*geometry_msgs_msg.CPose__Sequence)(unsafe.Pointer(&mem.pose)))
	geometry_msgs_msg.Twist__Sequence_to_Go(&m.Twist, *(*geometry_msgs_msg.CTwist__Sequence)(unsafe.Pointer(&mem.twist)))
	geometry_msgs_msg.Wrench__Sequence_to_Go(&m.Wrench, *(*geometry_msgs_msg.CWrench__Sequence)(unsafe.Pointer(&mem.wrench)))
}

func (t _WorldStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__gazebo_msgs__msg__WorldState())
}

type CWorldState = C.gazebo_msgs__msg__WorldState
type CWorldState__Sequence = C.gazebo_msgs__msg__WorldState__Sequence

func WorldState__Sequence_to_Go(goSlice *[]WorldState, cSlice CWorldState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]WorldState, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.gazebo_msgs__msg__WorldState__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__WorldState * uintptr(i)),
		))
		WorldStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func WorldState__Sequence_to_C(cSlice *CWorldState__Sequence, goSlice []WorldState) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.gazebo_msgs__msg__WorldState)(C.malloc((C.size_t)(C.sizeof_struct_gazebo_msgs__msg__WorldState * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.gazebo_msgs__msg__WorldState)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__msg__WorldState * uintptr(i)),
		))
		WorldStateTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func WorldState__Array_to_Go(goSlice []WorldState, cSlice []CWorldState) {
	for i := 0; i < len(cSlice); i++ {
		WorldStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func WorldState__Array_to_C(cSlice []CWorldState, goSlice []WorldState) {
	for i := 0; i < len(goSlice); i++ {
		WorldStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
