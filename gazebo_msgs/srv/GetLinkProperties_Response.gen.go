/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package gazebo_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "github.com/mehmetkillioglu/rclgo-msgs/geometry_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgazebo_msgs__rosidl_typesupport_c -lgazebo_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <gazebo_msgs/srv/get_link_properties.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("gazebo_msgs/GetLinkProperties_Response", GetLinkProperties_ResponseTypeSupport)
}

// Do not create instances of this type directly. Always use NewGetLinkProperties_Response
// function instead.
type GetLinkProperties_Response struct {
	Com geometry_msgs_msg.Pose `yaml:"com"`// center of mass location in link frame. link names are prefixed by model name, e.g. pr2::base_link
	GravityMode bool `yaml:"gravity_mode"`// set gravity mode on/off. link names are prefixed by model name, e.g. pr2::base_linkand orientation of the moment of inertiasrelative to the link frame
	Mass float64 `yaml:"mass"`// linear mass of link. link names are prefixed by model name, e.g. pr2::base_linkand orientation of the moment of inertiasrelative to the link frame
	Ixx float64 `yaml:"ixx"`// moment of inertia. link names are prefixed by model name, e.g. pr2::base_linkand orientation of the moment of inertiasrelative to the link frame
	Ixy float64 `yaml:"ixy"`// moment of inertia. link names are prefixed by model name, e.g. pr2::base_linkand orientation of the moment of inertiasrelative to the link frame
	Ixz float64 `yaml:"ixz"`// moment of inertia. link names are prefixed by model name, e.g. pr2::base_linkand orientation of the moment of inertiasrelative to the link frame
	Iyy float64 `yaml:"iyy"`// moment of inertia. link names are prefixed by model name, e.g. pr2::base_linkand orientation of the moment of inertiasrelative to the link frame
	Iyz float64 `yaml:"iyz"`// moment of inertia. link names are prefixed by model name, e.g. pr2::base_linkand orientation of the moment of inertiasrelative to the link frame
	Izz float64 `yaml:"izz"`// moment of inertia. link names are prefixed by model name, e.g. pr2::base_linkand orientation of the moment of inertiasrelative to the link frame
	Success bool `yaml:"success"`// return true if get info is successful. link names are prefixed by model name, e.g. pr2::base_linkand orientation of the moment of inertiasrelative to the link frame
	StatusMessage string `yaml:"status_message"`// comments if available. link names are prefixed by model name, e.g. pr2::base_linkand orientation of the moment of inertiasrelative to the link frame
}

// NewGetLinkProperties_Response creates a new GetLinkProperties_Response with default values.
func NewGetLinkProperties_Response() *GetLinkProperties_Response {
	self := GetLinkProperties_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetLinkProperties_Response) Clone() *GetLinkProperties_Response {
	c := &GetLinkProperties_Response{}
	c.Com = *t.Com.Clone()
	c.GravityMode = t.GravityMode
	c.Mass = t.Mass
	c.Ixx = t.Ixx
	c.Ixy = t.Ixy
	c.Ixz = t.Ixz
	c.Iyy = t.Iyy
	c.Iyz = t.Iyz
	c.Izz = t.Izz
	c.Success = t.Success
	c.StatusMessage = t.StatusMessage
	return c
}

func (t *GetLinkProperties_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetLinkProperties_Response) SetDefaults() {
	t.Com.SetDefaults()
	t.GravityMode = false
	t.Mass = 0
	t.Ixx = 0
	t.Ixy = 0
	t.Ixz = 0
	t.Iyy = 0
	t.Iyz = 0
	t.Izz = 0
	t.Success = false
	t.StatusMessage = ""
}

// CloneGetLinkProperties_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetLinkProperties_ResponseSlice(dst, src []GetLinkProperties_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetLinkProperties_ResponseTypeSupport types.MessageTypeSupport = _GetLinkProperties_ResponseTypeSupport{}

type _GetLinkProperties_ResponseTypeSupport struct{}

func (t _GetLinkProperties_ResponseTypeSupport) New() types.Message {
	return NewGetLinkProperties_Response()
}

func (t _GetLinkProperties_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.gazebo_msgs__srv__GetLinkProperties_Response
	return (unsafe.Pointer)(C.gazebo_msgs__srv__GetLinkProperties_Response__create())
}

func (t _GetLinkProperties_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.gazebo_msgs__srv__GetLinkProperties_Response__destroy((*C.gazebo_msgs__srv__GetLinkProperties_Response)(pointer_to_free))
}

func (t _GetLinkProperties_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetLinkProperties_Response)
	mem := (*C.gazebo_msgs__srv__GetLinkProperties_Response)(dst)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.com), &m.Com)
	mem.gravity_mode = C.bool(m.GravityMode)
	mem.mass = C.double(m.Mass)
	mem.ixx = C.double(m.Ixx)
	mem.ixy = C.double(m.Ixy)
	mem.ixz = C.double(m.Ixz)
	mem.iyy = C.double(m.Iyy)
	mem.iyz = C.double(m.Iyz)
	mem.izz = C.double(m.Izz)
	mem.success = C.bool(m.Success)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.status_message), m.StatusMessage)
}

func (t _GetLinkProperties_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetLinkProperties_Response)
	mem := (*C.gazebo_msgs__srv__GetLinkProperties_Response)(ros2_message_buffer)
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Com, unsafe.Pointer(&mem.com))
	m.GravityMode = bool(mem.gravity_mode)
	m.Mass = float64(mem.mass)
	m.Ixx = float64(mem.ixx)
	m.Ixy = float64(mem.ixy)
	m.Ixz = float64(mem.ixz)
	m.Iyy = float64(mem.iyy)
	m.Iyz = float64(mem.iyz)
	m.Izz = float64(mem.izz)
	m.Success = bool(mem.success)
	primitives.StringAsGoStruct(&m.StatusMessage, unsafe.Pointer(&mem.status_message))
}

func (t _GetLinkProperties_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__gazebo_msgs__srv__GetLinkProperties_Response())
}

type CGetLinkProperties_Response = C.gazebo_msgs__srv__GetLinkProperties_Response
type CGetLinkProperties_Response__Sequence = C.gazebo_msgs__srv__GetLinkProperties_Response__Sequence

func GetLinkProperties_Response__Sequence_to_Go(goSlice *[]GetLinkProperties_Response, cSlice CGetLinkProperties_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetLinkProperties_Response, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.gazebo_msgs__srv__GetLinkProperties_Response__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__srv__GetLinkProperties_Response * uintptr(i)),
		))
		GetLinkProperties_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func GetLinkProperties_Response__Sequence_to_C(cSlice *CGetLinkProperties_Response__Sequence, goSlice []GetLinkProperties_Response) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.gazebo_msgs__srv__GetLinkProperties_Response)(C.malloc((C.size_t)(C.sizeof_struct_gazebo_msgs__srv__GetLinkProperties_Response * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.gazebo_msgs__srv__GetLinkProperties_Response)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__srv__GetLinkProperties_Response * uintptr(i)),
		))
		GetLinkProperties_ResponseTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func GetLinkProperties_Response__Array_to_Go(goSlice []GetLinkProperties_Response, cSlice []CGetLinkProperties_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetLinkProperties_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetLinkProperties_Response__Array_to_C(cSlice []CGetLinkProperties_Response, goSlice []GetLinkProperties_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetLinkProperties_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
