/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package gazebo_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgazebo_msgs__rosidl_typesupport_c -lgazebo_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <gazebo_msgs/srv/get_model_properties.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("gazebo_msgs/GetModelProperties_Response", GetModelProperties_ResponseTypeSupport)
}

// Do not create instances of this type directly. Always use NewGetModelProperties_Response
// function instead.
type GetModelProperties_Response struct {
	ParentModelName string `yaml:"parent_model_name"`// parent model
	CanonicalBodyName string `yaml:"canonical_body_name"`// name of canonical link, link names are prefixed by model name, e.g. pr2::base_link
	BodyNames []string `yaml:"body_names"`// list of links, link names are prefixed by model name, e.g. pr2::base_link
	GeomNames []string `yaml:"geom_names"`// list of collisions
	JointNames []string `yaml:"joint_names"`// list of joints attached to the model
	ChildModelNames []string `yaml:"child_model_names"`// list of child models
	IsStatic bool `yaml:"is_static"`// returns true if model is static
	Success bool `yaml:"success"`// return true if get successful
	StatusMessage string `yaml:"status_message"`// comments if available
}

// NewGetModelProperties_Response creates a new GetModelProperties_Response with default values.
func NewGetModelProperties_Response() *GetModelProperties_Response {
	self := GetModelProperties_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetModelProperties_Response) Clone() *GetModelProperties_Response {
	c := &GetModelProperties_Response{}
	c.ParentModelName = t.ParentModelName
	c.CanonicalBodyName = t.CanonicalBodyName
	if t.BodyNames != nil {
		c.BodyNames = make([]string, len(t.BodyNames))
		copy(c.BodyNames, t.BodyNames)
	}
	if t.GeomNames != nil {
		c.GeomNames = make([]string, len(t.GeomNames))
		copy(c.GeomNames, t.GeomNames)
	}
	if t.JointNames != nil {
		c.JointNames = make([]string, len(t.JointNames))
		copy(c.JointNames, t.JointNames)
	}
	if t.ChildModelNames != nil {
		c.ChildModelNames = make([]string, len(t.ChildModelNames))
		copy(c.ChildModelNames, t.ChildModelNames)
	}
	c.IsStatic = t.IsStatic
	c.Success = t.Success
	c.StatusMessage = t.StatusMessage
	return c
}

func (t *GetModelProperties_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetModelProperties_Response) SetDefaults() {
	t.ParentModelName = ""
	t.CanonicalBodyName = ""
	t.BodyNames = nil
	t.GeomNames = nil
	t.JointNames = nil
	t.ChildModelNames = nil
	t.IsStatic = false
	t.Success = false
	t.StatusMessage = ""
}

// CloneGetModelProperties_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetModelProperties_ResponseSlice(dst, src []GetModelProperties_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetModelProperties_ResponseTypeSupport types.MessageTypeSupport = _GetModelProperties_ResponseTypeSupport{}

type _GetModelProperties_ResponseTypeSupport struct{}

func (t _GetModelProperties_ResponseTypeSupport) New() types.Message {
	return NewGetModelProperties_Response()
}

func (t _GetModelProperties_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.gazebo_msgs__srv__GetModelProperties_Response
	return (unsafe.Pointer)(C.gazebo_msgs__srv__GetModelProperties_Response__create())
}

func (t _GetModelProperties_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.gazebo_msgs__srv__GetModelProperties_Response__destroy((*C.gazebo_msgs__srv__GetModelProperties_Response)(pointer_to_free))
}

func (t _GetModelProperties_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetModelProperties_Response)
	mem := (*C.gazebo_msgs__srv__GetModelProperties_Response)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.parent_model_name), m.ParentModelName)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.canonical_body_name), m.CanonicalBodyName)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.body_names)), m.BodyNames)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.geom_names)), m.GeomNames)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.joint_names)), m.JointNames)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.child_model_names)), m.ChildModelNames)
	mem.is_static = C.bool(m.IsStatic)
	mem.success = C.bool(m.Success)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.status_message), m.StatusMessage)
}

func (t _GetModelProperties_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetModelProperties_Response)
	mem := (*C.gazebo_msgs__srv__GetModelProperties_Response)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.ParentModelName, unsafe.Pointer(&mem.parent_model_name))
	primitives.StringAsGoStruct(&m.CanonicalBodyName, unsafe.Pointer(&mem.canonical_body_name))
	primitives.String__Sequence_to_Go(&m.BodyNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.body_names)))
	primitives.String__Sequence_to_Go(&m.GeomNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.geom_names)))
	primitives.String__Sequence_to_Go(&m.JointNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.joint_names)))
	primitives.String__Sequence_to_Go(&m.ChildModelNames, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.child_model_names)))
	m.IsStatic = bool(mem.is_static)
	m.Success = bool(mem.success)
	primitives.StringAsGoStruct(&m.StatusMessage, unsafe.Pointer(&mem.status_message))
}

func (t _GetModelProperties_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__gazebo_msgs__srv__GetModelProperties_Response())
}

type CGetModelProperties_Response = C.gazebo_msgs__srv__GetModelProperties_Response
type CGetModelProperties_Response__Sequence = C.gazebo_msgs__srv__GetModelProperties_Response__Sequence

func GetModelProperties_Response__Sequence_to_Go(goSlice *[]GetModelProperties_Response, cSlice CGetModelProperties_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetModelProperties_Response, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.gazebo_msgs__srv__GetModelProperties_Response__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__srv__GetModelProperties_Response * uintptr(i)),
		))
		GetModelProperties_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func GetModelProperties_Response__Sequence_to_C(cSlice *CGetModelProperties_Response__Sequence, goSlice []GetModelProperties_Response) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.gazebo_msgs__srv__GetModelProperties_Response)(C.malloc((C.size_t)(C.sizeof_struct_gazebo_msgs__srv__GetModelProperties_Response * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.gazebo_msgs__srv__GetModelProperties_Response)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__srv__GetModelProperties_Response * uintptr(i)),
		))
		GetModelProperties_ResponseTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func GetModelProperties_Response__Array_to_Go(goSlice []GetModelProperties_Response, cSlice []CGetModelProperties_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetModelProperties_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetModelProperties_Response__Array_to_C(cSlice []CGetModelProperties_Response, goSlice []GetModelProperties_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetModelProperties_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
