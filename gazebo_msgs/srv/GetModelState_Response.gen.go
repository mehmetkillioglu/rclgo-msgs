/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package gazebo_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "github.com/tiiuae/rclgo-msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/tiiuae/rclgo-msgs/std_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgazebo_msgs__rosidl_typesupport_c -lgazebo_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <gazebo_msgs/srv/get_model_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("gazebo_msgs/GetModelState_Response", GetModelState_ResponseTypeSupport)
}

// Do not create instances of this type directly. Always use NewGetModelState_Response
// function instead.
type GetModelState_Response struct {
	Header std_msgs_msg.Header `yaml:"header"`// Standard metadata for higher-level stamped data types.. Deprecated, kept for ROS 1 bridge.Use GetEntityStatean entity can be a model, body, or geombe sure to use gazebo scoped naming notation (e.g. [model_name::body_name])leave empty or "world" will use inertial world frame
	Pose geometry_msgs_msg.Pose `yaml:"pose"`// pose of model in relative entity frame. Deprecated, kept for ROS 1 bridge.Use GetEntityStatean entity can be a model, body, or geombe sure to use gazebo scoped naming notation (e.g. [model_name::body_name])leave empty or "world" will use inertial world frame* header.seq holds the number of requests since the plugin started* header.stamp timestamp related to the pose* header.frame_id not used but currently filled with the relative_entity_name
	Twist geometry_msgs_msg.Twist `yaml:"twist"`// twist of model in relative entity frame. Deprecated, kept for ROS 1 bridge.Use GetEntityStatean entity can be a model, body, or geombe sure to use gazebo scoped naming notation (e.g. [model_name::body_name])leave empty or "world" will use inertial world frame* header.seq holds the number of requests since the plugin started* header.stamp timestamp related to the pose* header.frame_id not used but currently filled with the relative_entity_name
	Success bool `yaml:"success"`// return true if get successful. Deprecated, kept for ROS 1 bridge.Use GetEntityStatean entity can be a model, body, or geombe sure to use gazebo scoped naming notation (e.g. [model_name::body_name])leave empty or "world" will use inertial world frame* header.seq holds the number of requests since the plugin started* header.stamp timestamp related to the pose* header.frame_id not used but currently filled with the relative_entity_name
	StatusMessage string `yaml:"status_message"`// comments if available. Deprecated, kept for ROS 1 bridge.Use GetEntityStatean entity can be a model, body, or geombe sure to use gazebo scoped naming notation (e.g. [model_name::body_name])leave empty or "world" will use inertial world frame* header.seq holds the number of requests since the plugin started* header.stamp timestamp related to the pose* header.frame_id not used but currently filled with the relative_entity_name
}

// NewGetModelState_Response creates a new GetModelState_Response with default values.
func NewGetModelState_Response() *GetModelState_Response {
	self := GetModelState_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetModelState_Response) Clone() *GetModelState_Response {
	c := &GetModelState_Response{}
	c.Header = *t.Header.Clone()
	c.Pose = *t.Pose.Clone()
	c.Twist = *t.Twist.Clone()
	c.Success = t.Success
	c.StatusMessage = t.StatusMessage
	return c
}

func (t *GetModelState_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetModelState_Response) SetDefaults() {
	t.Header.SetDefaults()
	t.Pose.SetDefaults()
	t.Twist.SetDefaults()
	t.Success = false
	t.StatusMessage = ""
}

// CloneGetModelState_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetModelState_ResponseSlice(dst, src []GetModelState_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetModelState_ResponseTypeSupport types.MessageTypeSupport = _GetModelState_ResponseTypeSupport{}

type _GetModelState_ResponseTypeSupport struct{}

func (t _GetModelState_ResponseTypeSupport) New() types.Message {
	return NewGetModelState_Response()
}

func (t _GetModelState_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.gazebo_msgs__srv__GetModelState_Response
	return (unsafe.Pointer)(C.gazebo_msgs__srv__GetModelState_Response__create())
}

func (t _GetModelState_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.gazebo_msgs__srv__GetModelState_Response__destroy((*C.gazebo_msgs__srv__GetModelState_Response)(pointer_to_free))
}

func (t _GetModelState_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetModelState_Response)
	mem := (*C.gazebo_msgs__srv__GetModelState_Response)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
	geometry_msgs_msg.TwistTypeSupport.AsCStruct(unsafe.Pointer(&mem.twist), &m.Twist)
	mem.success = C.bool(m.Success)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.status_message), m.StatusMessage)
}

func (t _GetModelState_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetModelState_Response)
	mem := (*C.gazebo_msgs__srv__GetModelState_Response)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
	geometry_msgs_msg.TwistTypeSupport.AsGoStruct(&m.Twist, unsafe.Pointer(&mem.twist))
	m.Success = bool(mem.success)
	primitives.StringAsGoStruct(&m.StatusMessage, unsafe.Pointer(&mem.status_message))
}

func (t _GetModelState_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__gazebo_msgs__srv__GetModelState_Response())
}

type CGetModelState_Response = C.gazebo_msgs__srv__GetModelState_Response
type CGetModelState_Response__Sequence = C.gazebo_msgs__srv__GetModelState_Response__Sequence

func GetModelState_Response__Sequence_to_Go(goSlice *[]GetModelState_Response, cSlice CGetModelState_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetModelState_Response, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.gazebo_msgs__srv__GetModelState_Response__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__srv__GetModelState_Response * uintptr(i)),
		))
		GetModelState_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func GetModelState_Response__Sequence_to_C(cSlice *CGetModelState_Response__Sequence, goSlice []GetModelState_Response) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.gazebo_msgs__srv__GetModelState_Response)(C.malloc((C.size_t)(C.sizeof_struct_gazebo_msgs__srv__GetModelState_Response * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.gazebo_msgs__srv__GetModelState_Response)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__srv__GetModelState_Response * uintptr(i)),
		))
		GetModelState_ResponseTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func GetModelState_Response__Array_to_Go(goSlice []GetModelState_Response, cSlice []CGetModelState_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetModelState_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetModelState_Response__Array_to_C(cSlice []CGetModelState_Response, goSlice []GetModelState_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetModelState_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
