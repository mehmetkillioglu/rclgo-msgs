/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package gazebo_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/tiiuae/rclgo-msgs/std_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgazebo_msgs__rosidl_typesupport_c -lgazebo_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <gazebo_msgs/srv/set_light_properties.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("gazebo_msgs/SetLightProperties_Request", SetLightProperties_RequestTypeSupport)
}

// Do not create instances of this type directly. Always use NewSetLightProperties_Request
// function instead.
type SetLightProperties_Request struct {
	LightName string `yaml:"light_name"`// name of Gazebo Light
	Diffuse std_msgs_msg.ColorRGBA `yaml:"diffuse"`// diffuse color as red, green, blue, alpha
	AttenuationConstant float64 `yaml:"attenuation_constant"`
	AttenuationLinear float64 `yaml:"attenuation_linear"`
	AttenuationQuadratic float64 `yaml:"attenuation_quadratic"`
}

// NewSetLightProperties_Request creates a new SetLightProperties_Request with default values.
func NewSetLightProperties_Request() *SetLightProperties_Request {
	self := SetLightProperties_Request{}
	self.SetDefaults()
	return &self
}

func (t *SetLightProperties_Request) Clone() *SetLightProperties_Request {
	c := &SetLightProperties_Request{}
	c.LightName = t.LightName
	c.Diffuse = *t.Diffuse.Clone()
	c.AttenuationConstant = t.AttenuationConstant
	c.AttenuationLinear = t.AttenuationLinear
	c.AttenuationQuadratic = t.AttenuationQuadratic
	return c
}

func (t *SetLightProperties_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SetLightProperties_Request) SetDefaults() {
	t.LightName = ""
	t.Diffuse.SetDefaults()
	t.AttenuationConstant = 0
	t.AttenuationLinear = 0
	t.AttenuationQuadratic = 0
}

// CloneSetLightProperties_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetLightProperties_RequestSlice(dst, src []SetLightProperties_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetLightProperties_RequestTypeSupport types.MessageTypeSupport = _SetLightProperties_RequestTypeSupport{}

type _SetLightProperties_RequestTypeSupport struct{}

func (t _SetLightProperties_RequestTypeSupport) New() types.Message {
	return NewSetLightProperties_Request()
}

func (t _SetLightProperties_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.gazebo_msgs__srv__SetLightProperties_Request
	return (unsafe.Pointer)(C.gazebo_msgs__srv__SetLightProperties_Request__create())
}

func (t _SetLightProperties_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.gazebo_msgs__srv__SetLightProperties_Request__destroy((*C.gazebo_msgs__srv__SetLightProperties_Request)(pointer_to_free))
}

func (t _SetLightProperties_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SetLightProperties_Request)
	mem := (*C.gazebo_msgs__srv__SetLightProperties_Request)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.light_name), m.LightName)
	std_msgs_msg.ColorRGBATypeSupport.AsCStruct(unsafe.Pointer(&mem.diffuse), &m.Diffuse)
	mem.attenuation_constant = C.double(m.AttenuationConstant)
	mem.attenuation_linear = C.double(m.AttenuationLinear)
	mem.attenuation_quadratic = C.double(m.AttenuationQuadratic)
}

func (t _SetLightProperties_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetLightProperties_Request)
	mem := (*C.gazebo_msgs__srv__SetLightProperties_Request)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.LightName, unsafe.Pointer(&mem.light_name))
	std_msgs_msg.ColorRGBATypeSupport.AsGoStruct(&m.Diffuse, unsafe.Pointer(&mem.diffuse))
	m.AttenuationConstant = float64(mem.attenuation_constant)
	m.AttenuationLinear = float64(mem.attenuation_linear)
	m.AttenuationQuadratic = float64(mem.attenuation_quadratic)
}

func (t _SetLightProperties_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__gazebo_msgs__srv__SetLightProperties_Request())
}

type CSetLightProperties_Request = C.gazebo_msgs__srv__SetLightProperties_Request
type CSetLightProperties_Request__Sequence = C.gazebo_msgs__srv__SetLightProperties_Request__Sequence

func SetLightProperties_Request__Sequence_to_Go(goSlice *[]SetLightProperties_Request, cSlice CSetLightProperties_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetLightProperties_Request, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.gazebo_msgs__srv__SetLightProperties_Request__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__srv__SetLightProperties_Request * uintptr(i)),
		))
		SetLightProperties_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func SetLightProperties_Request__Sequence_to_C(cSlice *CSetLightProperties_Request__Sequence, goSlice []SetLightProperties_Request) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.gazebo_msgs__srv__SetLightProperties_Request)(C.malloc((C.size_t)(C.sizeof_struct_gazebo_msgs__srv__SetLightProperties_Request * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.gazebo_msgs__srv__SetLightProperties_Request)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__srv__SetLightProperties_Request * uintptr(i)),
		))
		SetLightProperties_RequestTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func SetLightProperties_Request__Array_to_Go(goSlice []SetLightProperties_Request, cSlice []CSetLightProperties_Request) {
	for i := 0; i < len(cSlice); i++ {
		SetLightProperties_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SetLightProperties_Request__Array_to_C(cSlice []CSetLightProperties_Request, goSlice []SetLightProperties_Request) {
	for i := 0; i < len(goSlice); i++ {
		SetLightProperties_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
