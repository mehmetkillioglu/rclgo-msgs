/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package gazebo_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgazebo_msgs__rosidl_typesupport_c -lgazebo_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <gazebo_msgs/srv/set_light_properties.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("gazebo_msgs/SetLightProperties_Response", SetLightProperties_ResponseTypeSupport)
}

// Do not create instances of this type directly. Always use NewSetLightProperties_Response
// function instead.
type SetLightProperties_Response struct {
	Success bool `yaml:"success"`// return true if get successful
	StatusMessage string `yaml:"status_message"`// comments if available
}

// NewSetLightProperties_Response creates a new SetLightProperties_Response with default values.
func NewSetLightProperties_Response() *SetLightProperties_Response {
	self := SetLightProperties_Response{}
	self.SetDefaults()
	return &self
}

func (t *SetLightProperties_Response) Clone() *SetLightProperties_Response {
	c := &SetLightProperties_Response{}
	c.Success = t.Success
	c.StatusMessage = t.StatusMessage
	return c
}

func (t *SetLightProperties_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SetLightProperties_Response) SetDefaults() {
	t.Success = false
	t.StatusMessage = ""
}

// CloneSetLightProperties_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetLightProperties_ResponseSlice(dst, src []SetLightProperties_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetLightProperties_ResponseTypeSupport types.MessageTypeSupport = _SetLightProperties_ResponseTypeSupport{}

type _SetLightProperties_ResponseTypeSupport struct{}

func (t _SetLightProperties_ResponseTypeSupport) New() types.Message {
	return NewSetLightProperties_Response()
}

func (t _SetLightProperties_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.gazebo_msgs__srv__SetLightProperties_Response
	return (unsafe.Pointer)(C.gazebo_msgs__srv__SetLightProperties_Response__create())
}

func (t _SetLightProperties_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.gazebo_msgs__srv__SetLightProperties_Response__destroy((*C.gazebo_msgs__srv__SetLightProperties_Response)(pointer_to_free))
}

func (t _SetLightProperties_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SetLightProperties_Response)
	mem := (*C.gazebo_msgs__srv__SetLightProperties_Response)(dst)
	mem.success = C.bool(m.Success)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.status_message), m.StatusMessage)
}

func (t _SetLightProperties_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetLightProperties_Response)
	mem := (*C.gazebo_msgs__srv__SetLightProperties_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
	primitives.StringAsGoStruct(&m.StatusMessage, unsafe.Pointer(&mem.status_message))
}

func (t _SetLightProperties_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__gazebo_msgs__srv__SetLightProperties_Response())
}

type CSetLightProperties_Response = C.gazebo_msgs__srv__SetLightProperties_Response
type CSetLightProperties_Response__Sequence = C.gazebo_msgs__srv__SetLightProperties_Response__Sequence

func SetLightProperties_Response__Sequence_to_Go(goSlice *[]SetLightProperties_Response, cSlice CSetLightProperties_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetLightProperties_Response, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.gazebo_msgs__srv__SetLightProperties_Response__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__srv__SetLightProperties_Response * uintptr(i)),
		))
		SetLightProperties_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func SetLightProperties_Response__Sequence_to_C(cSlice *CSetLightProperties_Response__Sequence, goSlice []SetLightProperties_Response) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.gazebo_msgs__srv__SetLightProperties_Response)(C.malloc((C.size_t)(C.sizeof_struct_gazebo_msgs__srv__SetLightProperties_Response * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.gazebo_msgs__srv__SetLightProperties_Response)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_gazebo_msgs__srv__SetLightProperties_Response * uintptr(i)),
		))
		SetLightProperties_ResponseTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func SetLightProperties_Response__Array_to_Go(goSlice []SetLightProperties_Response, cSlice []CSetLightProperties_Response) {
	for i := 0; i < len(cSlice); i++ {
		SetLightProperties_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SetLightProperties_Response__Array_to_C(cSlice []CSetLightProperties_Response, goSlice []SetLightProperties_Response) {
	for i := 0; i < len(goSlice); i++ {
		SetLightProperties_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
