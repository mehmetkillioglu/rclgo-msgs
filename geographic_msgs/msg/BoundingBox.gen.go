/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package geographic_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgeographic_msgs__rosidl_typesupport_c -lgeographic_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/msg/bounding_box.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("geographic_msgs/BoundingBox", BoundingBoxTypeSupport)
}

// Do not create instances of this type directly. Always use NewBoundingBox
// function instead.
type BoundingBox struct {
	MinPt GeoPoint `yaml:"min_pt"`// lowest and most Southwestern corner
	MaxPt GeoPoint `yaml:"max_pt"`// highest and most Northeastern corner
}

// NewBoundingBox creates a new BoundingBox with default values.
func NewBoundingBox() *BoundingBox {
	self := BoundingBox{}
	self.SetDefaults()
	return &self
}

func (t *BoundingBox) Clone() *BoundingBox {
	c := &BoundingBox{}
	c.MinPt = *t.MinPt.Clone()
	c.MaxPt = *t.MaxPt.Clone()
	return c
}

func (t *BoundingBox) CloneMsg() types.Message {
	return t.Clone()
}

func (t *BoundingBox) SetDefaults() {
	t.MinPt.SetDefaults()
	t.MaxPt.SetDefaults()
}

// CloneBoundingBoxSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneBoundingBoxSlice(dst, src []BoundingBox) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var BoundingBoxTypeSupport types.MessageTypeSupport = _BoundingBoxTypeSupport{}

type _BoundingBoxTypeSupport struct{}

func (t _BoundingBoxTypeSupport) New() types.Message {
	return NewBoundingBox()
}

func (t _BoundingBoxTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__msg__BoundingBox
	return (unsafe.Pointer)(C.geographic_msgs__msg__BoundingBox__create())
}

func (t _BoundingBoxTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__msg__BoundingBox__destroy((*C.geographic_msgs__msg__BoundingBox)(pointer_to_free))
}

func (t _BoundingBoxTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*BoundingBox)
	mem := (*C.geographic_msgs__msg__BoundingBox)(dst)
	GeoPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.min_pt), &m.MinPt)
	GeoPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.max_pt), &m.MaxPt)
}

func (t _BoundingBoxTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*BoundingBox)
	mem := (*C.geographic_msgs__msg__BoundingBox)(ros2_message_buffer)
	GeoPointTypeSupport.AsGoStruct(&m.MinPt, unsafe.Pointer(&mem.min_pt))
	GeoPointTypeSupport.AsGoStruct(&m.MaxPt, unsafe.Pointer(&mem.max_pt))
}

func (t _BoundingBoxTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__msg__BoundingBox())
}

type CBoundingBox = C.geographic_msgs__msg__BoundingBox
type CBoundingBox__Sequence = C.geographic_msgs__msg__BoundingBox__Sequence

func BoundingBox__Sequence_to_Go(goSlice *[]BoundingBox, cSlice CBoundingBox__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]BoundingBox, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.geographic_msgs__msg__BoundingBox__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geographic_msgs__msg__BoundingBox * uintptr(i)),
		))
		BoundingBoxTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func BoundingBox__Sequence_to_C(cSlice *CBoundingBox__Sequence, goSlice []BoundingBox) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.geographic_msgs__msg__BoundingBox)(C.malloc((C.size_t)(C.sizeof_struct_geographic_msgs__msg__BoundingBox * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.geographic_msgs__msg__BoundingBox)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geographic_msgs__msg__BoundingBox * uintptr(i)),
		))
		BoundingBoxTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func BoundingBox__Array_to_Go(goSlice []BoundingBox, cSlice []CBoundingBox) {
	for i := 0; i < len(cSlice); i++ {
		BoundingBoxTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func BoundingBox__Array_to_C(cSlice []CBoundingBox, goSlice []BoundingBox) {
	for i := 0; i < len(goSlice); i++ {
		BoundingBoxTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
