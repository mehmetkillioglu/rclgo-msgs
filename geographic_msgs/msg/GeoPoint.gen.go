/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package geographic_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgeographic_msgs__rosidl_typesupport_c -lgeographic_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/msg/geo_point.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("geographic_msgs/GeoPoint", GeoPointTypeSupport)
}

// Do not create instances of this type directly. Always use NewGeoPoint
// function instead.
type GeoPoint struct {
	Latitude float64 `yaml:"latitude"`// Latitude [degrees]. Positive is north of equator; negative is south(-90 <= latitude <= +90).
	Longitude float64 `yaml:"longitude"`// Longitude [degrees]. Positive is east of prime meridian; negative iswest (-180 <= longitude <= +180). At the poles, latitude is -90 or+90, and longitude is irrelevant, but must be in range.
	Altitude float64 `yaml:"altitude"`// Altitude [m]. Positive is above the WGS 84 ellipsoid (NaN if unspecified).
}

// NewGeoPoint creates a new GeoPoint with default values.
func NewGeoPoint() *GeoPoint {
	self := GeoPoint{}
	self.SetDefaults()
	return &self
}

func (t *GeoPoint) Clone() *GeoPoint {
	c := &GeoPoint{}
	c.Latitude = t.Latitude
	c.Longitude = t.Longitude
	c.Altitude = t.Altitude
	return c
}

func (t *GeoPoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GeoPoint) SetDefaults() {
	t.Latitude = 0
	t.Longitude = 0
	t.Altitude = 0
}

// CloneGeoPointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGeoPointSlice(dst, src []GeoPoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GeoPointTypeSupport types.MessageTypeSupport = _GeoPointTypeSupport{}

type _GeoPointTypeSupport struct{}

func (t _GeoPointTypeSupport) New() types.Message {
	return NewGeoPoint()
}

func (t _GeoPointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__msg__GeoPoint
	return (unsafe.Pointer)(C.geographic_msgs__msg__GeoPoint__create())
}

func (t _GeoPointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__msg__GeoPoint__destroy((*C.geographic_msgs__msg__GeoPoint)(pointer_to_free))
}

func (t _GeoPointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GeoPoint)
	mem := (*C.geographic_msgs__msg__GeoPoint)(dst)
	mem.latitude = C.double(m.Latitude)
	mem.longitude = C.double(m.Longitude)
	mem.altitude = C.double(m.Altitude)
}

func (t _GeoPointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GeoPoint)
	mem := (*C.geographic_msgs__msg__GeoPoint)(ros2_message_buffer)
	m.Latitude = float64(mem.latitude)
	m.Longitude = float64(mem.longitude)
	m.Altitude = float64(mem.altitude)
}

func (t _GeoPointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__msg__GeoPoint())
}

type CGeoPoint = C.geographic_msgs__msg__GeoPoint
type CGeoPoint__Sequence = C.geographic_msgs__msg__GeoPoint__Sequence

func GeoPoint__Sequence_to_Go(goSlice *[]GeoPoint, cSlice CGeoPoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GeoPoint, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.geographic_msgs__msg__GeoPoint__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geographic_msgs__msg__GeoPoint * uintptr(i)),
		))
		GeoPointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func GeoPoint__Sequence_to_C(cSlice *CGeoPoint__Sequence, goSlice []GeoPoint) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.geographic_msgs__msg__GeoPoint)(C.malloc((C.size_t)(C.sizeof_struct_geographic_msgs__msg__GeoPoint * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.geographic_msgs__msg__GeoPoint)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geographic_msgs__msg__GeoPoint * uintptr(i)),
		))
		GeoPointTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func GeoPoint__Array_to_Go(goSlice []GeoPoint, cSlice []CGeoPoint) {
	for i := 0; i < len(cSlice); i++ {
		GeoPointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GeoPoint__Array_to_C(cSlice []CGeoPoint, goSlice []GeoPoint) {
	for i := 0; i < len(goSlice); i++ {
		GeoPointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
