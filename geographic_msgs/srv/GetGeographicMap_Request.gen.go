/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package geographic_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geographic_msgs_msg "github.com/mehmetkillioglu/rclgo-msgs/geographic_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgeographic_msgs__rosidl_typesupport_c -lgeographic_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeographic_msgs__rosidl_typesupport_c -lgeographic_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/srv/get_geographic_map.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("geographic_msgs/GetGeographicMap_Request", GetGeographicMap_RequestTypeSupport)
}

// Do not create instances of this type directly. Always use NewGetGeographicMap_Request
// function instead.
type GetGeographicMap_Request struct {
	Url string `yaml:"url"`// where to read map data
	Bounds geographic_msgs_msg.BoundingBox `yaml:"bounds"`// Bounding box for the desired map.  If all zeros, provide all dataavailable from the specified URL.
}

// NewGetGeographicMap_Request creates a new GetGeographicMap_Request with default values.
func NewGetGeographicMap_Request() *GetGeographicMap_Request {
	self := GetGeographicMap_Request{}
	self.SetDefaults()
	return &self
}

func (t *GetGeographicMap_Request) Clone() *GetGeographicMap_Request {
	c := &GetGeographicMap_Request{}
	c.Url = t.Url
	c.Bounds = *t.Bounds.Clone()
	return c
}

func (t *GetGeographicMap_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetGeographicMap_Request) SetDefaults() {
	t.Url = ""
	t.Bounds.SetDefaults()
}

// CloneGetGeographicMap_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetGeographicMap_RequestSlice(dst, src []GetGeographicMap_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetGeographicMap_RequestTypeSupport types.MessageTypeSupport = _GetGeographicMap_RequestTypeSupport{}

type _GetGeographicMap_RequestTypeSupport struct{}

func (t _GetGeographicMap_RequestTypeSupport) New() types.Message {
	return NewGetGeographicMap_Request()
}

func (t _GetGeographicMap_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__srv__GetGeographicMap_Request
	return (unsafe.Pointer)(C.geographic_msgs__srv__GetGeographicMap_Request__create())
}

func (t _GetGeographicMap_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__srv__GetGeographicMap_Request__destroy((*C.geographic_msgs__srv__GetGeographicMap_Request)(pointer_to_free))
}

func (t _GetGeographicMap_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetGeographicMap_Request)
	mem := (*C.geographic_msgs__srv__GetGeographicMap_Request)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.url), m.Url)
	geographic_msgs_msg.BoundingBoxTypeSupport.AsCStruct(unsafe.Pointer(&mem.bounds), &m.Bounds)
}

func (t _GetGeographicMap_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetGeographicMap_Request)
	mem := (*C.geographic_msgs__srv__GetGeographicMap_Request)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Url, unsafe.Pointer(&mem.url))
	geographic_msgs_msg.BoundingBoxTypeSupport.AsGoStruct(&m.Bounds, unsafe.Pointer(&mem.bounds))
}

func (t _GetGeographicMap_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__srv__GetGeographicMap_Request())
}

type CGetGeographicMap_Request = C.geographic_msgs__srv__GetGeographicMap_Request
type CGetGeographicMap_Request__Sequence = C.geographic_msgs__srv__GetGeographicMap_Request__Sequence

func GetGeographicMap_Request__Sequence_to_Go(goSlice *[]GetGeographicMap_Request, cSlice CGetGeographicMap_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetGeographicMap_Request, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.geographic_msgs__srv__GetGeographicMap_Request__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geographic_msgs__srv__GetGeographicMap_Request * uintptr(i)),
		))
		GetGeographicMap_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func GetGeographicMap_Request__Sequence_to_C(cSlice *CGetGeographicMap_Request__Sequence, goSlice []GetGeographicMap_Request) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.geographic_msgs__srv__GetGeographicMap_Request)(C.malloc((C.size_t)(C.sizeof_struct_geographic_msgs__srv__GetGeographicMap_Request * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.geographic_msgs__srv__GetGeographicMap_Request)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geographic_msgs__srv__GetGeographicMap_Request * uintptr(i)),
		))
		GetGeographicMap_RequestTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func GetGeographicMap_Request__Array_to_Go(goSlice []GetGeographicMap_Request, cSlice []CGetGeographicMap_Request) {
	for i := 0; i < len(cSlice); i++ {
		GetGeographicMap_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetGeographicMap_Request__Array_to_C(cSlice []CGetGeographicMap_Request, goSlice []GetGeographicMap_Request) {
	for i := 0; i < len(goSlice); i++ {
		GetGeographicMap_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
