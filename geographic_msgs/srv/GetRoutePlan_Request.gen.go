/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package geographic_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	unique_identifier_msgs_msg "github.com/tiiuae/rclgo-msgs/unique_identifier_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgeographic_msgs__rosidl_typesupport_c -lgeographic_msgs__rosidl_generator_c
#cgo LDFLAGS: -lunique_identifier_msgs__rosidl_typesupport_c -lunique_identifier_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/srv/get_route_plan.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("geographic_msgs/GetRoutePlan_Request", GetRoutePlan_RequestTypeSupport)
}

// Do not create instances of this type directly. Always use NewGetRoutePlan_Request
// function instead.
type GetRoutePlan_Request struct {
	Network unique_identifier_msgs_msg.UUID `yaml:"network"`// route network to use
	Start unique_identifier_msgs_msg.UUID `yaml:"start"`// starting way point
	Goal unique_identifier_msgs_msg.UUID `yaml:"goal"`// goal way point
}

// NewGetRoutePlan_Request creates a new GetRoutePlan_Request with default values.
func NewGetRoutePlan_Request() *GetRoutePlan_Request {
	self := GetRoutePlan_Request{}
	self.SetDefaults()
	return &self
}

func (t *GetRoutePlan_Request) Clone() *GetRoutePlan_Request {
	c := &GetRoutePlan_Request{}
	c.Network = *t.Network.Clone()
	c.Start = *t.Start.Clone()
	c.Goal = *t.Goal.Clone()
	return c
}

func (t *GetRoutePlan_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetRoutePlan_Request) SetDefaults() {
	t.Network.SetDefaults()
	t.Start.SetDefaults()
	t.Goal.SetDefaults()
}

// CloneGetRoutePlan_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetRoutePlan_RequestSlice(dst, src []GetRoutePlan_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetRoutePlan_RequestTypeSupport types.MessageTypeSupport = _GetRoutePlan_RequestTypeSupport{}

type _GetRoutePlan_RequestTypeSupport struct{}

func (t _GetRoutePlan_RequestTypeSupport) New() types.Message {
	return NewGetRoutePlan_Request()
}

func (t _GetRoutePlan_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__srv__GetRoutePlan_Request
	return (unsafe.Pointer)(C.geographic_msgs__srv__GetRoutePlan_Request__create())
}

func (t _GetRoutePlan_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__srv__GetRoutePlan_Request__destroy((*C.geographic_msgs__srv__GetRoutePlan_Request)(pointer_to_free))
}

func (t _GetRoutePlan_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetRoutePlan_Request)
	mem := (*C.geographic_msgs__srv__GetRoutePlan_Request)(dst)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.network), &m.Network)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.start), &m.Start)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsCStruct(unsafe.Pointer(&mem.goal), &m.Goal)
}

func (t _GetRoutePlan_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetRoutePlan_Request)
	mem := (*C.geographic_msgs__srv__GetRoutePlan_Request)(ros2_message_buffer)
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.Network, unsafe.Pointer(&mem.network))
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.Start, unsafe.Pointer(&mem.start))
	unique_identifier_msgs_msg.UUIDTypeSupport.AsGoStruct(&m.Goal, unsafe.Pointer(&mem.goal))
}

func (t _GetRoutePlan_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__srv__GetRoutePlan_Request())
}

type CGetRoutePlan_Request = C.geographic_msgs__srv__GetRoutePlan_Request
type CGetRoutePlan_Request__Sequence = C.geographic_msgs__srv__GetRoutePlan_Request__Sequence

func GetRoutePlan_Request__Sequence_to_Go(goSlice *[]GetRoutePlan_Request, cSlice CGetRoutePlan_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetRoutePlan_Request, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.geographic_msgs__srv__GetRoutePlan_Request__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geographic_msgs__srv__GetRoutePlan_Request * uintptr(i)),
		))
		GetRoutePlan_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func GetRoutePlan_Request__Sequence_to_C(cSlice *CGetRoutePlan_Request__Sequence, goSlice []GetRoutePlan_Request) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.geographic_msgs__srv__GetRoutePlan_Request)(C.malloc((C.size_t)(C.sizeof_struct_geographic_msgs__srv__GetRoutePlan_Request * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.geographic_msgs__srv__GetRoutePlan_Request)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geographic_msgs__srv__GetRoutePlan_Request * uintptr(i)),
		))
		GetRoutePlan_RequestTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func GetRoutePlan_Request__Array_to_Go(goSlice []GetRoutePlan_Request, cSlice []CGetRoutePlan_Request) {
	for i := 0; i < len(cSlice); i++ {
		GetRoutePlan_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetRoutePlan_Request__Array_to_C(cSlice []CGetRoutePlan_Request, goSlice []GetRoutePlan_Request) {
	for i := 0; i < len(goSlice); i++ {
		GetRoutePlan_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
