/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package geographic_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geographic_msgs_msg "github.com/tiiuae/rclgo-msgs/geographic_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgeographic_msgs__rosidl_typesupport_c -lgeographic_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeographic_msgs__rosidl_typesupport_c -lgeographic_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geographic_msgs/srv/get_route_plan.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("geographic_msgs/GetRoutePlan_Response", GetRoutePlan_ResponseTypeSupport)
}

// Do not create instances of this type directly. Always use NewGetRoutePlan_Response
// function instead.
type GetRoutePlan_Response struct {
	Success bool `yaml:"success"`// true if the call succeeded
	Status string `yaml:"status"`// more details
	Plan geographic_msgs_msg.RoutePath `yaml:"plan"`// path to follow
}

// NewGetRoutePlan_Response creates a new GetRoutePlan_Response with default values.
func NewGetRoutePlan_Response() *GetRoutePlan_Response {
	self := GetRoutePlan_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetRoutePlan_Response) Clone() *GetRoutePlan_Response {
	c := &GetRoutePlan_Response{}
	c.Success = t.Success
	c.Status = t.Status
	c.Plan = *t.Plan.Clone()
	return c
}

func (t *GetRoutePlan_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetRoutePlan_Response) SetDefaults() {
	t.Success = false
	t.Status = ""
	t.Plan.SetDefaults()
}

// CloneGetRoutePlan_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetRoutePlan_ResponseSlice(dst, src []GetRoutePlan_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetRoutePlan_ResponseTypeSupport types.MessageTypeSupport = _GetRoutePlan_ResponseTypeSupport{}

type _GetRoutePlan_ResponseTypeSupport struct{}

func (t _GetRoutePlan_ResponseTypeSupport) New() types.Message {
	return NewGetRoutePlan_Response()
}

func (t _GetRoutePlan_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geographic_msgs__srv__GetRoutePlan_Response
	return (unsafe.Pointer)(C.geographic_msgs__srv__GetRoutePlan_Response__create())
}

func (t _GetRoutePlan_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geographic_msgs__srv__GetRoutePlan_Response__destroy((*C.geographic_msgs__srv__GetRoutePlan_Response)(pointer_to_free))
}

func (t _GetRoutePlan_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetRoutePlan_Response)
	mem := (*C.geographic_msgs__srv__GetRoutePlan_Response)(dst)
	mem.success = C.bool(m.Success)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.status), m.Status)
	geographic_msgs_msg.RoutePathTypeSupport.AsCStruct(unsafe.Pointer(&mem.plan), &m.Plan)
}

func (t _GetRoutePlan_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetRoutePlan_Response)
	mem := (*C.geographic_msgs__srv__GetRoutePlan_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
	primitives.StringAsGoStruct(&m.Status, unsafe.Pointer(&mem.status))
	geographic_msgs_msg.RoutePathTypeSupport.AsGoStruct(&m.Plan, unsafe.Pointer(&mem.plan))
}

func (t _GetRoutePlan_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geographic_msgs__srv__GetRoutePlan_Response())
}

type CGetRoutePlan_Response = C.geographic_msgs__srv__GetRoutePlan_Response
type CGetRoutePlan_Response__Sequence = C.geographic_msgs__srv__GetRoutePlan_Response__Sequence

func GetRoutePlan_Response__Sequence_to_Go(goSlice *[]GetRoutePlan_Response, cSlice CGetRoutePlan_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetRoutePlan_Response, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.geographic_msgs__srv__GetRoutePlan_Response__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geographic_msgs__srv__GetRoutePlan_Response * uintptr(i)),
		))
		GetRoutePlan_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func GetRoutePlan_Response__Sequence_to_C(cSlice *CGetRoutePlan_Response__Sequence, goSlice []GetRoutePlan_Response) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.geographic_msgs__srv__GetRoutePlan_Response)(C.malloc((C.size_t)(C.sizeof_struct_geographic_msgs__srv__GetRoutePlan_Response * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.geographic_msgs__srv__GetRoutePlan_Response)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geographic_msgs__srv__GetRoutePlan_Response * uintptr(i)),
		))
		GetRoutePlan_ResponseTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func GetRoutePlan_Response__Array_to_Go(goSlice []GetRoutePlan_Response, cSlice []CGetRoutePlan_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetRoutePlan_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetRoutePlan_Response__Array_to_C(cSlice []CGetRoutePlan_Response, goSlice []GetRoutePlan_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetRoutePlan_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
