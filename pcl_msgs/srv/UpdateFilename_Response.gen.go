/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package pcl_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpcl_msgs__rosidl_typesupport_c -lpcl_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <pcl_msgs/srv/update_filename.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("pcl_msgs/UpdateFilename_Response", UpdateFilename_ResponseTypeSupport)
}

// Do not create instances of this type directly. Always use NewUpdateFilename_Response
// function instead.
type UpdateFilename_Response struct {
	Success bool `yaml:"success"`
}

// NewUpdateFilename_Response creates a new UpdateFilename_Response with default values.
func NewUpdateFilename_Response() *UpdateFilename_Response {
	self := UpdateFilename_Response{}
	self.SetDefaults()
	return &self
}

func (t *UpdateFilename_Response) Clone() *UpdateFilename_Response {
	c := &UpdateFilename_Response{}
	c.Success = t.Success
	return c
}

func (t *UpdateFilename_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *UpdateFilename_Response) SetDefaults() {
	t.Success = false
}

// CloneUpdateFilename_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneUpdateFilename_ResponseSlice(dst, src []UpdateFilename_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var UpdateFilename_ResponseTypeSupport types.MessageTypeSupport = _UpdateFilename_ResponseTypeSupport{}

type _UpdateFilename_ResponseTypeSupport struct{}

func (t _UpdateFilename_ResponseTypeSupport) New() types.Message {
	return NewUpdateFilename_Response()
}

func (t _UpdateFilename_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.pcl_msgs__srv__UpdateFilename_Response
	return (unsafe.Pointer)(C.pcl_msgs__srv__UpdateFilename_Response__create())
}

func (t _UpdateFilename_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.pcl_msgs__srv__UpdateFilename_Response__destroy((*C.pcl_msgs__srv__UpdateFilename_Response)(pointer_to_free))
}

func (t _UpdateFilename_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*UpdateFilename_Response)
	mem := (*C.pcl_msgs__srv__UpdateFilename_Response)(dst)
	mem.success = C.bool(m.Success)
}

func (t _UpdateFilename_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*UpdateFilename_Response)
	mem := (*C.pcl_msgs__srv__UpdateFilename_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
}

func (t _UpdateFilename_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__pcl_msgs__srv__UpdateFilename_Response())
}

type CUpdateFilename_Response = C.pcl_msgs__srv__UpdateFilename_Response
type CUpdateFilename_Response__Sequence = C.pcl_msgs__srv__UpdateFilename_Response__Sequence

func UpdateFilename_Response__Sequence_to_Go(goSlice *[]UpdateFilename_Response, cSlice CUpdateFilename_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]UpdateFilename_Response, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.pcl_msgs__srv__UpdateFilename_Response__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_pcl_msgs__srv__UpdateFilename_Response * uintptr(i)),
		))
		UpdateFilename_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func UpdateFilename_Response__Sequence_to_C(cSlice *CUpdateFilename_Response__Sequence, goSlice []UpdateFilename_Response) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.pcl_msgs__srv__UpdateFilename_Response)(C.malloc((C.size_t)(C.sizeof_struct_pcl_msgs__srv__UpdateFilename_Response * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.pcl_msgs__srv__UpdateFilename_Response)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_pcl_msgs__srv__UpdateFilename_Response * uintptr(i)),
		))
		UpdateFilename_ResponseTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func UpdateFilename_Response__Array_to_Go(goSlice []UpdateFilename_Response, cSlice []CUpdateFilename_Response) {
	for i := 0; i < len(cSlice); i++ {
		UpdateFilename_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func UpdateFilename_Response__Array_to_C(cSlice []CUpdateFilename_Response, goSlice []UpdateFilename_Response) {
	for i := 0; i < len(goSlice); i++ {
		UpdateFilename_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
