/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/adc_report.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/AdcReport", AdcReportTypeSupport)
}

// Do not create instances of this type directly. Always use NewAdcReport
// function instead.
type AdcReport struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	DeviceId uint32 `yaml:"device_id"`// unique device ID for the sensor that does not change between power cycles
	ChannelId [12]int16 `yaml:"channel_id"`// ADC channel IDs, negative for non-existent, TODO: should be kept same as array index
	RawData [12]int32 `yaml:"raw_data"`// ADC channel raw value, accept negative value, valid if channel ID is positive
	Resolution uint32 `yaml:"resolution"`// ADC channel resolution
	VRef float32 `yaml:"v_ref"`// ADC channel voltage reference, use to calculate LSB voltage(lsb=scale/resolution)
}

// NewAdcReport creates a new AdcReport with default values.
func NewAdcReport() *AdcReport {
	self := AdcReport{}
	self.SetDefaults()
	return &self
}

func (t *AdcReport) Clone() *AdcReport {
	c := &AdcReport{}
	c.Timestamp = t.Timestamp
	c.DeviceId = t.DeviceId
	c.ChannelId = t.ChannelId
	c.RawData = t.RawData
	c.Resolution = t.Resolution
	c.VRef = t.VRef
	return c
}

func (t *AdcReport) CloneMsg() types.Message {
	return t.Clone()
}

func (t *AdcReport) SetDefaults() {
	t.Timestamp = 0
	t.DeviceId = 0
	t.ChannelId = [12]int16{}
	t.RawData = [12]int32{}
	t.Resolution = 0
	t.VRef = 0
}

// CloneAdcReportSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAdcReportSlice(dst, src []AdcReport) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AdcReportTypeSupport types.MessageTypeSupport = _AdcReportTypeSupport{}

type _AdcReportTypeSupport struct{}

func (t _AdcReportTypeSupport) New() types.Message {
	return NewAdcReport()
}

func (t _AdcReportTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__AdcReport
	return (unsafe.Pointer)(C.px4_msgs__msg__AdcReport__create())
}

func (t _AdcReportTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__AdcReport__destroy((*C.px4_msgs__msg__AdcReport)(pointer_to_free))
}

func (t _AdcReportTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*AdcReport)
	mem := (*C.px4_msgs__msg__AdcReport)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.device_id = C.uint32_t(m.DeviceId)
	cSlice_channel_id := mem.channel_id[:]
	primitives.Int16__Array_to_C(*(*[]primitives.CInt16)(unsafe.Pointer(&cSlice_channel_id)), m.ChannelId[:])
	cSlice_raw_data := mem.raw_data[:]
	primitives.Int32__Array_to_C(*(*[]primitives.CInt32)(unsafe.Pointer(&cSlice_raw_data)), m.RawData[:])
	mem.resolution = C.uint32_t(m.Resolution)
	mem.v_ref = C.float(m.VRef)
}

func (t _AdcReportTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*AdcReport)
	mem := (*C.px4_msgs__msg__AdcReport)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.DeviceId = uint32(mem.device_id)
	cSlice_channel_id := mem.channel_id[:]
	primitives.Int16__Array_to_Go(m.ChannelId[:], *(*[]primitives.CInt16)(unsafe.Pointer(&cSlice_channel_id)))
	cSlice_raw_data := mem.raw_data[:]
	primitives.Int32__Array_to_Go(m.RawData[:], *(*[]primitives.CInt32)(unsafe.Pointer(&cSlice_raw_data)))
	m.Resolution = uint32(mem.resolution)
	m.VRef = float32(mem.v_ref)
}

func (t _AdcReportTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__AdcReport())
}

type CAdcReport = C.px4_msgs__msg__AdcReport
type CAdcReport__Sequence = C.px4_msgs__msg__AdcReport__Sequence

func AdcReport__Sequence_to_Go(goSlice *[]AdcReport, cSlice CAdcReport__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AdcReport, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__AdcReport__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__AdcReport * uintptr(i)),
		))
		AdcReportTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func AdcReport__Sequence_to_C(cSlice *CAdcReport__Sequence, goSlice []AdcReport) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__AdcReport)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__AdcReport * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__AdcReport)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__AdcReport * uintptr(i)),
		))
		AdcReportTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func AdcReport__Array_to_Go(goSlice []AdcReport, cSlice []CAdcReport) {
	for i := 0; i < len(cSlice); i++ {
		AdcReportTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func AdcReport__Array_to_C(cSlice []CAdcReport, goSlice []AdcReport) {
	for i := 0; i < len(goSlice); i++ {
		AdcReportTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
