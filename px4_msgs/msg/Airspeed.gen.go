/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/airspeed.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/Airspeed", AirspeedTypeSupport)
}

// Do not create instances of this type directly. Always use NewAirspeed
// function instead.
type Airspeed struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	IndicatedAirspeedMS float32 `yaml:"indicated_airspeed_m_s"`// indicated airspeed in m/s
	TrueAirspeedMS float32 `yaml:"true_airspeed_m_s"`// true filtered airspeed in m/s
	AirTemperatureCelsius float32 `yaml:"air_temperature_celsius"`// air temperature in degrees celsius, -1000 if unknown
	Confidence float32 `yaml:"confidence"`// confidence value from 0 to 1 for this sensor
}

// NewAirspeed creates a new Airspeed with default values.
func NewAirspeed() *Airspeed {
	self := Airspeed{}
	self.SetDefaults()
	return &self
}

func (t *Airspeed) Clone() *Airspeed {
	c := &Airspeed{}
	c.Timestamp = t.Timestamp
	c.IndicatedAirspeedMS = t.IndicatedAirspeedMS
	c.TrueAirspeedMS = t.TrueAirspeedMS
	c.AirTemperatureCelsius = t.AirTemperatureCelsius
	c.Confidence = t.Confidence
	return c
}

func (t *Airspeed) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Airspeed) SetDefaults() {
	t.Timestamp = 0
	t.IndicatedAirspeedMS = 0
	t.TrueAirspeedMS = 0
	t.AirTemperatureCelsius = 0
	t.Confidence = 0
}

// CloneAirspeedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAirspeedSlice(dst, src []Airspeed) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AirspeedTypeSupport types.MessageTypeSupport = _AirspeedTypeSupport{}

type _AirspeedTypeSupport struct{}

func (t _AirspeedTypeSupport) New() types.Message {
	return NewAirspeed()
}

func (t _AirspeedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__Airspeed
	return (unsafe.Pointer)(C.px4_msgs__msg__Airspeed__create())
}

func (t _AirspeedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__Airspeed__destroy((*C.px4_msgs__msg__Airspeed)(pointer_to_free))
}

func (t _AirspeedTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Airspeed)
	mem := (*C.px4_msgs__msg__Airspeed)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.indicated_airspeed_m_s = C.float(m.IndicatedAirspeedMS)
	mem.true_airspeed_m_s = C.float(m.TrueAirspeedMS)
	mem.air_temperature_celsius = C.float(m.AirTemperatureCelsius)
	mem.confidence = C.float(m.Confidence)
}

func (t _AirspeedTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Airspeed)
	mem := (*C.px4_msgs__msg__Airspeed)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.IndicatedAirspeedMS = float32(mem.indicated_airspeed_m_s)
	m.TrueAirspeedMS = float32(mem.true_airspeed_m_s)
	m.AirTemperatureCelsius = float32(mem.air_temperature_celsius)
	m.Confidence = float32(mem.confidence)
}

func (t _AirspeedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__Airspeed())
}

type CAirspeed = C.px4_msgs__msg__Airspeed
type CAirspeed__Sequence = C.px4_msgs__msg__Airspeed__Sequence

func Airspeed__Sequence_to_Go(goSlice *[]Airspeed, cSlice CAirspeed__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Airspeed, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__Airspeed__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__Airspeed * uintptr(i)),
		))
		AirspeedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func Airspeed__Sequence_to_C(cSlice *CAirspeed__Sequence, goSlice []Airspeed) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__Airspeed)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__Airspeed * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__Airspeed)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__Airspeed * uintptr(i)),
		))
		AirspeedTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func Airspeed__Array_to_Go(goSlice []Airspeed, cSlice []CAirspeed) {
	for i := 0; i < len(cSlice); i++ {
		AirspeedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Airspeed__Array_to_C(cSlice []CAirspeed, goSlice []Airspeed) {
	for i := 0; i < len(goSlice); i++ {
		AirspeedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
