/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/debug_value.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/DebugValue", DebugValueTypeSupport)
}

// Do not create instances of this type directly. Always use NewDebugValue
// function instead.
type DebugValue struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Ind int8 `yaml:"ind"`// index of debug variable
	Value float32 `yaml:"value"`// the value to send as debug output
}

// NewDebugValue creates a new DebugValue with default values.
func NewDebugValue() *DebugValue {
	self := DebugValue{}
	self.SetDefaults()
	return &self
}

func (t *DebugValue) Clone() *DebugValue {
	c := &DebugValue{}
	c.Timestamp = t.Timestamp
	c.Ind = t.Ind
	c.Value = t.Value
	return c
}

func (t *DebugValue) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DebugValue) SetDefaults() {
	t.Timestamp = 0
	t.Ind = 0
	t.Value = 0
}

// CloneDebugValueSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDebugValueSlice(dst, src []DebugValue) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DebugValueTypeSupport types.MessageTypeSupport = _DebugValueTypeSupport{}

type _DebugValueTypeSupport struct{}

func (t _DebugValueTypeSupport) New() types.Message {
	return NewDebugValue()
}

func (t _DebugValueTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__DebugValue
	return (unsafe.Pointer)(C.px4_msgs__msg__DebugValue__create())
}

func (t _DebugValueTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__DebugValue__destroy((*C.px4_msgs__msg__DebugValue)(pointer_to_free))
}

func (t _DebugValueTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DebugValue)
	mem := (*C.px4_msgs__msg__DebugValue)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.ind = C.int8_t(m.Ind)
	mem.value = C.float(m.Value)
}

func (t _DebugValueTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DebugValue)
	mem := (*C.px4_msgs__msg__DebugValue)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Ind = int8(mem.ind)
	m.Value = float32(mem.value)
}

func (t _DebugValueTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__DebugValue())
}

type CDebugValue = C.px4_msgs__msg__DebugValue
type CDebugValue__Sequence = C.px4_msgs__msg__DebugValue__Sequence

func DebugValue__Sequence_to_Go(goSlice *[]DebugValue, cSlice CDebugValue__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DebugValue, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__DebugValue__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__DebugValue * uintptr(i)),
		))
		DebugValueTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func DebugValue__Sequence_to_C(cSlice *CDebugValue__Sequence, goSlice []DebugValue) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__DebugValue)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__DebugValue * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__DebugValue)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__DebugValue * uintptr(i)),
		))
		DebugValueTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func DebugValue__Array_to_Go(goSlice []DebugValue, cSlice []CDebugValue) {
	for i := 0; i < len(cSlice); i++ {
		DebugValueTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DebugValue__Array_to_C(cSlice []CDebugValue, goSlice []DebugValue) {
	for i := 0; i < len(goSlice); i++ {
		DebugValueTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
