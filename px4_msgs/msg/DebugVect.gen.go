/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/debug_vect.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/DebugVect", DebugVectTypeSupport)
}

// Do not create instances of this type directly. Always use NewDebugVect
// function instead.
type DebugVect struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Name [10]byte `yaml:"name"`// max. 10 characters as key / name
	X float32 `yaml:"x"`// x value
	Y float32 `yaml:"y"`// y value
	Z float32 `yaml:"z"`// z value
}

// NewDebugVect creates a new DebugVect with default values.
func NewDebugVect() *DebugVect {
	self := DebugVect{}
	self.SetDefaults()
	return &self
}

func (t *DebugVect) Clone() *DebugVect {
	c := &DebugVect{}
	c.Timestamp = t.Timestamp
	c.Name = t.Name
	c.X = t.X
	c.Y = t.Y
	c.Z = t.Z
	return c
}

func (t *DebugVect) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DebugVect) SetDefaults() {
	t.Timestamp = 0
	t.Name = [10]byte{}
	t.X = 0
	t.Y = 0
	t.Z = 0
}

// CloneDebugVectSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDebugVectSlice(dst, src []DebugVect) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DebugVectTypeSupport types.MessageTypeSupport = _DebugVectTypeSupport{}

type _DebugVectTypeSupport struct{}

func (t _DebugVectTypeSupport) New() types.Message {
	return NewDebugVect()
}

func (t _DebugVectTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__DebugVect
	return (unsafe.Pointer)(C.px4_msgs__msg__DebugVect__create())
}

func (t _DebugVectTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__DebugVect__destroy((*C.px4_msgs__msg__DebugVect)(pointer_to_free))
}

func (t _DebugVectTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DebugVect)
	mem := (*C.px4_msgs__msg__DebugVect)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_name := mem.name[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_name)), m.Name[:])
	mem.x = C.float(m.X)
	mem.y = C.float(m.Y)
	mem.z = C.float(m.Z)
}

func (t _DebugVectTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DebugVect)
	mem := (*C.px4_msgs__msg__DebugVect)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_name := mem.name[:]
	primitives.Char__Array_to_Go(m.Name[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_name)))
	m.X = float32(mem.x)
	m.Y = float32(mem.y)
	m.Z = float32(mem.z)
}

func (t _DebugVectTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__DebugVect())
}

type CDebugVect = C.px4_msgs__msg__DebugVect
type CDebugVect__Sequence = C.px4_msgs__msg__DebugVect__Sequence

func DebugVect__Sequence_to_Go(goSlice *[]DebugVect, cSlice CDebugVect__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DebugVect, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__DebugVect__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__DebugVect * uintptr(i)),
		))
		DebugVectTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func DebugVect__Sequence_to_C(cSlice *CDebugVect__Sequence, goSlice []DebugVect) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__DebugVect)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__DebugVect * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__DebugVect)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__DebugVect * uintptr(i)),
		))
		DebugVectTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func DebugVect__Array_to_Go(goSlice []DebugVect, cSlice []CDebugVect) {
	for i := 0; i < len(cSlice); i++ {
		DebugVectTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DebugVect__Array_to_C(cSlice []CDebugVect, goSlice []DebugVect) {
	for i := 0; i < len(goSlice); i++ {
		DebugVectTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
