/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/estimator_optical_flow_vel.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/EstimatorOpticalFlowVel", EstimatorOpticalFlowVelTypeSupport)
}

// Do not create instances of this type directly. Always use NewEstimatorOpticalFlowVel
// function instead.
type EstimatorOpticalFlowVel struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	TimestampSample uint64 `yaml:"timestamp_sample"`// the timestamp of the raw data (microseconds)
	VelBody [2]float32 `yaml:"vel_body"`// velocity obtained from gyro-compensated and distance-scaled optical flow raw measurements in body frame(m/s)
	VelNe [2]float32 `yaml:"vel_ne"`// same as vel_body but in local frame (m/s)
	FlowUncompensatedIntegral [2]float32 `yaml:"flow_uncompensated_integral"`// integrated optical flow measurement (rad)
	FlowCompensatedIntegral [2]float32 `yaml:"flow_compensated_integral"`// integrated optical flow measurement compensated for angular motion (rad)
	GyroRateIntegral [3]float32 `yaml:"gyro_rate_integral"`// gyro measurement integrated to flow rate and synchronized with flow measurements (rad)
}

// NewEstimatorOpticalFlowVel creates a new EstimatorOpticalFlowVel with default values.
func NewEstimatorOpticalFlowVel() *EstimatorOpticalFlowVel {
	self := EstimatorOpticalFlowVel{}
	self.SetDefaults()
	return &self
}

func (t *EstimatorOpticalFlowVel) Clone() *EstimatorOpticalFlowVel {
	c := &EstimatorOpticalFlowVel{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.VelBody = t.VelBody
	c.VelNe = t.VelNe
	c.FlowUncompensatedIntegral = t.FlowUncompensatedIntegral
	c.FlowCompensatedIntegral = t.FlowCompensatedIntegral
	c.GyroRateIntegral = t.GyroRateIntegral
	return c
}

func (t *EstimatorOpticalFlowVel) CloneMsg() types.Message {
	return t.Clone()
}

func (t *EstimatorOpticalFlowVel) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.VelBody = [2]float32{}
	t.VelNe = [2]float32{}
	t.FlowUncompensatedIntegral = [2]float32{}
	t.FlowCompensatedIntegral = [2]float32{}
	t.GyroRateIntegral = [3]float32{}
}

// CloneEstimatorOpticalFlowVelSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneEstimatorOpticalFlowVelSlice(dst, src []EstimatorOpticalFlowVel) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var EstimatorOpticalFlowVelTypeSupport types.MessageTypeSupport = _EstimatorOpticalFlowVelTypeSupport{}

type _EstimatorOpticalFlowVelTypeSupport struct{}

func (t _EstimatorOpticalFlowVelTypeSupport) New() types.Message {
	return NewEstimatorOpticalFlowVel()
}

func (t _EstimatorOpticalFlowVelTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__EstimatorOpticalFlowVel
	return (unsafe.Pointer)(C.px4_msgs__msg__EstimatorOpticalFlowVel__create())
}

func (t _EstimatorOpticalFlowVelTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__EstimatorOpticalFlowVel__destroy((*C.px4_msgs__msg__EstimatorOpticalFlowVel)(pointer_to_free))
}

func (t _EstimatorOpticalFlowVelTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*EstimatorOpticalFlowVel)
	mem := (*C.px4_msgs__msg__EstimatorOpticalFlowVel)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	cSlice_vel_body := mem.vel_body[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_vel_body)), m.VelBody[:])
	cSlice_vel_ne := mem.vel_ne[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_vel_ne)), m.VelNe[:])
	cSlice_flow_uncompensated_integral := mem.flow_uncompensated_integral[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_flow_uncompensated_integral)), m.FlowUncompensatedIntegral[:])
	cSlice_flow_compensated_integral := mem.flow_compensated_integral[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_flow_compensated_integral)), m.FlowCompensatedIntegral[:])
	cSlice_gyro_rate_integral := mem.gyro_rate_integral[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gyro_rate_integral)), m.GyroRateIntegral[:])
}

func (t _EstimatorOpticalFlowVelTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*EstimatorOpticalFlowVel)
	mem := (*C.px4_msgs__msg__EstimatorOpticalFlowVel)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	cSlice_vel_body := mem.vel_body[:]
	primitives.Float32__Array_to_Go(m.VelBody[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_vel_body)))
	cSlice_vel_ne := mem.vel_ne[:]
	primitives.Float32__Array_to_Go(m.VelNe[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_vel_ne)))
	cSlice_flow_uncompensated_integral := mem.flow_uncompensated_integral[:]
	primitives.Float32__Array_to_Go(m.FlowUncompensatedIntegral[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_flow_uncompensated_integral)))
	cSlice_flow_compensated_integral := mem.flow_compensated_integral[:]
	primitives.Float32__Array_to_Go(m.FlowCompensatedIntegral[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_flow_compensated_integral)))
	cSlice_gyro_rate_integral := mem.gyro_rate_integral[:]
	primitives.Float32__Array_to_Go(m.GyroRateIntegral[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gyro_rate_integral)))
}

func (t _EstimatorOpticalFlowVelTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__EstimatorOpticalFlowVel())
}

type CEstimatorOpticalFlowVel = C.px4_msgs__msg__EstimatorOpticalFlowVel
type CEstimatorOpticalFlowVel__Sequence = C.px4_msgs__msg__EstimatorOpticalFlowVel__Sequence

func EstimatorOpticalFlowVel__Sequence_to_Go(goSlice *[]EstimatorOpticalFlowVel, cSlice CEstimatorOpticalFlowVel__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]EstimatorOpticalFlowVel, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__EstimatorOpticalFlowVel__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__EstimatorOpticalFlowVel * uintptr(i)),
		))
		EstimatorOpticalFlowVelTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func EstimatorOpticalFlowVel__Sequence_to_C(cSlice *CEstimatorOpticalFlowVel__Sequence, goSlice []EstimatorOpticalFlowVel) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__EstimatorOpticalFlowVel)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__EstimatorOpticalFlowVel * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__EstimatorOpticalFlowVel)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__EstimatorOpticalFlowVel * uintptr(i)),
		))
		EstimatorOpticalFlowVelTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func EstimatorOpticalFlowVel__Array_to_Go(goSlice []EstimatorOpticalFlowVel, cSlice []CEstimatorOpticalFlowVel) {
	for i := 0; i < len(cSlice); i++ {
		EstimatorOpticalFlowVelTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func EstimatorOpticalFlowVel__Array_to_C(cSlice []CEstimatorOpticalFlowVel, goSlice []EstimatorOpticalFlowVel) {
	for i := 0; i < len(goSlice); i++ {
		EstimatorOpticalFlowVelTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
