/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/gimbal_device_attitude_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/GimbalDeviceAttitudeStatus", GimbalDeviceAttitudeStatusTypeSupport)
}
const (
	GimbalDeviceAttitudeStatus_DEVICE_FLAGS_RETRACT uint16 = 1
	GimbalDeviceAttitudeStatus_DEVICE_FLAGS_NEUTRAL uint16 = 2
	GimbalDeviceAttitudeStatus_DEVICE_FLAGS_ROLL_LOCK uint16 = 4
	GimbalDeviceAttitudeStatus_DEVICE_FLAGS_PITCH_LOCK uint16 = 8
	GimbalDeviceAttitudeStatus_DEVICE_FLAGS_YAW_LOCK uint16 = 16
)

// Do not create instances of this type directly. Always use NewGimbalDeviceAttitudeStatus
// function instead.
type GimbalDeviceAttitudeStatus struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	TargetSystem uint8 `yaml:"target_system"`
	TargetComponent uint8 `yaml:"target_component"`
	DeviceFlags uint16 `yaml:"device_flags"`
	Q [4]float32 `yaml:"q"`
	AngularVelocityX float32 `yaml:"angular_velocity_x"`
	AngularVelocityY float32 `yaml:"angular_velocity_y"`
	AngularVelocityZ float32 `yaml:"angular_velocity_z"`
	FailureFlags uint32 `yaml:"failure_flags"`
}

// NewGimbalDeviceAttitudeStatus creates a new GimbalDeviceAttitudeStatus with default values.
func NewGimbalDeviceAttitudeStatus() *GimbalDeviceAttitudeStatus {
	self := GimbalDeviceAttitudeStatus{}
	self.SetDefaults()
	return &self
}

func (t *GimbalDeviceAttitudeStatus) Clone() *GimbalDeviceAttitudeStatus {
	c := &GimbalDeviceAttitudeStatus{}
	c.Timestamp = t.Timestamp
	c.TargetSystem = t.TargetSystem
	c.TargetComponent = t.TargetComponent
	c.DeviceFlags = t.DeviceFlags
	c.Q = t.Q
	c.AngularVelocityX = t.AngularVelocityX
	c.AngularVelocityY = t.AngularVelocityY
	c.AngularVelocityZ = t.AngularVelocityZ
	c.FailureFlags = t.FailureFlags
	return c
}

func (t *GimbalDeviceAttitudeStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GimbalDeviceAttitudeStatus) SetDefaults() {
	t.Timestamp = 0
	t.TargetSystem = 0
	t.TargetComponent = 0
	t.DeviceFlags = 0
	t.Q = [4]float32{}
	t.AngularVelocityX = 0
	t.AngularVelocityY = 0
	t.AngularVelocityZ = 0
	t.FailureFlags = 0
}

// CloneGimbalDeviceAttitudeStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGimbalDeviceAttitudeStatusSlice(dst, src []GimbalDeviceAttitudeStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GimbalDeviceAttitudeStatusTypeSupport types.MessageTypeSupport = _GimbalDeviceAttitudeStatusTypeSupport{}

type _GimbalDeviceAttitudeStatusTypeSupport struct{}

func (t _GimbalDeviceAttitudeStatusTypeSupport) New() types.Message {
	return NewGimbalDeviceAttitudeStatus()
}

func (t _GimbalDeviceAttitudeStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__GimbalDeviceAttitudeStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__GimbalDeviceAttitudeStatus__create())
}

func (t _GimbalDeviceAttitudeStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__GimbalDeviceAttitudeStatus__destroy((*C.px4_msgs__msg__GimbalDeviceAttitudeStatus)(pointer_to_free))
}

func (t _GimbalDeviceAttitudeStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GimbalDeviceAttitudeStatus)
	mem := (*C.px4_msgs__msg__GimbalDeviceAttitudeStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.target_system = C.uint8_t(m.TargetSystem)
	mem.target_component = C.uint8_t(m.TargetComponent)
	mem.device_flags = C.uint16_t(m.DeviceFlags)
	cSlice_q := mem.q[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_q)), m.Q[:])
	mem.angular_velocity_x = C.float(m.AngularVelocityX)
	mem.angular_velocity_y = C.float(m.AngularVelocityY)
	mem.angular_velocity_z = C.float(m.AngularVelocityZ)
	mem.failure_flags = C.uint32_t(m.FailureFlags)
}

func (t _GimbalDeviceAttitudeStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GimbalDeviceAttitudeStatus)
	mem := (*C.px4_msgs__msg__GimbalDeviceAttitudeStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TargetSystem = uint8(mem.target_system)
	m.TargetComponent = uint8(mem.target_component)
	m.DeviceFlags = uint16(mem.device_flags)
	cSlice_q := mem.q[:]
	primitives.Float32__Array_to_Go(m.Q[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_q)))
	m.AngularVelocityX = float32(mem.angular_velocity_x)
	m.AngularVelocityY = float32(mem.angular_velocity_y)
	m.AngularVelocityZ = float32(mem.angular_velocity_z)
	m.FailureFlags = uint32(mem.failure_flags)
}

func (t _GimbalDeviceAttitudeStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__GimbalDeviceAttitudeStatus())
}

type CGimbalDeviceAttitudeStatus = C.px4_msgs__msg__GimbalDeviceAttitudeStatus
type CGimbalDeviceAttitudeStatus__Sequence = C.px4_msgs__msg__GimbalDeviceAttitudeStatus__Sequence

func GimbalDeviceAttitudeStatus__Sequence_to_Go(goSlice *[]GimbalDeviceAttitudeStatus, cSlice CGimbalDeviceAttitudeStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GimbalDeviceAttitudeStatus, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__GimbalDeviceAttitudeStatus__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__GimbalDeviceAttitudeStatus * uintptr(i)),
		))
		GimbalDeviceAttitudeStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func GimbalDeviceAttitudeStatus__Sequence_to_C(cSlice *CGimbalDeviceAttitudeStatus__Sequence, goSlice []GimbalDeviceAttitudeStatus) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__GimbalDeviceAttitudeStatus)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__GimbalDeviceAttitudeStatus * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__GimbalDeviceAttitudeStatus)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__GimbalDeviceAttitudeStatus * uintptr(i)),
		))
		GimbalDeviceAttitudeStatusTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func GimbalDeviceAttitudeStatus__Array_to_Go(goSlice []GimbalDeviceAttitudeStatus, cSlice []CGimbalDeviceAttitudeStatus) {
	for i := 0; i < len(cSlice); i++ {
		GimbalDeviceAttitudeStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GimbalDeviceAttitudeStatus__Array_to_C(cSlice []CGimbalDeviceAttitudeStatus, goSlice []GimbalDeviceAttitudeStatus) {
	for i := 0; i < len(goSlice); i++ {
		GimbalDeviceAttitudeStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
