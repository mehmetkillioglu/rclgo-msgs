/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/hover_thrust_estimate.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/HoverThrustEstimate", HoverThrustEstimateTypeSupport)
}

// Do not create instances of this type directly. Always use NewHoverThrustEstimate
// function instead.
type HoverThrustEstimate struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	TimestampSample uint64 `yaml:"timestamp_sample"`// time of corresponding sensor data last used for this estimate
	HoverThrust float32 `yaml:"hover_thrust"`// estimated hover thrust [0.1, 0.9]
	HoverThrustVar float32 `yaml:"hover_thrust_var"`// estimated hover thrust variance
	AccelInnov float32 `yaml:"accel_innov"`// innovation of the last acceleration fusion
	AccelInnovVar float32 `yaml:"accel_innov_var"`// innovation variance of the last acceleration fusion
	AccelInnovTestRatio float32 `yaml:"accel_innov_test_ratio"`// normalized innovation squared test ratio
	AccelNoiseVar float32 `yaml:"accel_noise_var"`// vertical acceleration noise variance estimated form innovation residual
	Valid bool `yaml:"valid"`
}

// NewHoverThrustEstimate creates a new HoverThrustEstimate with default values.
func NewHoverThrustEstimate() *HoverThrustEstimate {
	self := HoverThrustEstimate{}
	self.SetDefaults()
	return &self
}

func (t *HoverThrustEstimate) Clone() *HoverThrustEstimate {
	c := &HoverThrustEstimate{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.HoverThrust = t.HoverThrust
	c.HoverThrustVar = t.HoverThrustVar
	c.AccelInnov = t.AccelInnov
	c.AccelInnovVar = t.AccelInnovVar
	c.AccelInnovTestRatio = t.AccelInnovTestRatio
	c.AccelNoiseVar = t.AccelNoiseVar
	c.Valid = t.Valid
	return c
}

func (t *HoverThrustEstimate) CloneMsg() types.Message {
	return t.Clone()
}

func (t *HoverThrustEstimate) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.HoverThrust = 0
	t.HoverThrustVar = 0
	t.AccelInnov = 0
	t.AccelInnovVar = 0
	t.AccelInnovTestRatio = 0
	t.AccelNoiseVar = 0
	t.Valid = false
}

// CloneHoverThrustEstimateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneHoverThrustEstimateSlice(dst, src []HoverThrustEstimate) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var HoverThrustEstimateTypeSupport types.MessageTypeSupport = _HoverThrustEstimateTypeSupport{}

type _HoverThrustEstimateTypeSupport struct{}

func (t _HoverThrustEstimateTypeSupport) New() types.Message {
	return NewHoverThrustEstimate()
}

func (t _HoverThrustEstimateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__HoverThrustEstimate
	return (unsafe.Pointer)(C.px4_msgs__msg__HoverThrustEstimate__create())
}

func (t _HoverThrustEstimateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__HoverThrustEstimate__destroy((*C.px4_msgs__msg__HoverThrustEstimate)(pointer_to_free))
}

func (t _HoverThrustEstimateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*HoverThrustEstimate)
	mem := (*C.px4_msgs__msg__HoverThrustEstimate)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.hover_thrust = C.float(m.HoverThrust)
	mem.hover_thrust_var = C.float(m.HoverThrustVar)
	mem.accel_innov = C.float(m.AccelInnov)
	mem.accel_innov_var = C.float(m.AccelInnovVar)
	mem.accel_innov_test_ratio = C.float(m.AccelInnovTestRatio)
	mem.accel_noise_var = C.float(m.AccelNoiseVar)
	mem.valid = C.bool(m.Valid)
}

func (t _HoverThrustEstimateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*HoverThrustEstimate)
	mem := (*C.px4_msgs__msg__HoverThrustEstimate)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.HoverThrust = float32(mem.hover_thrust)
	m.HoverThrustVar = float32(mem.hover_thrust_var)
	m.AccelInnov = float32(mem.accel_innov)
	m.AccelInnovVar = float32(mem.accel_innov_var)
	m.AccelInnovTestRatio = float32(mem.accel_innov_test_ratio)
	m.AccelNoiseVar = float32(mem.accel_noise_var)
	m.Valid = bool(mem.valid)
}

func (t _HoverThrustEstimateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__HoverThrustEstimate())
}

type CHoverThrustEstimate = C.px4_msgs__msg__HoverThrustEstimate
type CHoverThrustEstimate__Sequence = C.px4_msgs__msg__HoverThrustEstimate__Sequence

func HoverThrustEstimate__Sequence_to_Go(goSlice *[]HoverThrustEstimate, cSlice CHoverThrustEstimate__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]HoverThrustEstimate, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__HoverThrustEstimate__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__HoverThrustEstimate * uintptr(i)),
		))
		HoverThrustEstimateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func HoverThrustEstimate__Sequence_to_C(cSlice *CHoverThrustEstimate__Sequence, goSlice []HoverThrustEstimate) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__HoverThrustEstimate)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__HoverThrustEstimate * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__HoverThrustEstimate)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__HoverThrustEstimate * uintptr(i)),
		))
		HoverThrustEstimateTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func HoverThrustEstimate__Array_to_Go(goSlice []HoverThrustEstimate, cSlice []CHoverThrustEstimate) {
	for i := 0; i < len(cSlice); i++ {
		HoverThrustEstimateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func HoverThrustEstimate__Array_to_C(cSlice []CHoverThrustEstimate, goSlice []HoverThrustEstimate) {
	for i := 0; i < len(goSlice); i++ {
		HoverThrustEstimateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
