/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/irlock_report.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/IrlockReport", IrlockReportTypeSupport)
}

// Do not create instances of this type directly. Always use NewIrlockReport
// function instead.
type IrlockReport struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Signature uint16 `yaml:"signature"`
	PosX float32 `yaml:"pos_x"`// tan(theta), where theta is the angle between the target and the camera center of projection in camera x-axis. When looking along the optical axis of the camera, x points right, y points down, and z points along the optical axis.
	PosY float32 `yaml:"pos_y"`// tan(theta), where theta is the angle between the target and the camera center of projection in camera y-axis. When looking along the optical axis of the camera, x points right, y points down, and z points along the optical axis.
	SizeX float32 `yaml:"size_x"`// /** size of target along camera x-axis in units of tan(theta) **/. When looking along the optical axis of the camera, x points right, y points down, and z points along the optical axis.
	SizeY float32 `yaml:"size_y"`// /** size of target along camera y-axis in units of tan(theta) **/. When looking along the optical axis of the camera, x points right, y points down, and z points along the optical axis.
}

// NewIrlockReport creates a new IrlockReport with default values.
func NewIrlockReport() *IrlockReport {
	self := IrlockReport{}
	self.SetDefaults()
	return &self
}

func (t *IrlockReport) Clone() *IrlockReport {
	c := &IrlockReport{}
	c.Timestamp = t.Timestamp
	c.Signature = t.Signature
	c.PosX = t.PosX
	c.PosY = t.PosY
	c.SizeX = t.SizeX
	c.SizeY = t.SizeY
	return c
}

func (t *IrlockReport) CloneMsg() types.Message {
	return t.Clone()
}

func (t *IrlockReport) SetDefaults() {
	t.Timestamp = 0
	t.Signature = 0
	t.PosX = 0
	t.PosY = 0
	t.SizeX = 0
	t.SizeY = 0
}

// CloneIrlockReportSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneIrlockReportSlice(dst, src []IrlockReport) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var IrlockReportTypeSupport types.MessageTypeSupport = _IrlockReportTypeSupport{}

type _IrlockReportTypeSupport struct{}

func (t _IrlockReportTypeSupport) New() types.Message {
	return NewIrlockReport()
}

func (t _IrlockReportTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__IrlockReport
	return (unsafe.Pointer)(C.px4_msgs__msg__IrlockReport__create())
}

func (t _IrlockReportTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__IrlockReport__destroy((*C.px4_msgs__msg__IrlockReport)(pointer_to_free))
}

func (t _IrlockReportTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*IrlockReport)
	mem := (*C.px4_msgs__msg__IrlockReport)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.signature = C.uint16_t(m.Signature)
	mem.pos_x = C.float(m.PosX)
	mem.pos_y = C.float(m.PosY)
	mem.size_x = C.float(m.SizeX)
	mem.size_y = C.float(m.SizeY)
}

func (t _IrlockReportTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*IrlockReport)
	mem := (*C.px4_msgs__msg__IrlockReport)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Signature = uint16(mem.signature)
	m.PosX = float32(mem.pos_x)
	m.PosY = float32(mem.pos_y)
	m.SizeX = float32(mem.size_x)
	m.SizeY = float32(mem.size_y)
}

func (t _IrlockReportTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__IrlockReport())
}

type CIrlockReport = C.px4_msgs__msg__IrlockReport
type CIrlockReport__Sequence = C.px4_msgs__msg__IrlockReport__Sequence

func IrlockReport__Sequence_to_Go(goSlice *[]IrlockReport, cSlice CIrlockReport__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]IrlockReport, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__IrlockReport__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__IrlockReport * uintptr(i)),
		))
		IrlockReportTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func IrlockReport__Sequence_to_C(cSlice *CIrlockReport__Sequence, goSlice []IrlockReport) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__IrlockReport)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__IrlockReport * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__IrlockReport)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__IrlockReport * uintptr(i)),
		))
		IrlockReportTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func IrlockReport__Array_to_Go(goSlice []IrlockReport, cSlice []CIrlockReport) {
	for i := 0; i < len(cSlice); i++ {
		IrlockReportTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func IrlockReport__Array_to_C(cSlice []CIrlockReport, goSlice []IrlockReport) {
	for i := 0; i < len(goSlice); i++ {
		IrlockReportTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
