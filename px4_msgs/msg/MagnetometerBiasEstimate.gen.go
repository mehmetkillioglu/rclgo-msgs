/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/magnetometer_bias_estimate.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/MagnetometerBiasEstimate", MagnetometerBiasEstimateTypeSupport)
}

// Do not create instances of this type directly. Always use NewMagnetometerBiasEstimate
// function instead.
type MagnetometerBiasEstimate struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	BiasX [4]float32 `yaml:"bias_x"`// estimated X-bias of all the sensors
	BiasY [4]float32 `yaml:"bias_y"`// estimated Y-bias of all the sensors
	BiasZ [4]float32 `yaml:"bias_z"`// estimated Z-bias of all the sensors
	Valid [4]bool `yaml:"valid"`// true if the estimator has converged
}

// NewMagnetometerBiasEstimate creates a new MagnetometerBiasEstimate with default values.
func NewMagnetometerBiasEstimate() *MagnetometerBiasEstimate {
	self := MagnetometerBiasEstimate{}
	self.SetDefaults()
	return &self
}

func (t *MagnetometerBiasEstimate) Clone() *MagnetometerBiasEstimate {
	c := &MagnetometerBiasEstimate{}
	c.Timestamp = t.Timestamp
	c.BiasX = t.BiasX
	c.BiasY = t.BiasY
	c.BiasZ = t.BiasZ
	c.Valid = t.Valid
	return c
}

func (t *MagnetometerBiasEstimate) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MagnetometerBiasEstimate) SetDefaults() {
	t.Timestamp = 0
	t.BiasX = [4]float32{}
	t.BiasY = [4]float32{}
	t.BiasZ = [4]float32{}
	t.Valid = [4]bool{}
}

// CloneMagnetometerBiasEstimateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMagnetometerBiasEstimateSlice(dst, src []MagnetometerBiasEstimate) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MagnetometerBiasEstimateTypeSupport types.MessageTypeSupport = _MagnetometerBiasEstimateTypeSupport{}

type _MagnetometerBiasEstimateTypeSupport struct{}

func (t _MagnetometerBiasEstimateTypeSupport) New() types.Message {
	return NewMagnetometerBiasEstimate()
}

func (t _MagnetometerBiasEstimateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__MagnetometerBiasEstimate
	return (unsafe.Pointer)(C.px4_msgs__msg__MagnetometerBiasEstimate__create())
}

func (t _MagnetometerBiasEstimateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__MagnetometerBiasEstimate__destroy((*C.px4_msgs__msg__MagnetometerBiasEstimate)(pointer_to_free))
}

func (t _MagnetometerBiasEstimateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MagnetometerBiasEstimate)
	mem := (*C.px4_msgs__msg__MagnetometerBiasEstimate)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_bias_x := mem.bias_x[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_bias_x)), m.BiasX[:])
	cSlice_bias_y := mem.bias_y[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_bias_y)), m.BiasY[:])
	cSlice_bias_z := mem.bias_z[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_bias_z)), m.BiasZ[:])
	cSlice_valid := mem.valid[:]
	primitives.Bool__Array_to_C(*(*[]primitives.CBool)(unsafe.Pointer(&cSlice_valid)), m.Valid[:])
}

func (t _MagnetometerBiasEstimateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MagnetometerBiasEstimate)
	mem := (*C.px4_msgs__msg__MagnetometerBiasEstimate)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_bias_x := mem.bias_x[:]
	primitives.Float32__Array_to_Go(m.BiasX[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_bias_x)))
	cSlice_bias_y := mem.bias_y[:]
	primitives.Float32__Array_to_Go(m.BiasY[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_bias_y)))
	cSlice_bias_z := mem.bias_z[:]
	primitives.Float32__Array_to_Go(m.BiasZ[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_bias_z)))
	cSlice_valid := mem.valid[:]
	primitives.Bool__Array_to_Go(m.Valid[:], *(*[]primitives.CBool)(unsafe.Pointer(&cSlice_valid)))
}

func (t _MagnetometerBiasEstimateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__MagnetometerBiasEstimate())
}

type CMagnetometerBiasEstimate = C.px4_msgs__msg__MagnetometerBiasEstimate
type CMagnetometerBiasEstimate__Sequence = C.px4_msgs__msg__MagnetometerBiasEstimate__Sequence

func MagnetometerBiasEstimate__Sequence_to_Go(goSlice *[]MagnetometerBiasEstimate, cSlice CMagnetometerBiasEstimate__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MagnetometerBiasEstimate, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__MagnetometerBiasEstimate__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__MagnetometerBiasEstimate * uintptr(i)),
		))
		MagnetometerBiasEstimateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func MagnetometerBiasEstimate__Sequence_to_C(cSlice *CMagnetometerBiasEstimate__Sequence, goSlice []MagnetometerBiasEstimate) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__MagnetometerBiasEstimate)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__MagnetometerBiasEstimate * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__MagnetometerBiasEstimate)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__MagnetometerBiasEstimate * uintptr(i)),
		))
		MagnetometerBiasEstimateTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func MagnetometerBiasEstimate__Array_to_Go(goSlice []MagnetometerBiasEstimate, cSlice []CMagnetometerBiasEstimate) {
	for i := 0; i < len(cSlice); i++ {
		MagnetometerBiasEstimateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MagnetometerBiasEstimate__Array_to_C(cSlice []CMagnetometerBiasEstimate, goSlice []MagnetometerBiasEstimate) {
	for i := 0; i < len(goSlice); i++ {
		MagnetometerBiasEstimateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
