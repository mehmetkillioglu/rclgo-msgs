/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/manual_control_setpoint.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/ManualControlSetpoint", ManualControlSetpointTypeSupport)
}
const (
	ManualControlSetpoint_SOURCE_RC uint8 = 1// radio control
	ManualControlSetpoint_SOURCE_MAVLINK_0 uint8 = 2// mavlink instance 0
	ManualControlSetpoint_SOURCE_MAVLINK_1 uint8 = 3// mavlink instance 1
	ManualControlSetpoint_SOURCE_MAVLINK_2 uint8 = 4// mavlink instance 2
	ManualControlSetpoint_SOURCE_MAVLINK_3 uint8 = 5// mavlink instance 4
)

// Do not create instances of this type directly. Always use NewManualControlSetpoint
// function instead.
type ManualControlSetpoint struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	TimestampSample uint64 `yaml:"timestamp_sample"`// the timestamp of the raw data (microseconds)
	DataSource uint8 `yaml:"data_source"`// where this input is coming from
	X float32 `yaml:"x"`// stick position in x direction -1..1
	Y float32 `yaml:"y"`// stick position in y direction -1..1
	Z float32 `yaml:"z"`// throttle stick position 0..1
	R float32 `yaml:"r"`// yaw stick/twist position, -1..1
	Flaps float32 `yaml:"flaps"`// flap position
	Aux1 float32 `yaml:"aux1"`// default function: camera yaw / azimuth
	Aux2 float32 `yaml:"aux2"`// default function: camera pitch / tilt
	Aux3 float32 `yaml:"aux3"`// default function: camera trigger
	Aux4 float32 `yaml:"aux4"`// default function: camera roll
	Aux5 float32 `yaml:"aux5"`// default function: payload drop
	Aux6 float32 `yaml:"aux6"`
}

// NewManualControlSetpoint creates a new ManualControlSetpoint with default values.
func NewManualControlSetpoint() *ManualControlSetpoint {
	self := ManualControlSetpoint{}
	self.SetDefaults()
	return &self
}

func (t *ManualControlSetpoint) Clone() *ManualControlSetpoint {
	c := &ManualControlSetpoint{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.DataSource = t.DataSource
	c.X = t.X
	c.Y = t.Y
	c.Z = t.Z
	c.R = t.R
	c.Flaps = t.Flaps
	c.Aux1 = t.Aux1
	c.Aux2 = t.Aux2
	c.Aux3 = t.Aux3
	c.Aux4 = t.Aux4
	c.Aux5 = t.Aux5
	c.Aux6 = t.Aux6
	return c
}

func (t *ManualControlSetpoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ManualControlSetpoint) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.DataSource = 0
	t.X = 0
	t.Y = 0
	t.Z = 0
	t.R = 0
	t.Flaps = 0
	t.Aux1 = 0
	t.Aux2 = 0
	t.Aux3 = 0
	t.Aux4 = 0
	t.Aux5 = 0
	t.Aux6 = 0
}

// CloneManualControlSetpointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneManualControlSetpointSlice(dst, src []ManualControlSetpoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ManualControlSetpointTypeSupport types.MessageTypeSupport = _ManualControlSetpointTypeSupport{}

type _ManualControlSetpointTypeSupport struct{}

func (t _ManualControlSetpointTypeSupport) New() types.Message {
	return NewManualControlSetpoint()
}

func (t _ManualControlSetpointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ManualControlSetpoint
	return (unsafe.Pointer)(C.px4_msgs__msg__ManualControlSetpoint__create())
}

func (t _ManualControlSetpointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ManualControlSetpoint__destroy((*C.px4_msgs__msg__ManualControlSetpoint)(pointer_to_free))
}

func (t _ManualControlSetpointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ManualControlSetpoint)
	mem := (*C.px4_msgs__msg__ManualControlSetpoint)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.data_source = C.uint8_t(m.DataSource)
	mem.x = C.float(m.X)
	mem.y = C.float(m.Y)
	mem.z = C.float(m.Z)
	mem.r = C.float(m.R)
	mem.flaps = C.float(m.Flaps)
	mem.aux1 = C.float(m.Aux1)
	mem.aux2 = C.float(m.Aux2)
	mem.aux3 = C.float(m.Aux3)
	mem.aux4 = C.float(m.Aux4)
	mem.aux5 = C.float(m.Aux5)
	mem.aux6 = C.float(m.Aux6)
}

func (t _ManualControlSetpointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ManualControlSetpoint)
	mem := (*C.px4_msgs__msg__ManualControlSetpoint)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.DataSource = uint8(mem.data_source)
	m.X = float32(mem.x)
	m.Y = float32(mem.y)
	m.Z = float32(mem.z)
	m.R = float32(mem.r)
	m.Flaps = float32(mem.flaps)
	m.Aux1 = float32(mem.aux1)
	m.Aux2 = float32(mem.aux2)
	m.Aux3 = float32(mem.aux3)
	m.Aux4 = float32(mem.aux4)
	m.Aux5 = float32(mem.aux5)
	m.Aux6 = float32(mem.aux6)
}

func (t _ManualControlSetpointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ManualControlSetpoint())
}

type CManualControlSetpoint = C.px4_msgs__msg__ManualControlSetpoint
type CManualControlSetpoint__Sequence = C.px4_msgs__msg__ManualControlSetpoint__Sequence

func ManualControlSetpoint__Sequence_to_Go(goSlice *[]ManualControlSetpoint, cSlice CManualControlSetpoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ManualControlSetpoint, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__ManualControlSetpoint__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__ManualControlSetpoint * uintptr(i)),
		))
		ManualControlSetpointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func ManualControlSetpoint__Sequence_to_C(cSlice *CManualControlSetpoint__Sequence, goSlice []ManualControlSetpoint) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ManualControlSetpoint)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__ManualControlSetpoint * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__ManualControlSetpoint)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__ManualControlSetpoint * uintptr(i)),
		))
		ManualControlSetpointTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func ManualControlSetpoint__Array_to_Go(goSlice []ManualControlSetpoint, cSlice []CManualControlSetpoint) {
	for i := 0; i < len(cSlice); i++ {
		ManualControlSetpointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ManualControlSetpoint__Array_to_C(cSlice []CManualControlSetpoint, goSlice []ManualControlSetpoint) {
	for i := 0; i < len(goSlice); i++ {
		ManualControlSetpointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
