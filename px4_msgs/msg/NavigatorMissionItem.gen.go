/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/navigator_mission_item.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/NavigatorMissionItem", NavigatorMissionItemTypeSupport)
}

// Do not create instances of this type directly. Always use NewNavigatorMissionItem
// function instead.
type NavigatorMissionItem struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	InstanceCount uint32 `yaml:"instance_count"`// Instance count of this mission. Increments monotonically whenever the mission is modified
	SequenceCurrent uint16 `yaml:"sequence_current"`// Sequence of the current mission item
	NavCmd uint16 `yaml:"nav_cmd"`
	Latitude float32 `yaml:"latitude"`
	Longitude float32 `yaml:"longitude"`
	TimeInside float32 `yaml:"time_inside"`// time that the MAV should stay inside the radius before advancing in seconds
	AcceptanceRadius float32 `yaml:"acceptance_radius"`// default radius in which the mission is accepted as reached in meters
	LoiterRadius float32 `yaml:"loiter_radius"`// loiter radius in meters, 0 for a VTOL to hover, negative for counter-clockwise
	Yaw float32 `yaml:"yaw"`// in radians NED -PI..+PI, NAN means don't change yaw
	Altitude float32 `yaml:"altitude"`// altitude in meters (AMSL)
	Frame uint8 `yaml:"frame"`// mission frame
	Origin uint8 `yaml:"origin"`// mission item origin (onboard or mavlink)
	LoiterExitXtrack bool `yaml:"loiter_exit_xtrack"`// exit xtrack location: 0 for center of loiter wp, 1 for exit location
	ForceHeading bool `yaml:"force_heading"`// heading needs to be reached
	AltitudeIsRelative bool `yaml:"altitude_is_relative"`// true if altitude is relative from start point
	Autocontinue bool `yaml:"autocontinue"`// true if next waypoint should follow after this one
	VtolBackTransition bool `yaml:"vtol_back_transition"`// part of the vtol back transition sequence
}

// NewNavigatorMissionItem creates a new NavigatorMissionItem with default values.
func NewNavigatorMissionItem() *NavigatorMissionItem {
	self := NavigatorMissionItem{}
	self.SetDefaults()
	return &self
}

func (t *NavigatorMissionItem) Clone() *NavigatorMissionItem {
	c := &NavigatorMissionItem{}
	c.Timestamp = t.Timestamp
	c.InstanceCount = t.InstanceCount
	c.SequenceCurrent = t.SequenceCurrent
	c.NavCmd = t.NavCmd
	c.Latitude = t.Latitude
	c.Longitude = t.Longitude
	c.TimeInside = t.TimeInside
	c.AcceptanceRadius = t.AcceptanceRadius
	c.LoiterRadius = t.LoiterRadius
	c.Yaw = t.Yaw
	c.Altitude = t.Altitude
	c.Frame = t.Frame
	c.Origin = t.Origin
	c.LoiterExitXtrack = t.LoiterExitXtrack
	c.ForceHeading = t.ForceHeading
	c.AltitudeIsRelative = t.AltitudeIsRelative
	c.Autocontinue = t.Autocontinue
	c.VtolBackTransition = t.VtolBackTransition
	return c
}

func (t *NavigatorMissionItem) CloneMsg() types.Message {
	return t.Clone()
}

func (t *NavigatorMissionItem) SetDefaults() {
	t.Timestamp = 0
	t.InstanceCount = 0
	t.SequenceCurrent = 0
	t.NavCmd = 0
	t.Latitude = 0
	t.Longitude = 0
	t.TimeInside = 0
	t.AcceptanceRadius = 0
	t.LoiterRadius = 0
	t.Yaw = 0
	t.Altitude = 0
	t.Frame = 0
	t.Origin = 0
	t.LoiterExitXtrack = false
	t.ForceHeading = false
	t.AltitudeIsRelative = false
	t.Autocontinue = false
	t.VtolBackTransition = false
}

// CloneNavigatorMissionItemSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneNavigatorMissionItemSlice(dst, src []NavigatorMissionItem) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var NavigatorMissionItemTypeSupport types.MessageTypeSupport = _NavigatorMissionItemTypeSupport{}

type _NavigatorMissionItemTypeSupport struct{}

func (t _NavigatorMissionItemTypeSupport) New() types.Message {
	return NewNavigatorMissionItem()
}

func (t _NavigatorMissionItemTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__NavigatorMissionItem
	return (unsafe.Pointer)(C.px4_msgs__msg__NavigatorMissionItem__create())
}

func (t _NavigatorMissionItemTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__NavigatorMissionItem__destroy((*C.px4_msgs__msg__NavigatorMissionItem)(pointer_to_free))
}

func (t _NavigatorMissionItemTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*NavigatorMissionItem)
	mem := (*C.px4_msgs__msg__NavigatorMissionItem)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.instance_count = C.uint32_t(m.InstanceCount)
	mem.sequence_current = C.uint16_t(m.SequenceCurrent)
	mem.nav_cmd = C.uint16_t(m.NavCmd)
	mem.latitude = C.float(m.Latitude)
	mem.longitude = C.float(m.Longitude)
	mem.time_inside = C.float(m.TimeInside)
	mem.acceptance_radius = C.float(m.AcceptanceRadius)
	mem.loiter_radius = C.float(m.LoiterRadius)
	mem.yaw = C.float(m.Yaw)
	mem.altitude = C.float(m.Altitude)
	mem.frame = C.uint8_t(m.Frame)
	mem.origin = C.uint8_t(m.Origin)
	mem.loiter_exit_xtrack = C.bool(m.LoiterExitXtrack)
	mem.force_heading = C.bool(m.ForceHeading)
	mem.altitude_is_relative = C.bool(m.AltitudeIsRelative)
	mem.autocontinue = C.bool(m.Autocontinue)
	mem.vtol_back_transition = C.bool(m.VtolBackTransition)
}

func (t _NavigatorMissionItemTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*NavigatorMissionItem)
	mem := (*C.px4_msgs__msg__NavigatorMissionItem)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.InstanceCount = uint32(mem.instance_count)
	m.SequenceCurrent = uint16(mem.sequence_current)
	m.NavCmd = uint16(mem.nav_cmd)
	m.Latitude = float32(mem.latitude)
	m.Longitude = float32(mem.longitude)
	m.TimeInside = float32(mem.time_inside)
	m.AcceptanceRadius = float32(mem.acceptance_radius)
	m.LoiterRadius = float32(mem.loiter_radius)
	m.Yaw = float32(mem.yaw)
	m.Altitude = float32(mem.altitude)
	m.Frame = uint8(mem.frame)
	m.Origin = uint8(mem.origin)
	m.LoiterExitXtrack = bool(mem.loiter_exit_xtrack)
	m.ForceHeading = bool(mem.force_heading)
	m.AltitudeIsRelative = bool(mem.altitude_is_relative)
	m.Autocontinue = bool(mem.autocontinue)
	m.VtolBackTransition = bool(mem.vtol_back_transition)
}

func (t _NavigatorMissionItemTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__NavigatorMissionItem())
}

type CNavigatorMissionItem = C.px4_msgs__msg__NavigatorMissionItem
type CNavigatorMissionItem__Sequence = C.px4_msgs__msg__NavigatorMissionItem__Sequence

func NavigatorMissionItem__Sequence_to_Go(goSlice *[]NavigatorMissionItem, cSlice CNavigatorMissionItem__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]NavigatorMissionItem, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__NavigatorMissionItem__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__NavigatorMissionItem * uintptr(i)),
		))
		NavigatorMissionItemTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func NavigatorMissionItem__Sequence_to_C(cSlice *CNavigatorMissionItem__Sequence, goSlice []NavigatorMissionItem) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__NavigatorMissionItem)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__NavigatorMissionItem * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__NavigatorMissionItem)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__NavigatorMissionItem * uintptr(i)),
		))
		NavigatorMissionItemTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func NavigatorMissionItem__Array_to_Go(goSlice []NavigatorMissionItem, cSlice []CNavigatorMissionItem) {
	for i := 0; i < len(cSlice); i++ {
		NavigatorMissionItemTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func NavigatorMissionItem__Array_to_C(cSlice []CNavigatorMissionItem, goSlice []NavigatorMissionItem) {
	for i := 0; i < len(goSlice); i++ {
		NavigatorMissionItemTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
