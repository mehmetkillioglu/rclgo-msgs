/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/orb_test_large.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/OrbTestLarge", OrbTestLargeTypeSupport)
}

// Do not create instances of this type directly. Always use NewOrbTestLarge
// function instead.
type OrbTestLarge struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Val int32 `yaml:"val"`
	Junk [512]uint8 `yaml:"junk"`
}

// NewOrbTestLarge creates a new OrbTestLarge with default values.
func NewOrbTestLarge() *OrbTestLarge {
	self := OrbTestLarge{}
	self.SetDefaults()
	return &self
}

func (t *OrbTestLarge) Clone() *OrbTestLarge {
	c := &OrbTestLarge{}
	c.Timestamp = t.Timestamp
	c.Val = t.Val
	c.Junk = t.Junk
	return c
}

func (t *OrbTestLarge) CloneMsg() types.Message {
	return t.Clone()
}

func (t *OrbTestLarge) SetDefaults() {
	t.Timestamp = 0
	t.Val = 0
	t.Junk = [512]uint8{}
}

// CloneOrbTestLargeSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneOrbTestLargeSlice(dst, src []OrbTestLarge) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var OrbTestLargeTypeSupport types.MessageTypeSupport = _OrbTestLargeTypeSupport{}

type _OrbTestLargeTypeSupport struct{}

func (t _OrbTestLargeTypeSupport) New() types.Message {
	return NewOrbTestLarge()
}

func (t _OrbTestLargeTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__OrbTestLarge
	return (unsafe.Pointer)(C.px4_msgs__msg__OrbTestLarge__create())
}

func (t _OrbTestLargeTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__OrbTestLarge__destroy((*C.px4_msgs__msg__OrbTestLarge)(pointer_to_free))
}

func (t _OrbTestLargeTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*OrbTestLarge)
	mem := (*C.px4_msgs__msg__OrbTestLarge)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.val = C.int32_t(m.Val)
	cSlice_junk := mem.junk[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_junk)), m.Junk[:])
}

func (t _OrbTestLargeTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*OrbTestLarge)
	mem := (*C.px4_msgs__msg__OrbTestLarge)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Val = int32(mem.val)
	cSlice_junk := mem.junk[:]
	primitives.Uint8__Array_to_Go(m.Junk[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_junk)))
}

func (t _OrbTestLargeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__OrbTestLarge())
}

type COrbTestLarge = C.px4_msgs__msg__OrbTestLarge
type COrbTestLarge__Sequence = C.px4_msgs__msg__OrbTestLarge__Sequence

func OrbTestLarge__Sequence_to_Go(goSlice *[]OrbTestLarge, cSlice COrbTestLarge__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]OrbTestLarge, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__OrbTestLarge__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__OrbTestLarge * uintptr(i)),
		))
		OrbTestLargeTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func OrbTestLarge__Sequence_to_C(cSlice *COrbTestLarge__Sequence, goSlice []OrbTestLarge) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__OrbTestLarge)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__OrbTestLarge * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__OrbTestLarge)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__OrbTestLarge * uintptr(i)),
		))
		OrbTestLargeTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func OrbTestLarge__Array_to_Go(goSlice []OrbTestLarge, cSlice []COrbTestLarge) {
	for i := 0; i < len(cSlice); i++ {
		OrbTestLargeTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func OrbTestLarge__Array_to_C(cSlice []COrbTestLarge, goSlice []OrbTestLarge) {
	for i := 0; i < len(goSlice); i++ {
		OrbTestLargeTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
