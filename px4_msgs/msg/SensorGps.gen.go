/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/sensor_gps.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/SensorGps", SensorGpsTypeSupport)
}

// Do not create instances of this type directly. Always use NewSensorGps
// function instead.
type SensorGps struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds). GPS position in WGS84 coordinates.the field 'timestamp' is for the position & velocity (microseconds)
	DeviceId uint32 `yaml:"device_id"`// unique device ID for the sensor that does not change between power cycles
	Lat int32 `yaml:"lat"`// Latitude in 1E-7 degrees
	Lon int32 `yaml:"lon"`// Longitude in 1E-7 degrees
	Alt int32 `yaml:"alt"`// Altitude in 1E-3 meters above MSL, (millimetres)
	AltEllipsoid int32 `yaml:"alt_ellipsoid"`// Altitude in 1E-3 meters bove Ellipsoid, (millimetres)
	SVarianceMS float32 `yaml:"s_variance_m_s"`// GPS speed accuracy estimate, (metres/sec)
	CVarianceRad float32 `yaml:"c_variance_rad"`// GPS course accuracy estimate, (radians)
	FixType uint8 `yaml:"fix_type"`// 0-1: no fix, 2: 2D fix, 3: 3D fix, 4: RTCM code differential, 5: Real-Time Kinematic, float, 6: Real-Time Kinematic, fixed, 8: Extrapolated. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.
	Eph float32 `yaml:"eph"`// GPS horizontal position accuracy (metres)
	Epv float32 `yaml:"epv"`// GPS vertical position accuracy (metres)
	Hdop float32 `yaml:"hdop"`// Horizontal dilution of precision
	Vdop float32 `yaml:"vdop"`// Vertical dilution of precision
	NoisePerMs int32 `yaml:"noise_per_ms"`// GPS noise per millisecond
	AutomaticGainControl uint16 `yaml:"automatic_gain_control"`// Automatic gain control monitor
	JammingIndicator int32 `yaml:"jamming_indicator"`// indicates jamming is occurring
	JammingState uint8 `yaml:"jamming_state"`// indicates whether jamming has been detected or suspected by the receivers. O: Unknown, 1: OK, 2: Warning, 3: Critical
	VelMS float32 `yaml:"vel_m_s"`// GPS ground speed, (metres/sec)
	VelNMS float32 `yaml:"vel_n_m_s"`// GPS North velocity, (metres/sec)
	VelEMS float32 `yaml:"vel_e_m_s"`// GPS East velocity, (metres/sec)
	VelDMS float32 `yaml:"vel_d_m_s"`// GPS Down velocity, (metres/sec)
	CogRad float32 `yaml:"cog_rad"`// Course over ground (NOT heading, but direction of movement), -PI..PI, (radians)
	VelNedValid bool `yaml:"vel_ned_valid"`// True if NED velocity is valid
	TimestampTimeRelative int32 `yaml:"timestamp_time_relative"`// timestamp + timestamp_time_relative = Time of the UTC timestamp since system start, (microseconds)
	TimeUtcUsec uint64 `yaml:"time_utc_usec"`// Timestamp (microseconds, UTC), this is the timestamp which comes from the gps module. It might be unavailable right after cold start, indicated by a value of 0
	SatellitesUsed uint8 `yaml:"satellites_used"`// Number of satellites used
	Heading float32 `yaml:"heading"`// heading angle of XYZ body frame rel to NED. Set to NaN if not available and updated (used for dual antenna GPS), (rad, [-PI, PI])
	HeadingOffset float32 `yaml:"heading_offset"`// heading offset of dual antenna array in body frame. Set to NaN if not applicable. (rad, [-PI, PI])
}

// NewSensorGps creates a new SensorGps with default values.
func NewSensorGps() *SensorGps {
	self := SensorGps{}
	self.SetDefaults()
	return &self
}

func (t *SensorGps) Clone() *SensorGps {
	c := &SensorGps{}
	c.Timestamp = t.Timestamp
	c.DeviceId = t.DeviceId
	c.Lat = t.Lat
	c.Lon = t.Lon
	c.Alt = t.Alt
	c.AltEllipsoid = t.AltEllipsoid
	c.SVarianceMS = t.SVarianceMS
	c.CVarianceRad = t.CVarianceRad
	c.FixType = t.FixType
	c.Eph = t.Eph
	c.Epv = t.Epv
	c.Hdop = t.Hdop
	c.Vdop = t.Vdop
	c.NoisePerMs = t.NoisePerMs
	c.AutomaticGainControl = t.AutomaticGainControl
	c.JammingIndicator = t.JammingIndicator
	c.JammingState = t.JammingState
	c.VelMS = t.VelMS
	c.VelNMS = t.VelNMS
	c.VelEMS = t.VelEMS
	c.VelDMS = t.VelDMS
	c.CogRad = t.CogRad
	c.VelNedValid = t.VelNedValid
	c.TimestampTimeRelative = t.TimestampTimeRelative
	c.TimeUtcUsec = t.TimeUtcUsec
	c.SatellitesUsed = t.SatellitesUsed
	c.Heading = t.Heading
	c.HeadingOffset = t.HeadingOffset
	return c
}

func (t *SensorGps) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SensorGps) SetDefaults() {
	t.Timestamp = 0
	t.DeviceId = 0
	t.Lat = 0
	t.Lon = 0
	t.Alt = 0
	t.AltEllipsoid = 0
	t.SVarianceMS = 0
	t.CVarianceRad = 0
	t.FixType = 0
	t.Eph = 0
	t.Epv = 0
	t.Hdop = 0
	t.Vdop = 0
	t.NoisePerMs = 0
	t.AutomaticGainControl = 0
	t.JammingIndicator = 0
	t.JammingState = 0
	t.VelMS = 0
	t.VelNMS = 0
	t.VelEMS = 0
	t.VelDMS = 0
	t.CogRad = 0
	t.VelNedValid = false
	t.TimestampTimeRelative = 0
	t.TimeUtcUsec = 0
	t.SatellitesUsed = 0
	t.Heading = 0
	t.HeadingOffset = 0
}

// CloneSensorGpsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSensorGpsSlice(dst, src []SensorGps) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SensorGpsTypeSupport types.MessageTypeSupport = _SensorGpsTypeSupport{}

type _SensorGpsTypeSupport struct{}

func (t _SensorGpsTypeSupport) New() types.Message {
	return NewSensorGps()
}

func (t _SensorGpsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SensorGps
	return (unsafe.Pointer)(C.px4_msgs__msg__SensorGps__create())
}

func (t _SensorGpsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SensorGps__destroy((*C.px4_msgs__msg__SensorGps)(pointer_to_free))
}

func (t _SensorGpsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SensorGps)
	mem := (*C.px4_msgs__msg__SensorGps)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.device_id = C.uint32_t(m.DeviceId)
	mem.lat = C.int32_t(m.Lat)
	mem.lon = C.int32_t(m.Lon)
	mem.alt = C.int32_t(m.Alt)
	mem.alt_ellipsoid = C.int32_t(m.AltEllipsoid)
	mem.s_variance_m_s = C.float(m.SVarianceMS)
	mem.c_variance_rad = C.float(m.CVarianceRad)
	mem.fix_type = C.uint8_t(m.FixType)
	mem.eph = C.float(m.Eph)
	mem.epv = C.float(m.Epv)
	mem.hdop = C.float(m.Hdop)
	mem.vdop = C.float(m.Vdop)
	mem.noise_per_ms = C.int32_t(m.NoisePerMs)
	mem.automatic_gain_control = C.uint16_t(m.AutomaticGainControl)
	mem.jamming_indicator = C.int32_t(m.JammingIndicator)
	mem.jamming_state = C.uint8_t(m.JammingState)
	mem.vel_m_s = C.float(m.VelMS)
	mem.vel_n_m_s = C.float(m.VelNMS)
	mem.vel_e_m_s = C.float(m.VelEMS)
	mem.vel_d_m_s = C.float(m.VelDMS)
	mem.cog_rad = C.float(m.CogRad)
	mem.vel_ned_valid = C.bool(m.VelNedValid)
	mem.timestamp_time_relative = C.int32_t(m.TimestampTimeRelative)
	mem.time_utc_usec = C.uint64_t(m.TimeUtcUsec)
	mem.satellites_used = C.uint8_t(m.SatellitesUsed)
	mem.heading = C.float(m.Heading)
	mem.heading_offset = C.float(m.HeadingOffset)
}

func (t _SensorGpsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SensorGps)
	mem := (*C.px4_msgs__msg__SensorGps)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.DeviceId = uint32(mem.device_id)
	m.Lat = int32(mem.lat)
	m.Lon = int32(mem.lon)
	m.Alt = int32(mem.alt)
	m.AltEllipsoid = int32(mem.alt_ellipsoid)
	m.SVarianceMS = float32(mem.s_variance_m_s)
	m.CVarianceRad = float32(mem.c_variance_rad)
	m.FixType = uint8(mem.fix_type)
	m.Eph = float32(mem.eph)
	m.Epv = float32(mem.epv)
	m.Hdop = float32(mem.hdop)
	m.Vdop = float32(mem.vdop)
	m.NoisePerMs = int32(mem.noise_per_ms)
	m.AutomaticGainControl = uint16(mem.automatic_gain_control)
	m.JammingIndicator = int32(mem.jamming_indicator)
	m.JammingState = uint8(mem.jamming_state)
	m.VelMS = float32(mem.vel_m_s)
	m.VelNMS = float32(mem.vel_n_m_s)
	m.VelEMS = float32(mem.vel_e_m_s)
	m.VelDMS = float32(mem.vel_d_m_s)
	m.CogRad = float32(mem.cog_rad)
	m.VelNedValid = bool(mem.vel_ned_valid)
	m.TimestampTimeRelative = int32(mem.timestamp_time_relative)
	m.TimeUtcUsec = uint64(mem.time_utc_usec)
	m.SatellitesUsed = uint8(mem.satellites_used)
	m.Heading = float32(mem.heading)
	m.HeadingOffset = float32(mem.heading_offset)
}

func (t _SensorGpsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SensorGps())
}

type CSensorGps = C.px4_msgs__msg__SensorGps
type CSensorGps__Sequence = C.px4_msgs__msg__SensorGps__Sequence

func SensorGps__Sequence_to_Go(goSlice *[]SensorGps, cSlice CSensorGps__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorGps, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__SensorGps__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__SensorGps * uintptr(i)),
		))
		SensorGpsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func SensorGps__Sequence_to_C(cSlice *CSensorGps__Sequence, goSlice []SensorGps) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SensorGps)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__SensorGps * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__SensorGps)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__SensorGps * uintptr(i)),
		))
		SensorGpsTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func SensorGps__Array_to_Go(goSlice []SensorGps, cSlice []CSensorGps) {
	for i := 0; i < len(cSlice); i++ {
		SensorGpsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SensorGps__Array_to_C(cSlice []CSensorGps, goSlice []SensorGps) {
	for i := 0; i < len(goSlice); i++ {
		SensorGpsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
