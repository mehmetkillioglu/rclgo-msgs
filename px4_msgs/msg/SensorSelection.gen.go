/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/sensor_selection.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/SensorSelection", SensorSelectionTypeSupport)
}

// Do not create instances of this type directly. Always use NewSensorSelection
// function instead.
type SensorSelection struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds). Sensor ID's for the voted sensors output on the sensor_combined topic.Will be updated on startup of the sensor module and when sensor selection changes
	AccelDeviceId uint32 `yaml:"accel_device_id"`// unique device ID for the selected accelerometers. Sensor ID's for the voted sensors output on the sensor_combined topic.Will be updated on startup of the sensor module and when sensor selection changes
	GyroDeviceId uint32 `yaml:"gyro_device_id"`// unique device ID for the selected rate gyros. Sensor ID's for the voted sensors output on the sensor_combined topic.Will be updated on startup of the sensor module and when sensor selection changes
}

// NewSensorSelection creates a new SensorSelection with default values.
func NewSensorSelection() *SensorSelection {
	self := SensorSelection{}
	self.SetDefaults()
	return &self
}

func (t *SensorSelection) Clone() *SensorSelection {
	c := &SensorSelection{}
	c.Timestamp = t.Timestamp
	c.AccelDeviceId = t.AccelDeviceId
	c.GyroDeviceId = t.GyroDeviceId
	return c
}

func (t *SensorSelection) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SensorSelection) SetDefaults() {
	t.Timestamp = 0
	t.AccelDeviceId = 0
	t.GyroDeviceId = 0
}

// CloneSensorSelectionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSensorSelectionSlice(dst, src []SensorSelection) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SensorSelectionTypeSupport types.MessageTypeSupport = _SensorSelectionTypeSupport{}

type _SensorSelectionTypeSupport struct{}

func (t _SensorSelectionTypeSupport) New() types.Message {
	return NewSensorSelection()
}

func (t _SensorSelectionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SensorSelection
	return (unsafe.Pointer)(C.px4_msgs__msg__SensorSelection__create())
}

func (t _SensorSelectionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SensorSelection__destroy((*C.px4_msgs__msg__SensorSelection)(pointer_to_free))
}

func (t _SensorSelectionTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SensorSelection)
	mem := (*C.px4_msgs__msg__SensorSelection)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.accel_device_id = C.uint32_t(m.AccelDeviceId)
	mem.gyro_device_id = C.uint32_t(m.GyroDeviceId)
}

func (t _SensorSelectionTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SensorSelection)
	mem := (*C.px4_msgs__msg__SensorSelection)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.AccelDeviceId = uint32(mem.accel_device_id)
	m.GyroDeviceId = uint32(mem.gyro_device_id)
}

func (t _SensorSelectionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SensorSelection())
}

type CSensorSelection = C.px4_msgs__msg__SensorSelection
type CSensorSelection__Sequence = C.px4_msgs__msg__SensorSelection__Sequence

func SensorSelection__Sequence_to_Go(goSlice *[]SensorSelection, cSlice CSensorSelection__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorSelection, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__SensorSelection__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__SensorSelection * uintptr(i)),
		))
		SensorSelectionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func SensorSelection__Sequence_to_C(cSlice *CSensorSelection__Sequence, goSlice []SensorSelection) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SensorSelection)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__SensorSelection * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__SensorSelection)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__SensorSelection * uintptr(i)),
		))
		SensorSelectionTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func SensorSelection__Array_to_Go(goSlice []SensorSelection, cSlice []CSensorSelection) {
	for i := 0; i < len(cSlice); i++ {
		SensorSelectionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SensorSelection__Array_to_C(cSlice []CSensorSelection, goSlice []SensorSelection) {
	for i := 0; i < len(goSlice); i++ {
		SensorSelectionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
