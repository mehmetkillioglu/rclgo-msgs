/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/takeoff_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/TakeoffStatus", TakeoffStatusTypeSupport)
}
const (
	TakeoffStatus_TAKEOFF_STATE_UNINITIALIZED uint8 = 0
	TakeoffStatus_TAKEOFF_STATE_DISARMED uint8 = 1
	TakeoffStatus_TAKEOFF_STATE_SPOOLUP uint8 = 2
	TakeoffStatus_TAKEOFF_STATE_READY_FOR_TAKEOFF uint8 = 3
	TakeoffStatus_TAKEOFF_STATE_RAMPUP uint8 = 4
	TakeoffStatus_TAKEOFF_STATE_FLIGHT uint8 = 5
)

// Do not create instances of this type directly. Always use NewTakeoffStatus
// function instead.
type TakeoffStatus struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	TakeoffState uint8 `yaml:"takeoff_state"`
	TiltLimit float32 `yaml:"tilt_limit"`// limited tilt feasability during takeoff, contains maximum tilt otherwise
}

// NewTakeoffStatus creates a new TakeoffStatus with default values.
func NewTakeoffStatus() *TakeoffStatus {
	self := TakeoffStatus{}
	self.SetDefaults()
	return &self
}

func (t *TakeoffStatus) Clone() *TakeoffStatus {
	c := &TakeoffStatus{}
	c.Timestamp = t.Timestamp
	c.TakeoffState = t.TakeoffState
	c.TiltLimit = t.TiltLimit
	return c
}

func (t *TakeoffStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TakeoffStatus) SetDefaults() {
	t.Timestamp = 0
	t.TakeoffState = 0
	t.TiltLimit = 0
}

// CloneTakeoffStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTakeoffStatusSlice(dst, src []TakeoffStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TakeoffStatusTypeSupport types.MessageTypeSupport = _TakeoffStatusTypeSupport{}

type _TakeoffStatusTypeSupport struct{}

func (t _TakeoffStatusTypeSupport) New() types.Message {
	return NewTakeoffStatus()
}

func (t _TakeoffStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TakeoffStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__TakeoffStatus__create())
}

func (t _TakeoffStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TakeoffStatus__destroy((*C.px4_msgs__msg__TakeoffStatus)(pointer_to_free))
}

func (t _TakeoffStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TakeoffStatus)
	mem := (*C.px4_msgs__msg__TakeoffStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.takeoff_state = C.uint8_t(m.TakeoffState)
	mem.tilt_limit = C.float(m.TiltLimit)
}

func (t _TakeoffStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TakeoffStatus)
	mem := (*C.px4_msgs__msg__TakeoffStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TakeoffState = uint8(mem.takeoff_state)
	m.TiltLimit = float32(mem.tilt_limit)
}

func (t _TakeoffStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TakeoffStatus())
}

type CTakeoffStatus = C.px4_msgs__msg__TakeoffStatus
type CTakeoffStatus__Sequence = C.px4_msgs__msg__TakeoffStatus__Sequence

func TakeoffStatus__Sequence_to_Go(goSlice *[]TakeoffStatus, cSlice CTakeoffStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TakeoffStatus, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__TakeoffStatus__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__TakeoffStatus * uintptr(i)),
		))
		TakeoffStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func TakeoffStatus__Sequence_to_C(cSlice *CTakeoffStatus__Sequence, goSlice []TakeoffStatus) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TakeoffStatus)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__TakeoffStatus * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__TakeoffStatus)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__TakeoffStatus * uintptr(i)),
		))
		TakeoffStatusTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func TakeoffStatus__Array_to_Go(goSlice []TakeoffStatus, cSlice []CTakeoffStatus) {
	for i := 0; i < len(cSlice); i++ {
		TakeoffStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TakeoffStatus__Array_to_C(cSlice []CTakeoffStatus, goSlice []TakeoffStatus) {
	for i := 0; i < len(goSlice); i++ {
		TakeoffStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
