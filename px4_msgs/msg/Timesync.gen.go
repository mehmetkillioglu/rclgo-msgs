/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/timesync.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/Timesync", TimesyncTypeSupport)
}

// Do not create instances of this type directly. Always use NewTimesync
// function instead.
type Timesync struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	SysId uint8 `yaml:"sys_id"`// id of the origin system
	Seq uint8 `yaml:"seq"`// timesync msg sequence
	Tc1 int64 `yaml:"tc1"`// time sync timestamp 1
	Ts1 int64 `yaml:"ts1"`// time sync timestamp 2
}

// NewTimesync creates a new Timesync with default values.
func NewTimesync() *Timesync {
	self := Timesync{}
	self.SetDefaults()
	return &self
}

func (t *Timesync) Clone() *Timesync {
	c := &Timesync{}
	c.Timestamp = t.Timestamp
	c.SysId = t.SysId
	c.Seq = t.Seq
	c.Tc1 = t.Tc1
	c.Ts1 = t.Ts1
	return c
}

func (t *Timesync) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Timesync) SetDefaults() {
	t.Timestamp = 0
	t.SysId = 0
	t.Seq = 0
	t.Tc1 = 0
	t.Ts1 = 0
}

// CloneTimesyncSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTimesyncSlice(dst, src []Timesync) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TimesyncTypeSupport types.MessageTypeSupport = _TimesyncTypeSupport{}

type _TimesyncTypeSupport struct{}

func (t _TimesyncTypeSupport) New() types.Message {
	return NewTimesync()
}

func (t _TimesyncTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__Timesync
	return (unsafe.Pointer)(C.px4_msgs__msg__Timesync__create())
}

func (t _TimesyncTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__Timesync__destroy((*C.px4_msgs__msg__Timesync)(pointer_to_free))
}

func (t _TimesyncTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Timesync)
	mem := (*C.px4_msgs__msg__Timesync)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.sys_id = C.uint8_t(m.SysId)
	mem.seq = C.uint8_t(m.Seq)
	mem.tc1 = C.int64_t(m.Tc1)
	mem.ts1 = C.int64_t(m.Ts1)
}

func (t _TimesyncTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Timesync)
	mem := (*C.px4_msgs__msg__Timesync)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.SysId = uint8(mem.sys_id)
	m.Seq = uint8(mem.seq)
	m.Tc1 = int64(mem.tc1)
	m.Ts1 = int64(mem.ts1)
}

func (t _TimesyncTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__Timesync())
}

type CTimesync = C.px4_msgs__msg__Timesync
type CTimesync__Sequence = C.px4_msgs__msg__Timesync__Sequence

func Timesync__Sequence_to_Go(goSlice *[]Timesync, cSlice CTimesync__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Timesync, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__Timesync__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__Timesync * uintptr(i)),
		))
		TimesyncTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func Timesync__Sequence_to_C(cSlice *CTimesync__Sequence, goSlice []Timesync) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__Timesync)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__Timesync * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__Timesync)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__Timesync * uintptr(i)),
		))
		TimesyncTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func Timesync__Array_to_Go(goSlice []Timesync, cSlice []CTimesync) {
	for i := 0; i < len(cSlice); i++ {
		TimesyncTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Timesync__Array_to_C(cSlice []CTimesync, goSlice []Timesync) {
	for i := 0; i < len(goSlice); i++ {
		TimesyncTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
