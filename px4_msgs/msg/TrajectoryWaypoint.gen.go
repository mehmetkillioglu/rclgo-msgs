/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/trajectory_waypoint.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/TrajectoryWaypoint", TrajectoryWaypointTypeSupport)
}

// Do not create instances of this type directly. Always use NewTrajectoryWaypoint
// function instead.
type TrajectoryWaypoint struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Position [3]float32 `yaml:"position"`
	Velocity [3]float32 `yaml:"velocity"`
	Acceleration [3]float32 `yaml:"acceleration"`
	Yaw float32 `yaml:"yaw"`
	YawSpeed float32 `yaml:"yaw_speed"`
	PointValid bool `yaml:"point_valid"`
	Type uint8 `yaml:"type"`
}

// NewTrajectoryWaypoint creates a new TrajectoryWaypoint with default values.
func NewTrajectoryWaypoint() *TrajectoryWaypoint {
	self := TrajectoryWaypoint{}
	self.SetDefaults()
	return &self
}

func (t *TrajectoryWaypoint) Clone() *TrajectoryWaypoint {
	c := &TrajectoryWaypoint{}
	c.Timestamp = t.Timestamp
	c.Position = t.Position
	c.Velocity = t.Velocity
	c.Acceleration = t.Acceleration
	c.Yaw = t.Yaw
	c.YawSpeed = t.YawSpeed
	c.PointValid = t.PointValid
	c.Type = t.Type
	return c
}

func (t *TrajectoryWaypoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TrajectoryWaypoint) SetDefaults() {
	t.Timestamp = 0
	t.Position = [3]float32{}
	t.Velocity = [3]float32{}
	t.Acceleration = [3]float32{}
	t.Yaw = 0
	t.YawSpeed = 0
	t.PointValid = false
	t.Type = 0
}

// CloneTrajectoryWaypointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTrajectoryWaypointSlice(dst, src []TrajectoryWaypoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TrajectoryWaypointTypeSupport types.MessageTypeSupport = _TrajectoryWaypointTypeSupport{}

type _TrajectoryWaypointTypeSupport struct{}

func (t _TrajectoryWaypointTypeSupport) New() types.Message {
	return NewTrajectoryWaypoint()
}

func (t _TrajectoryWaypointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TrajectoryWaypoint
	return (unsafe.Pointer)(C.px4_msgs__msg__TrajectoryWaypoint__create())
}

func (t _TrajectoryWaypointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TrajectoryWaypoint__destroy((*C.px4_msgs__msg__TrajectoryWaypoint)(pointer_to_free))
}

func (t _TrajectoryWaypointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TrajectoryWaypoint)
	mem := (*C.px4_msgs__msg__TrajectoryWaypoint)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_position := mem.position[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_position)), m.Position[:])
	cSlice_velocity := mem.velocity[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_velocity)), m.Velocity[:])
	cSlice_acceleration := mem.acceleration[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_acceleration)), m.Acceleration[:])
	mem.yaw = C.float(m.Yaw)
	mem.yaw_speed = C.float(m.YawSpeed)
	mem.point_valid = C.bool(m.PointValid)
	mem._type = C.uint8_t(m.Type)
}

func (t _TrajectoryWaypointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TrajectoryWaypoint)
	mem := (*C.px4_msgs__msg__TrajectoryWaypoint)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_position := mem.position[:]
	primitives.Float32__Array_to_Go(m.Position[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_position)))
	cSlice_velocity := mem.velocity[:]
	primitives.Float32__Array_to_Go(m.Velocity[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_velocity)))
	cSlice_acceleration := mem.acceleration[:]
	primitives.Float32__Array_to_Go(m.Acceleration[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_acceleration)))
	m.Yaw = float32(mem.yaw)
	m.YawSpeed = float32(mem.yaw_speed)
	m.PointValid = bool(mem.point_valid)
	m.Type = uint8(mem._type)
}

func (t _TrajectoryWaypointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TrajectoryWaypoint())
}

type CTrajectoryWaypoint = C.px4_msgs__msg__TrajectoryWaypoint
type CTrajectoryWaypoint__Sequence = C.px4_msgs__msg__TrajectoryWaypoint__Sequence

func TrajectoryWaypoint__Sequence_to_Go(goSlice *[]TrajectoryWaypoint, cSlice CTrajectoryWaypoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TrajectoryWaypoint, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__TrajectoryWaypoint__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__TrajectoryWaypoint * uintptr(i)),
		))
		TrajectoryWaypointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func TrajectoryWaypoint__Sequence_to_C(cSlice *CTrajectoryWaypoint__Sequence, goSlice []TrajectoryWaypoint) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TrajectoryWaypoint)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__TrajectoryWaypoint * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__TrajectoryWaypoint)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__TrajectoryWaypoint * uintptr(i)),
		))
		TrajectoryWaypointTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func TrajectoryWaypoint__Array_to_Go(goSlice []TrajectoryWaypoint, cSlice []CTrajectoryWaypoint) {
	for i := 0; i < len(cSlice); i++ {
		TrajectoryWaypointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TrajectoryWaypoint__Array_to_C(cSlice []CTrajectoryWaypoint, goSlice []TrajectoryWaypoint) {
	for i := 0; i < len(goSlice); i++ {
		TrajectoryWaypointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
