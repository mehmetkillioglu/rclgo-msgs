/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/transponder_report.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/TransponderReport", TransponderReportTypeSupport)
}
const (
	TransponderReport_PX4_ADSB_FLAGS_VALID_COORDS uint16 = 1// ADSB flags
	TransponderReport_PX4_ADSB_FLAGS_VALID_ALTITUDE uint16 = 2// ADSB flags
	TransponderReport_PX4_ADSB_FLAGS_VALID_HEADING uint16 = 4// ADSB flags
	TransponderReport_PX4_ADSB_FLAGS_VALID_VELOCITY uint16 = 8// ADSB flags
	TransponderReport_PX4_ADSB_FLAGS_VALID_CALLSIGN uint16 = 16// ADSB flags
	TransponderReport_PX4_ADSB_FLAGS_VALID_SQUAWK uint16 = 32// ADSB flags
	TransponderReport_PX4_ADSB_FLAGS_RETRANSLATE uint16 = 256// ADSB flags
	TransponderReport_ADSB_EMITTER_TYPE_NO_INFO uint16 = 0// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_LIGHT uint16 = 1// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_SMALL uint16 = 2// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_LARGE uint16 = 3// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE uint16 = 4// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_HEAVY uint16 = 5// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_HIGHLY_MANUV uint16 = 6// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_ROTOCRAFT uint16 = 7// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_UNASSIGNED uint16 = 8// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_GLIDER uint16 = 9// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_LIGHTER_AIR uint16 = 10// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_PARACHUTE uint16 = 11// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_ULTRA_LIGHT uint16 = 12// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_UNASSIGNED2 uint16 = 13// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_UAV uint16 = 14// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_SPACE uint16 = 15// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_UNASSGINED3 uint16 = 16// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_EMERGENCY_SURFACE uint16 = 17// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_SERVICE_SURFACE uint16 = 18// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_POINT_OBSTACLE uint16 = 19// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ADSB_EMITTER_TYPE_ENUM_END uint16 = 20// ADSB Emitter Data:from mavlink/v2.0/common/common.h
	TransponderReport_ORB_QUEUE_LENGTH uint8 = 8
)

// Do not create instances of this type directly. Always use NewTransponderReport
// function instead.
type TransponderReport struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	IcaoAddress uint32 `yaml:"icao_address"`// ICAO address
	Lat float64 `yaml:"lat"`// Latitude, expressed as degrees
	Lon float64 `yaml:"lon"`// Longitude, expressed as degrees
	AltitudeType uint8 `yaml:"altitude_type"`// Type from ADSB_ALTITUDE_TYPE enum
	Altitude float32 `yaml:"altitude"`// Altitude(ASL) in meters
	Heading float32 `yaml:"heading"`// Course over ground in radians, -pi to +pi, 0 is north
	HorVelocity float32 `yaml:"hor_velocity"`// The horizontal velocity in m/s
	VerVelocity float32 `yaml:"ver_velocity"`// The vertical velocity in m/s, positive is up
	Callsign [9]byte `yaml:"callsign"`// The callsign, 8+null
	EmitterType uint8 `yaml:"emitter_type"`// Type from ADSB_EMITTER_TYPE enum
	Tslc uint8 `yaml:"tslc"`// Time since last communication in seconds
	Flags uint16 `yaml:"flags"`// Flags to indicate various statuses including valid data fields
	Squawk uint16 `yaml:"squawk"`// Squawk code
	UasId [18]uint8 `yaml:"uas_id"`// Unique UAS ID
}

// NewTransponderReport creates a new TransponderReport with default values.
func NewTransponderReport() *TransponderReport {
	self := TransponderReport{}
	self.SetDefaults()
	return &self
}

func (t *TransponderReport) Clone() *TransponderReport {
	c := &TransponderReport{}
	c.Timestamp = t.Timestamp
	c.IcaoAddress = t.IcaoAddress
	c.Lat = t.Lat
	c.Lon = t.Lon
	c.AltitudeType = t.AltitudeType
	c.Altitude = t.Altitude
	c.Heading = t.Heading
	c.HorVelocity = t.HorVelocity
	c.VerVelocity = t.VerVelocity
	c.Callsign = t.Callsign
	c.EmitterType = t.EmitterType
	c.Tslc = t.Tslc
	c.Flags = t.Flags
	c.Squawk = t.Squawk
	c.UasId = t.UasId
	return c
}

func (t *TransponderReport) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TransponderReport) SetDefaults() {
	t.Timestamp = 0
	t.IcaoAddress = 0
	t.Lat = 0
	t.Lon = 0
	t.AltitudeType = 0
	t.Altitude = 0
	t.Heading = 0
	t.HorVelocity = 0
	t.VerVelocity = 0
	t.Callsign = [9]byte{}
	t.EmitterType = 0
	t.Tslc = 0
	t.Flags = 0
	t.Squawk = 0
	t.UasId = [18]uint8{}
}

// CloneTransponderReportSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTransponderReportSlice(dst, src []TransponderReport) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TransponderReportTypeSupport types.MessageTypeSupport = _TransponderReportTypeSupport{}

type _TransponderReportTypeSupport struct{}

func (t _TransponderReportTypeSupport) New() types.Message {
	return NewTransponderReport()
}

func (t _TransponderReportTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TransponderReport
	return (unsafe.Pointer)(C.px4_msgs__msg__TransponderReport__create())
}

func (t _TransponderReportTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TransponderReport__destroy((*C.px4_msgs__msg__TransponderReport)(pointer_to_free))
}

func (t _TransponderReportTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TransponderReport)
	mem := (*C.px4_msgs__msg__TransponderReport)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.icao_address = C.uint32_t(m.IcaoAddress)
	mem.lat = C.double(m.Lat)
	mem.lon = C.double(m.Lon)
	mem.altitude_type = C.uint8_t(m.AltitudeType)
	mem.altitude = C.float(m.Altitude)
	mem.heading = C.float(m.Heading)
	mem.hor_velocity = C.float(m.HorVelocity)
	mem.ver_velocity = C.float(m.VerVelocity)
	cSlice_callsign := mem.callsign[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_callsign)), m.Callsign[:])
	mem.emitter_type = C.uint8_t(m.EmitterType)
	mem.tslc = C.uint8_t(m.Tslc)
	mem.flags = C.uint16_t(m.Flags)
	mem.squawk = C.uint16_t(m.Squawk)
	cSlice_uas_id := mem.uas_id[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_uas_id)), m.UasId[:])
}

func (t _TransponderReportTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TransponderReport)
	mem := (*C.px4_msgs__msg__TransponderReport)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.IcaoAddress = uint32(mem.icao_address)
	m.Lat = float64(mem.lat)
	m.Lon = float64(mem.lon)
	m.AltitudeType = uint8(mem.altitude_type)
	m.Altitude = float32(mem.altitude)
	m.Heading = float32(mem.heading)
	m.HorVelocity = float32(mem.hor_velocity)
	m.VerVelocity = float32(mem.ver_velocity)
	cSlice_callsign := mem.callsign[:]
	primitives.Char__Array_to_Go(m.Callsign[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_callsign)))
	m.EmitterType = uint8(mem.emitter_type)
	m.Tslc = uint8(mem.tslc)
	m.Flags = uint16(mem.flags)
	m.Squawk = uint16(mem.squawk)
	cSlice_uas_id := mem.uas_id[:]
	primitives.Uint8__Array_to_Go(m.UasId[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_uas_id)))
}

func (t _TransponderReportTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TransponderReport())
}

type CTransponderReport = C.px4_msgs__msg__TransponderReport
type CTransponderReport__Sequence = C.px4_msgs__msg__TransponderReport__Sequence

func TransponderReport__Sequence_to_Go(goSlice *[]TransponderReport, cSlice CTransponderReport__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TransponderReport, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__TransponderReport__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__TransponderReport * uintptr(i)),
		))
		TransponderReportTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func TransponderReport__Sequence_to_C(cSlice *CTransponderReport__Sequence, goSlice []TransponderReport) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TransponderReport)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__TransponderReport * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__TransponderReport)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__TransponderReport * uintptr(i)),
		))
		TransponderReportTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func TransponderReport__Array_to_Go(goSlice []TransponderReport, cSlice []CTransponderReport) {
	for i := 0; i < len(cSlice); i++ {
		TransponderReportTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TransponderReport__Array_to_C(cSlice []CTransponderReport, goSlice []TransponderReport) {
	for i := 0; i < len(goSlice); i++ {
		TransponderReportTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
