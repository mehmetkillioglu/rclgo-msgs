/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/ulog_stream.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/UlogStream", UlogStreamTypeSupport)
}
const (
	UlogStream_FLAGS_NEED_ACK uint8 = 1// if set, this message requires to be acked.. flags bitmasks
	UlogStream_ORB_QUEUE_LENGTH uint8 = 16// TODO: we might be able to reduce this if mavlink polled on the topic
)

// Do not create instances of this type directly. Always use NewUlogStream
// function instead.
type UlogStream struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Length uint8 `yaml:"length"`// length of data
	FirstMessageOffset uint8 `yaml:"first_message_offset"`// offset into data where first message starts. This
	MsgSequence uint16 `yaml:"msg_sequence"`// allows determine drops. can be used for recovery, when a previous message got lost
	Flags uint8 `yaml:"flags"`// see FLAGS_*. can be used for recovery, when a previous message got lost
	Data [249]uint8 `yaml:"data"`// ulog data. can be used for recovery, when a previous message got lost
}

// NewUlogStream creates a new UlogStream with default values.
func NewUlogStream() *UlogStream {
	self := UlogStream{}
	self.SetDefaults()
	return &self
}

func (t *UlogStream) Clone() *UlogStream {
	c := &UlogStream{}
	c.Timestamp = t.Timestamp
	c.Length = t.Length
	c.FirstMessageOffset = t.FirstMessageOffset
	c.MsgSequence = t.MsgSequence
	c.Flags = t.Flags
	c.Data = t.Data
	return c
}

func (t *UlogStream) CloneMsg() types.Message {
	return t.Clone()
}

func (t *UlogStream) SetDefaults() {
	t.Timestamp = 0
	t.Length = 0
	t.FirstMessageOffset = 0
	t.MsgSequence = 0
	t.Flags = 0
	t.Data = [249]uint8{}
}

// CloneUlogStreamSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneUlogStreamSlice(dst, src []UlogStream) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var UlogStreamTypeSupport types.MessageTypeSupport = _UlogStreamTypeSupport{}

type _UlogStreamTypeSupport struct{}

func (t _UlogStreamTypeSupport) New() types.Message {
	return NewUlogStream()
}

func (t _UlogStreamTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__UlogStream
	return (unsafe.Pointer)(C.px4_msgs__msg__UlogStream__create())
}

func (t _UlogStreamTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__UlogStream__destroy((*C.px4_msgs__msg__UlogStream)(pointer_to_free))
}

func (t _UlogStreamTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*UlogStream)
	mem := (*C.px4_msgs__msg__UlogStream)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.length = C.uint8_t(m.Length)
	mem.first_message_offset = C.uint8_t(m.FirstMessageOffset)
	mem.msg_sequence = C.uint16_t(m.MsgSequence)
	mem.flags = C.uint8_t(m.Flags)
	cSlice_data := mem.data[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_data)), m.Data[:])
}

func (t _UlogStreamTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*UlogStream)
	mem := (*C.px4_msgs__msg__UlogStream)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Length = uint8(mem.length)
	m.FirstMessageOffset = uint8(mem.first_message_offset)
	m.MsgSequence = uint16(mem.msg_sequence)
	m.Flags = uint8(mem.flags)
	cSlice_data := mem.data[:]
	primitives.Uint8__Array_to_Go(m.Data[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_data)))
}

func (t _UlogStreamTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__UlogStream())
}

type CUlogStream = C.px4_msgs__msg__UlogStream
type CUlogStream__Sequence = C.px4_msgs__msg__UlogStream__Sequence

func UlogStream__Sequence_to_Go(goSlice *[]UlogStream, cSlice CUlogStream__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]UlogStream, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__UlogStream__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__UlogStream * uintptr(i)),
		))
		UlogStreamTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func UlogStream__Sequence_to_C(cSlice *CUlogStream__Sequence, goSlice []UlogStream) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__UlogStream)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__UlogStream * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__UlogStream)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__UlogStream * uintptr(i)),
		))
		UlogStreamTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func UlogStream__Array_to_Go(goSlice []UlogStream, cSlice []CUlogStream) {
	for i := 0; i < len(cSlice); i++ {
		UlogStreamTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func UlogStream__Array_to_C(cSlice []CUlogStream, goSlice []UlogStream) {
	for i := 0; i < len(goSlice); i++ {
		UlogStreamTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
