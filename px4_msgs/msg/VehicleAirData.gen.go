/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_air_data.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleAirData", VehicleAirDataTypeSupport)
}

// Do not create instances of this type directly. Always use NewVehicleAirData
// function instead.
type VehicleAirData struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	TimestampSample uint64 `yaml:"timestamp_sample"`// the timestamp of the raw data (microseconds)
	BaroDeviceId uint32 `yaml:"baro_device_id"`// unique device ID for the selected barometer
	BaroAltMeter float32 `yaml:"baro_alt_meter"`// Altitude above MSL calculated from temperature compensated baro sensor data using an ISA corrected for sea level pressure SENS_BARO_QNH.
	BaroTempCelcius float32 `yaml:"baro_temp_celcius"`// Temperature in degrees Celsius
	BaroPressurePa float32 `yaml:"baro_pressure_pa"`// Absolute pressure in Pascals
	Rho float32 `yaml:"rho"`// air density
}

// NewVehicleAirData creates a new VehicleAirData with default values.
func NewVehicleAirData() *VehicleAirData {
	self := VehicleAirData{}
	self.SetDefaults()
	return &self
}

func (t *VehicleAirData) Clone() *VehicleAirData {
	c := &VehicleAirData{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.BaroDeviceId = t.BaroDeviceId
	c.BaroAltMeter = t.BaroAltMeter
	c.BaroTempCelcius = t.BaroTempCelcius
	c.BaroPressurePa = t.BaroPressurePa
	c.Rho = t.Rho
	return c
}

func (t *VehicleAirData) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleAirData) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.BaroDeviceId = 0
	t.BaroAltMeter = 0
	t.BaroTempCelcius = 0
	t.BaroPressurePa = 0
	t.Rho = 0
}

// CloneVehicleAirDataSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleAirDataSlice(dst, src []VehicleAirData) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleAirDataTypeSupport types.MessageTypeSupport = _VehicleAirDataTypeSupport{}

type _VehicleAirDataTypeSupport struct{}

func (t _VehicleAirDataTypeSupport) New() types.Message {
	return NewVehicleAirData()
}

func (t _VehicleAirDataTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleAirData
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleAirData__create())
}

func (t _VehicleAirDataTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleAirData__destroy((*C.px4_msgs__msg__VehicleAirData)(pointer_to_free))
}

func (t _VehicleAirDataTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleAirData)
	mem := (*C.px4_msgs__msg__VehicleAirData)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.baro_device_id = C.uint32_t(m.BaroDeviceId)
	mem.baro_alt_meter = C.float(m.BaroAltMeter)
	mem.baro_temp_celcius = C.float(m.BaroTempCelcius)
	mem.baro_pressure_pa = C.float(m.BaroPressurePa)
	mem.rho = C.float(m.Rho)
}

func (t _VehicleAirDataTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleAirData)
	mem := (*C.px4_msgs__msg__VehicleAirData)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.BaroDeviceId = uint32(mem.baro_device_id)
	m.BaroAltMeter = float32(mem.baro_alt_meter)
	m.BaroTempCelcius = float32(mem.baro_temp_celcius)
	m.BaroPressurePa = float32(mem.baro_pressure_pa)
	m.Rho = float32(mem.rho)
}

func (t _VehicleAirDataTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleAirData())
}

type CVehicleAirData = C.px4_msgs__msg__VehicleAirData
type CVehicleAirData__Sequence = C.px4_msgs__msg__VehicleAirData__Sequence

func VehicleAirData__Sequence_to_Go(goSlice *[]VehicleAirData, cSlice CVehicleAirData__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleAirData, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__VehicleAirData__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleAirData * uintptr(i)),
		))
		VehicleAirDataTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func VehicleAirData__Sequence_to_C(cSlice *CVehicleAirData__Sequence, goSlice []VehicleAirData) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleAirData)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__VehicleAirData * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__VehicleAirData)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleAirData * uintptr(i)),
		))
		VehicleAirDataTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func VehicleAirData__Array_to_Go(goSlice []VehicleAirData, cSlice []CVehicleAirData) {
	for i := 0; i < len(cSlice); i++ {
		VehicleAirDataTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleAirData__Array_to_C(cSlice []CVehicleAirData, goSlice []VehicleAirData) {
	for i := 0; i < len(goSlice); i++ {
		VehicleAirDataTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
