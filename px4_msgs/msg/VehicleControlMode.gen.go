/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_control_mode.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleControlMode", VehicleControlModeTypeSupport)
}

// Do not create instances of this type directly. Always use NewVehicleControlMode
// function instead.
type VehicleControlMode struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	FlagArmed bool `yaml:"flag_armed"`// synonym for actuator_armed.armed
	FlagMulticopterPositionControlEnabled bool `yaml:"flag_multicopter_position_control_enabled"`
	FlagControlManualEnabled bool `yaml:"flag_control_manual_enabled"`// true if manual input is mixed in
	FlagControlAutoEnabled bool `yaml:"flag_control_auto_enabled"`// true if onboard autopilot should act
	FlagControlOffboardEnabled bool `yaml:"flag_control_offboard_enabled"`// true if offboard control should be used
	FlagControlRatesEnabled bool `yaml:"flag_control_rates_enabled"`// true if rates are stabilized
	FlagControlAttitudeEnabled bool `yaml:"flag_control_attitude_enabled"`// true if attitude stabilization is mixed in
	FlagControlAccelerationEnabled bool `yaml:"flag_control_acceleration_enabled"`// true if acceleration is controlled
	FlagControlVelocityEnabled bool `yaml:"flag_control_velocity_enabled"`// true if horizontal velocity (implies direction) is controlled
	FlagControlPositionEnabled bool `yaml:"flag_control_position_enabled"`// true if position is controlled
	FlagControlAltitudeEnabled bool `yaml:"flag_control_altitude_enabled"`// true if altitude is controlled
	FlagControlClimbRateEnabled bool `yaml:"flag_control_climb_rate_enabled"`// true if climb rate is controlled
	FlagControlTerminationEnabled bool `yaml:"flag_control_termination_enabled"`// true if flighttermination is enabled
}

// NewVehicleControlMode creates a new VehicleControlMode with default values.
func NewVehicleControlMode() *VehicleControlMode {
	self := VehicleControlMode{}
	self.SetDefaults()
	return &self
}

func (t *VehicleControlMode) Clone() *VehicleControlMode {
	c := &VehicleControlMode{}
	c.Timestamp = t.Timestamp
	c.FlagArmed = t.FlagArmed
	c.FlagMulticopterPositionControlEnabled = t.FlagMulticopterPositionControlEnabled
	c.FlagControlManualEnabled = t.FlagControlManualEnabled
	c.FlagControlAutoEnabled = t.FlagControlAutoEnabled
	c.FlagControlOffboardEnabled = t.FlagControlOffboardEnabled
	c.FlagControlRatesEnabled = t.FlagControlRatesEnabled
	c.FlagControlAttitudeEnabled = t.FlagControlAttitudeEnabled
	c.FlagControlAccelerationEnabled = t.FlagControlAccelerationEnabled
	c.FlagControlVelocityEnabled = t.FlagControlVelocityEnabled
	c.FlagControlPositionEnabled = t.FlagControlPositionEnabled
	c.FlagControlAltitudeEnabled = t.FlagControlAltitudeEnabled
	c.FlagControlClimbRateEnabled = t.FlagControlClimbRateEnabled
	c.FlagControlTerminationEnabled = t.FlagControlTerminationEnabled
	return c
}

func (t *VehicleControlMode) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleControlMode) SetDefaults() {
	t.Timestamp = 0
	t.FlagArmed = false
	t.FlagMulticopterPositionControlEnabled = false
	t.FlagControlManualEnabled = false
	t.FlagControlAutoEnabled = false
	t.FlagControlOffboardEnabled = false
	t.FlagControlRatesEnabled = false
	t.FlagControlAttitudeEnabled = false
	t.FlagControlAccelerationEnabled = false
	t.FlagControlVelocityEnabled = false
	t.FlagControlPositionEnabled = false
	t.FlagControlAltitudeEnabled = false
	t.FlagControlClimbRateEnabled = false
	t.FlagControlTerminationEnabled = false
}

// CloneVehicleControlModeSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleControlModeSlice(dst, src []VehicleControlMode) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleControlModeTypeSupport types.MessageTypeSupport = _VehicleControlModeTypeSupport{}

type _VehicleControlModeTypeSupport struct{}

func (t _VehicleControlModeTypeSupport) New() types.Message {
	return NewVehicleControlMode()
}

func (t _VehicleControlModeTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleControlMode
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleControlMode__create())
}

func (t _VehicleControlModeTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleControlMode__destroy((*C.px4_msgs__msg__VehicleControlMode)(pointer_to_free))
}

func (t _VehicleControlModeTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleControlMode)
	mem := (*C.px4_msgs__msg__VehicleControlMode)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.flag_armed = C.bool(m.FlagArmed)
	mem.flag_multicopter_position_control_enabled = C.bool(m.FlagMulticopterPositionControlEnabled)
	mem.flag_control_manual_enabled = C.bool(m.FlagControlManualEnabled)
	mem.flag_control_auto_enabled = C.bool(m.FlagControlAutoEnabled)
	mem.flag_control_offboard_enabled = C.bool(m.FlagControlOffboardEnabled)
	mem.flag_control_rates_enabled = C.bool(m.FlagControlRatesEnabled)
	mem.flag_control_attitude_enabled = C.bool(m.FlagControlAttitudeEnabled)
	mem.flag_control_acceleration_enabled = C.bool(m.FlagControlAccelerationEnabled)
	mem.flag_control_velocity_enabled = C.bool(m.FlagControlVelocityEnabled)
	mem.flag_control_position_enabled = C.bool(m.FlagControlPositionEnabled)
	mem.flag_control_altitude_enabled = C.bool(m.FlagControlAltitudeEnabled)
	mem.flag_control_climb_rate_enabled = C.bool(m.FlagControlClimbRateEnabled)
	mem.flag_control_termination_enabled = C.bool(m.FlagControlTerminationEnabled)
}

func (t _VehicleControlModeTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleControlMode)
	mem := (*C.px4_msgs__msg__VehicleControlMode)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.FlagArmed = bool(mem.flag_armed)
	m.FlagMulticopterPositionControlEnabled = bool(mem.flag_multicopter_position_control_enabled)
	m.FlagControlManualEnabled = bool(mem.flag_control_manual_enabled)
	m.FlagControlAutoEnabled = bool(mem.flag_control_auto_enabled)
	m.FlagControlOffboardEnabled = bool(mem.flag_control_offboard_enabled)
	m.FlagControlRatesEnabled = bool(mem.flag_control_rates_enabled)
	m.FlagControlAttitudeEnabled = bool(mem.flag_control_attitude_enabled)
	m.FlagControlAccelerationEnabled = bool(mem.flag_control_acceleration_enabled)
	m.FlagControlVelocityEnabled = bool(mem.flag_control_velocity_enabled)
	m.FlagControlPositionEnabled = bool(mem.flag_control_position_enabled)
	m.FlagControlAltitudeEnabled = bool(mem.flag_control_altitude_enabled)
	m.FlagControlClimbRateEnabled = bool(mem.flag_control_climb_rate_enabled)
	m.FlagControlTerminationEnabled = bool(mem.flag_control_termination_enabled)
}

func (t _VehicleControlModeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleControlMode())
}

type CVehicleControlMode = C.px4_msgs__msg__VehicleControlMode
type CVehicleControlMode__Sequence = C.px4_msgs__msg__VehicleControlMode__Sequence

func VehicleControlMode__Sequence_to_Go(goSlice *[]VehicleControlMode, cSlice CVehicleControlMode__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleControlMode, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__VehicleControlMode__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleControlMode * uintptr(i)),
		))
		VehicleControlModeTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func VehicleControlMode__Sequence_to_C(cSlice *CVehicleControlMode__Sequence, goSlice []VehicleControlMode) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleControlMode)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__VehicleControlMode * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__VehicleControlMode)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleControlMode * uintptr(i)),
		))
		VehicleControlModeTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func VehicleControlMode__Array_to_Go(goSlice []VehicleControlMode, cSlice []CVehicleControlMode) {
	for i := 0; i < len(cSlice); i++ {
		VehicleControlModeTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleControlMode__Array_to_C(cSlice []CVehicleControlMode, goSlice []VehicleControlMode) {
	for i := 0; i < len(goSlice); i++ {
		VehicleControlModeTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
