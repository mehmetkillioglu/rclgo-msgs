/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_global_position_groundtruth.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleGlobalPositionGroundtruth", VehicleGlobalPositionGroundtruthTypeSupport)
}

// Do not create instances of this type directly. Always use NewVehicleGlobalPositionGroundtruth
// function instead.
type VehicleGlobalPositionGroundtruth struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	TimestampSample uint64 `yaml:"timestamp_sample"`// the timestamp of the raw data (microseconds)
	Lat float64 `yaml:"lat"`// Latitude, (degrees)
	Lon float64 `yaml:"lon"`// Longitude, (degrees)
	Alt float32 `yaml:"alt"`// Altitude AMSL, (meters)
	AltEllipsoid float32 `yaml:"alt_ellipsoid"`// Altitude above ellipsoid, (meters)
	DeltaAlt float32 `yaml:"delta_alt"`// Reset delta for altitude
	LatLonResetCounter uint8 `yaml:"lat_lon_reset_counter"`// Counter for reset events on horizontal position coordinates
	AltResetCounter uint8 `yaml:"alt_reset_counter"`// Counter for reset events on altitude
	Eph float32 `yaml:"eph"`// Standard deviation of horizontal position error, (metres)
	Epv float32 `yaml:"epv"`// Standard deviation of vertical position error, (metres)
	TerrainAlt float32 `yaml:"terrain_alt"`// Terrain altitude WGS84, (metres)
	TerrainAltValid bool `yaml:"terrain_alt_valid"`// Terrain altitude estimate is valid
	DeadReckoning bool `yaml:"dead_reckoning"`// True if this position is estimated through dead-reckoning
}

// NewVehicleGlobalPositionGroundtruth creates a new VehicleGlobalPositionGroundtruth with default values.
func NewVehicleGlobalPositionGroundtruth() *VehicleGlobalPositionGroundtruth {
	self := VehicleGlobalPositionGroundtruth{}
	self.SetDefaults()
	return &self
}

func (t *VehicleGlobalPositionGroundtruth) Clone() *VehicleGlobalPositionGroundtruth {
	c := &VehicleGlobalPositionGroundtruth{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.Lat = t.Lat
	c.Lon = t.Lon
	c.Alt = t.Alt
	c.AltEllipsoid = t.AltEllipsoid
	c.DeltaAlt = t.DeltaAlt
	c.LatLonResetCounter = t.LatLonResetCounter
	c.AltResetCounter = t.AltResetCounter
	c.Eph = t.Eph
	c.Epv = t.Epv
	c.TerrainAlt = t.TerrainAlt
	c.TerrainAltValid = t.TerrainAltValid
	c.DeadReckoning = t.DeadReckoning
	return c
}

func (t *VehicleGlobalPositionGroundtruth) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleGlobalPositionGroundtruth) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.Lat = 0
	t.Lon = 0
	t.Alt = 0
	t.AltEllipsoid = 0
	t.DeltaAlt = 0
	t.LatLonResetCounter = 0
	t.AltResetCounter = 0
	t.Eph = 0
	t.Epv = 0
	t.TerrainAlt = 0
	t.TerrainAltValid = false
	t.DeadReckoning = false
}

// CloneVehicleGlobalPositionGroundtruthSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleGlobalPositionGroundtruthSlice(dst, src []VehicleGlobalPositionGroundtruth) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleGlobalPositionGroundtruthTypeSupport types.MessageTypeSupport = _VehicleGlobalPositionGroundtruthTypeSupport{}

type _VehicleGlobalPositionGroundtruthTypeSupport struct{}

func (t _VehicleGlobalPositionGroundtruthTypeSupport) New() types.Message {
	return NewVehicleGlobalPositionGroundtruth()
}

func (t _VehicleGlobalPositionGroundtruthTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleGlobalPositionGroundtruth
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleGlobalPositionGroundtruth__create())
}

func (t _VehicleGlobalPositionGroundtruthTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleGlobalPositionGroundtruth__destroy((*C.px4_msgs__msg__VehicleGlobalPositionGroundtruth)(pointer_to_free))
}

func (t _VehicleGlobalPositionGroundtruthTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleGlobalPositionGroundtruth)
	mem := (*C.px4_msgs__msg__VehicleGlobalPositionGroundtruth)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.lat = C.double(m.Lat)
	mem.lon = C.double(m.Lon)
	mem.alt = C.float(m.Alt)
	mem.alt_ellipsoid = C.float(m.AltEllipsoid)
	mem.delta_alt = C.float(m.DeltaAlt)
	mem.lat_lon_reset_counter = C.uint8_t(m.LatLonResetCounter)
	mem.alt_reset_counter = C.uint8_t(m.AltResetCounter)
	mem.eph = C.float(m.Eph)
	mem.epv = C.float(m.Epv)
	mem.terrain_alt = C.float(m.TerrainAlt)
	mem.terrain_alt_valid = C.bool(m.TerrainAltValid)
	mem.dead_reckoning = C.bool(m.DeadReckoning)
}

func (t _VehicleGlobalPositionGroundtruthTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleGlobalPositionGroundtruth)
	mem := (*C.px4_msgs__msg__VehicleGlobalPositionGroundtruth)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.Lat = float64(mem.lat)
	m.Lon = float64(mem.lon)
	m.Alt = float32(mem.alt)
	m.AltEllipsoid = float32(mem.alt_ellipsoid)
	m.DeltaAlt = float32(mem.delta_alt)
	m.LatLonResetCounter = uint8(mem.lat_lon_reset_counter)
	m.AltResetCounter = uint8(mem.alt_reset_counter)
	m.Eph = float32(mem.eph)
	m.Epv = float32(mem.epv)
	m.TerrainAlt = float32(mem.terrain_alt)
	m.TerrainAltValid = bool(mem.terrain_alt_valid)
	m.DeadReckoning = bool(mem.dead_reckoning)
}

func (t _VehicleGlobalPositionGroundtruthTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleGlobalPositionGroundtruth())
}

type CVehicleGlobalPositionGroundtruth = C.px4_msgs__msg__VehicleGlobalPositionGroundtruth
type CVehicleGlobalPositionGroundtruth__Sequence = C.px4_msgs__msg__VehicleGlobalPositionGroundtruth__Sequence

func VehicleGlobalPositionGroundtruth__Sequence_to_Go(goSlice *[]VehicleGlobalPositionGroundtruth, cSlice CVehicleGlobalPositionGroundtruth__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleGlobalPositionGroundtruth, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__VehicleGlobalPositionGroundtruth__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleGlobalPositionGroundtruth * uintptr(i)),
		))
		VehicleGlobalPositionGroundtruthTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func VehicleGlobalPositionGroundtruth__Sequence_to_C(cSlice *CVehicleGlobalPositionGroundtruth__Sequence, goSlice []VehicleGlobalPositionGroundtruth) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleGlobalPositionGroundtruth)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__VehicleGlobalPositionGroundtruth * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__VehicleGlobalPositionGroundtruth)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleGlobalPositionGroundtruth * uintptr(i)),
		))
		VehicleGlobalPositionGroundtruthTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func VehicleGlobalPositionGroundtruth__Array_to_Go(goSlice []VehicleGlobalPositionGroundtruth, cSlice []CVehicleGlobalPositionGroundtruth) {
	for i := 0; i < len(cSlice); i++ {
		VehicleGlobalPositionGroundtruthTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleGlobalPositionGroundtruth__Array_to_C(cSlice []CVehicleGlobalPositionGroundtruth, goSlice []VehicleGlobalPositionGroundtruth) {
	for i := 0; i < len(goSlice); i++ {
		VehicleGlobalPositionGroundtruthTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
