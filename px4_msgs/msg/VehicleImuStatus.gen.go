/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_imu_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleImuStatus", VehicleImuStatusTypeSupport)
}

// Do not create instances of this type directly. Always use NewVehicleImuStatus
// function instead.
type VehicleImuStatus struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	AccelDeviceId uint32 `yaml:"accel_device_id"`// unique device ID for the sensor that does not change between power cycles
	GyroDeviceId uint32 `yaml:"gyro_device_id"`// unique device ID for the sensor that does not change between power cycles
	AccelClipping [3]uint32 `yaml:"accel_clipping"`// total clipping per axis
	AccelErrorCount uint32 `yaml:"accel_error_count"`
	GyroErrorCount uint32 `yaml:"gyro_error_count"`
	AccelRateHz float32 `yaml:"accel_rate_hz"`
	GyroRateHz float32 `yaml:"gyro_rate_hz"`
	AccelRawRateHz float32 `yaml:"accel_raw_rate_hz"`// full raw sensor sample rate (Hz)
	GyroRawRateHz float32 `yaml:"gyro_raw_rate_hz"`// full raw sensor sample rate (Hz)
	AccelVibrationMetric float32 `yaml:"accel_vibration_metric"`// high frequency vibration level in the IMU delta velocity data (m/s)
	GyroVibrationMetric float32 `yaml:"gyro_vibration_metric"`// high frequency vibration level in the IMU delta velocity data (m/s)
	GyroConingVibration float32 `yaml:"gyro_coning_vibration"`// Level of coning vibration in the IMU delta angles (rad^2)
	MeanAccel [3]float32 `yaml:"mean_accel"`// average accelerometer readings since last publication
	MeanGyro [3]float32 `yaml:"mean_gyro"`// average gyroscope readings since last publication
	TemperatureAccel float32 `yaml:"temperature_accel"`
	TemperatureGyro float32 `yaml:"temperature_gyro"`
}

// NewVehicleImuStatus creates a new VehicleImuStatus with default values.
func NewVehicleImuStatus() *VehicleImuStatus {
	self := VehicleImuStatus{}
	self.SetDefaults()
	return &self
}

func (t *VehicleImuStatus) Clone() *VehicleImuStatus {
	c := &VehicleImuStatus{}
	c.Timestamp = t.Timestamp
	c.AccelDeviceId = t.AccelDeviceId
	c.GyroDeviceId = t.GyroDeviceId
	c.AccelClipping = t.AccelClipping
	c.AccelErrorCount = t.AccelErrorCount
	c.GyroErrorCount = t.GyroErrorCount
	c.AccelRateHz = t.AccelRateHz
	c.GyroRateHz = t.GyroRateHz
	c.AccelRawRateHz = t.AccelRawRateHz
	c.GyroRawRateHz = t.GyroRawRateHz
	c.AccelVibrationMetric = t.AccelVibrationMetric
	c.GyroVibrationMetric = t.GyroVibrationMetric
	c.GyroConingVibration = t.GyroConingVibration
	c.MeanAccel = t.MeanAccel
	c.MeanGyro = t.MeanGyro
	c.TemperatureAccel = t.TemperatureAccel
	c.TemperatureGyro = t.TemperatureGyro
	return c
}

func (t *VehicleImuStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleImuStatus) SetDefaults() {
	t.Timestamp = 0
	t.AccelDeviceId = 0
	t.GyroDeviceId = 0
	t.AccelClipping = [3]uint32{}
	t.AccelErrorCount = 0
	t.GyroErrorCount = 0
	t.AccelRateHz = 0
	t.GyroRateHz = 0
	t.AccelRawRateHz = 0
	t.GyroRawRateHz = 0
	t.AccelVibrationMetric = 0
	t.GyroVibrationMetric = 0
	t.GyroConingVibration = 0
	t.MeanAccel = [3]float32{}
	t.MeanGyro = [3]float32{}
	t.TemperatureAccel = 0
	t.TemperatureGyro = 0
}

// CloneVehicleImuStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleImuStatusSlice(dst, src []VehicleImuStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleImuStatusTypeSupport types.MessageTypeSupport = _VehicleImuStatusTypeSupport{}

type _VehicleImuStatusTypeSupport struct{}

func (t _VehicleImuStatusTypeSupport) New() types.Message {
	return NewVehicleImuStatus()
}

func (t _VehicleImuStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleImuStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleImuStatus__create())
}

func (t _VehicleImuStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleImuStatus__destroy((*C.px4_msgs__msg__VehicleImuStatus)(pointer_to_free))
}

func (t _VehicleImuStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleImuStatus)
	mem := (*C.px4_msgs__msg__VehicleImuStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.accel_device_id = C.uint32_t(m.AccelDeviceId)
	mem.gyro_device_id = C.uint32_t(m.GyroDeviceId)
	cSlice_accel_clipping := mem.accel_clipping[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_accel_clipping)), m.AccelClipping[:])
	mem.accel_error_count = C.uint32_t(m.AccelErrorCount)
	mem.gyro_error_count = C.uint32_t(m.GyroErrorCount)
	mem.accel_rate_hz = C.float(m.AccelRateHz)
	mem.gyro_rate_hz = C.float(m.GyroRateHz)
	mem.accel_raw_rate_hz = C.float(m.AccelRawRateHz)
	mem.gyro_raw_rate_hz = C.float(m.GyroRawRateHz)
	mem.accel_vibration_metric = C.float(m.AccelVibrationMetric)
	mem.gyro_vibration_metric = C.float(m.GyroVibrationMetric)
	mem.gyro_coning_vibration = C.float(m.GyroConingVibration)
	cSlice_mean_accel := mem.mean_accel[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mean_accel)), m.MeanAccel[:])
	cSlice_mean_gyro := mem.mean_gyro[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mean_gyro)), m.MeanGyro[:])
	mem.temperature_accel = C.float(m.TemperatureAccel)
	mem.temperature_gyro = C.float(m.TemperatureGyro)
}

func (t _VehicleImuStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleImuStatus)
	mem := (*C.px4_msgs__msg__VehicleImuStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.AccelDeviceId = uint32(mem.accel_device_id)
	m.GyroDeviceId = uint32(mem.gyro_device_id)
	cSlice_accel_clipping := mem.accel_clipping[:]
	primitives.Uint32__Array_to_Go(m.AccelClipping[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_accel_clipping)))
	m.AccelErrorCount = uint32(mem.accel_error_count)
	m.GyroErrorCount = uint32(mem.gyro_error_count)
	m.AccelRateHz = float32(mem.accel_rate_hz)
	m.GyroRateHz = float32(mem.gyro_rate_hz)
	m.AccelRawRateHz = float32(mem.accel_raw_rate_hz)
	m.GyroRawRateHz = float32(mem.gyro_raw_rate_hz)
	m.AccelVibrationMetric = float32(mem.accel_vibration_metric)
	m.GyroVibrationMetric = float32(mem.gyro_vibration_metric)
	m.GyroConingVibration = float32(mem.gyro_coning_vibration)
	cSlice_mean_accel := mem.mean_accel[:]
	primitives.Float32__Array_to_Go(m.MeanAccel[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mean_accel)))
	cSlice_mean_gyro := mem.mean_gyro[:]
	primitives.Float32__Array_to_Go(m.MeanGyro[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mean_gyro)))
	m.TemperatureAccel = float32(mem.temperature_accel)
	m.TemperatureGyro = float32(mem.temperature_gyro)
}

func (t _VehicleImuStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleImuStatus())
}

type CVehicleImuStatus = C.px4_msgs__msg__VehicleImuStatus
type CVehicleImuStatus__Sequence = C.px4_msgs__msg__VehicleImuStatus__Sequence

func VehicleImuStatus__Sequence_to_Go(goSlice *[]VehicleImuStatus, cSlice CVehicleImuStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleImuStatus, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__VehicleImuStatus__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleImuStatus * uintptr(i)),
		))
		VehicleImuStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func VehicleImuStatus__Sequence_to_C(cSlice *CVehicleImuStatus__Sequence, goSlice []VehicleImuStatus) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleImuStatus)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__VehicleImuStatus * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__VehicleImuStatus)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleImuStatus * uintptr(i)),
		))
		VehicleImuStatusTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func VehicleImuStatus__Array_to_Go(goSlice []VehicleImuStatus, cSlice []CVehicleImuStatus) {
	for i := 0; i < len(cSlice); i++ {
		VehicleImuStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleImuStatus__Array_to_C(cSlice []CVehicleImuStatus, goSlice []VehicleImuStatus) {
	for i := 0; i < len(goSlice); i++ {
		VehicleImuStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
