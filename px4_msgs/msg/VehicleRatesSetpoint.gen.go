/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_rates_setpoint.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleRatesSetpoint", VehicleRatesSetpointTypeSupport)
}

// Do not create instances of this type directly. Always use NewVehicleRatesSetpoint
// function instead.
type VehicleRatesSetpoint struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Roll float32 `yaml:"roll"`// body angular rates in NED frame
	Pitch float32 `yaml:"pitch"`// body angular rates in NED frame
	Yaw float32 `yaml:"yaw"`// body angular rates in NED frame
	ThrustBody [3]float32 `yaml:"thrust_body"`// Normalized thrust command in body NED frame [-1,1]. For clarification: For multicopters thrust_body[0] and thrust[1] are usually 0 and thrust[2] is the negative throttle demand.For fixed wings thrust_x is the throttle demand and thrust_y, thrust_z will usually be zero.
}

// NewVehicleRatesSetpoint creates a new VehicleRatesSetpoint with default values.
func NewVehicleRatesSetpoint() *VehicleRatesSetpoint {
	self := VehicleRatesSetpoint{}
	self.SetDefaults()
	return &self
}

func (t *VehicleRatesSetpoint) Clone() *VehicleRatesSetpoint {
	c := &VehicleRatesSetpoint{}
	c.Timestamp = t.Timestamp
	c.Roll = t.Roll
	c.Pitch = t.Pitch
	c.Yaw = t.Yaw
	c.ThrustBody = t.ThrustBody
	return c
}

func (t *VehicleRatesSetpoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleRatesSetpoint) SetDefaults() {
	t.Timestamp = 0
	t.Roll = 0
	t.Pitch = 0
	t.Yaw = 0
	t.ThrustBody = [3]float32{}
}

// CloneVehicleRatesSetpointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleRatesSetpointSlice(dst, src []VehicleRatesSetpoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleRatesSetpointTypeSupport types.MessageTypeSupport = _VehicleRatesSetpointTypeSupport{}

type _VehicleRatesSetpointTypeSupport struct{}

func (t _VehicleRatesSetpointTypeSupport) New() types.Message {
	return NewVehicleRatesSetpoint()
}

func (t _VehicleRatesSetpointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleRatesSetpoint
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleRatesSetpoint__create())
}

func (t _VehicleRatesSetpointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleRatesSetpoint__destroy((*C.px4_msgs__msg__VehicleRatesSetpoint)(pointer_to_free))
}

func (t _VehicleRatesSetpointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleRatesSetpoint)
	mem := (*C.px4_msgs__msg__VehicleRatesSetpoint)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.roll = C.float(m.Roll)
	mem.pitch = C.float(m.Pitch)
	mem.yaw = C.float(m.Yaw)
	cSlice_thrust_body := mem.thrust_body[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_thrust_body)), m.ThrustBody[:])
}

func (t _VehicleRatesSetpointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleRatesSetpoint)
	mem := (*C.px4_msgs__msg__VehicleRatesSetpoint)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Roll = float32(mem.roll)
	m.Pitch = float32(mem.pitch)
	m.Yaw = float32(mem.yaw)
	cSlice_thrust_body := mem.thrust_body[:]
	primitives.Float32__Array_to_Go(m.ThrustBody[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_thrust_body)))
}

func (t _VehicleRatesSetpointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleRatesSetpoint())
}

type CVehicleRatesSetpoint = C.px4_msgs__msg__VehicleRatesSetpoint
type CVehicleRatesSetpoint__Sequence = C.px4_msgs__msg__VehicleRatesSetpoint__Sequence

func VehicleRatesSetpoint__Sequence_to_Go(goSlice *[]VehicleRatesSetpoint, cSlice CVehicleRatesSetpoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleRatesSetpoint, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__VehicleRatesSetpoint__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleRatesSetpoint * uintptr(i)),
		))
		VehicleRatesSetpointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func VehicleRatesSetpoint__Sequence_to_C(cSlice *CVehicleRatesSetpoint__Sequence, goSlice []VehicleRatesSetpoint) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleRatesSetpoint)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__VehicleRatesSetpoint * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__VehicleRatesSetpoint)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleRatesSetpoint * uintptr(i)),
		))
		VehicleRatesSetpointTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func VehicleRatesSetpoint__Array_to_Go(goSlice []VehicleRatesSetpoint, cSlice []CVehicleRatesSetpoint) {
	for i := 0; i < len(cSlice); i++ {
		VehicleRatesSetpointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleRatesSetpoint__Array_to_C(cSlice []CVehicleRatesSetpoint, goSlice []VehicleRatesSetpoint) {
	for i := 0; i < len(goSlice); i++ {
		VehicleRatesSetpointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
