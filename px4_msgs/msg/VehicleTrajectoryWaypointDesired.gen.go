/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_trajectory_waypoint_desired.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleTrajectoryWaypointDesired", VehicleTrajectoryWaypointDesiredTypeSupport)
}
const (
	VehicleTrajectoryWaypointDesired_MAV_TRAJECTORY_REPRESENTATION_WAYPOINTS uint8 = 0
	VehicleTrajectoryWaypointDesired_POINT_0 uint8 = 0
	VehicleTrajectoryWaypointDesired_POINT_1 uint8 = 1
	VehicleTrajectoryWaypointDesired_POINT_2 uint8 = 2
	VehicleTrajectoryWaypointDesired_POINT_3 uint8 = 3
	VehicleTrajectoryWaypointDesired_POINT_4 uint8 = 4
	VehicleTrajectoryWaypointDesired_NUMBER_POINTS uint8 = 5
)

// Do not create instances of this type directly. Always use NewVehicleTrajectoryWaypointDesired
// function instead.
type VehicleTrajectoryWaypointDesired struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Type uint8 `yaml:"type"`// Type from MAV_TRAJECTORY_REPRESENTATION enum.
	Waypoints [5]TrajectoryWaypoint `yaml:"waypoints"`
}

// NewVehicleTrajectoryWaypointDesired creates a new VehicleTrajectoryWaypointDesired with default values.
func NewVehicleTrajectoryWaypointDesired() *VehicleTrajectoryWaypointDesired {
	self := VehicleTrajectoryWaypointDesired{}
	self.SetDefaults()
	return &self
}

func (t *VehicleTrajectoryWaypointDesired) Clone() *VehicleTrajectoryWaypointDesired {
	c := &VehicleTrajectoryWaypointDesired{}
	c.Timestamp = t.Timestamp
	c.Type = t.Type
	CloneTrajectoryWaypointSlice(c.Waypoints[:], t.Waypoints[:])
	return c
}

func (t *VehicleTrajectoryWaypointDesired) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleTrajectoryWaypointDesired) SetDefaults() {
	t.Timestamp = 0
	t.Type = 0
	for i := range t.Waypoints {
		t.Waypoints[i].SetDefaults()
	}
}

// CloneVehicleTrajectoryWaypointDesiredSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleTrajectoryWaypointDesiredSlice(dst, src []VehicleTrajectoryWaypointDesired) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleTrajectoryWaypointDesiredTypeSupport types.MessageTypeSupport = _VehicleTrajectoryWaypointDesiredTypeSupport{}

type _VehicleTrajectoryWaypointDesiredTypeSupport struct{}

func (t _VehicleTrajectoryWaypointDesiredTypeSupport) New() types.Message {
	return NewVehicleTrajectoryWaypointDesired()
}

func (t _VehicleTrajectoryWaypointDesiredTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleTrajectoryWaypointDesired
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleTrajectoryWaypointDesired__create())
}

func (t _VehicleTrajectoryWaypointDesiredTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleTrajectoryWaypointDesired__destroy((*C.px4_msgs__msg__VehicleTrajectoryWaypointDesired)(pointer_to_free))
}

func (t _VehicleTrajectoryWaypointDesiredTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleTrajectoryWaypointDesired)
	mem := (*C.px4_msgs__msg__VehicleTrajectoryWaypointDesired)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem._type = C.uint8_t(m.Type)
	TrajectoryWaypoint__Array_to_C(mem.waypoints[:], m.Waypoints[:])
}

func (t _VehicleTrajectoryWaypointDesiredTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleTrajectoryWaypointDesired)
	mem := (*C.px4_msgs__msg__VehicleTrajectoryWaypointDesired)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Type = uint8(mem._type)
	TrajectoryWaypoint__Array_to_Go(m.Waypoints[:], mem.waypoints[:])
}

func (t _VehicleTrajectoryWaypointDesiredTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleTrajectoryWaypointDesired())
}

type CVehicleTrajectoryWaypointDesired = C.px4_msgs__msg__VehicleTrajectoryWaypointDesired
type CVehicleTrajectoryWaypointDesired__Sequence = C.px4_msgs__msg__VehicleTrajectoryWaypointDesired__Sequence

func VehicleTrajectoryWaypointDesired__Sequence_to_Go(goSlice *[]VehicleTrajectoryWaypointDesired, cSlice CVehicleTrajectoryWaypointDesired__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleTrajectoryWaypointDesired, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__VehicleTrajectoryWaypointDesired__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleTrajectoryWaypointDesired * uintptr(i)),
		))
		VehicleTrajectoryWaypointDesiredTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func VehicleTrajectoryWaypointDesired__Sequence_to_C(cSlice *CVehicleTrajectoryWaypointDesired__Sequence, goSlice []VehicleTrajectoryWaypointDesired) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleTrajectoryWaypointDesired)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__VehicleTrajectoryWaypointDesired * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__VehicleTrajectoryWaypointDesired)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleTrajectoryWaypointDesired * uintptr(i)),
		))
		VehicleTrajectoryWaypointDesiredTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func VehicleTrajectoryWaypointDesired__Array_to_Go(goSlice []VehicleTrajectoryWaypointDesired, cSlice []CVehicleTrajectoryWaypointDesired) {
	for i := 0; i < len(cSlice); i++ {
		VehicleTrajectoryWaypointDesiredTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleTrajectoryWaypointDesired__Array_to_C(cSlice []CVehicleTrajectoryWaypointDesired, goSlice []VehicleTrajectoryWaypointDesired) {
	for i := 0; i < len(goSlice); i++ {
		VehicleTrajectoryWaypointDesiredTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
