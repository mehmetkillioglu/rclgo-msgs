/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vtol_vehicle_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VtolVehicleStatus", VtolVehicleStatusTypeSupport)
}
const (
	VtolVehicleStatus_VEHICLE_VTOL_STATE_UNDEFINED uint8 = 0// VEHICLE_VTOL_STATE, should match 1:1 MAVLinks's MAV_VTOL_STATE
	VtolVehicleStatus_VEHICLE_VTOL_STATE_TRANSITION_TO_FW uint8 = 1// VEHICLE_VTOL_STATE, should match 1:1 MAVLinks's MAV_VTOL_STATE
	VtolVehicleStatus_VEHICLE_VTOL_STATE_TRANSITION_TO_MC uint8 = 2// VEHICLE_VTOL_STATE, should match 1:1 MAVLinks's MAV_VTOL_STATE
	VtolVehicleStatus_VEHICLE_VTOL_STATE_MC uint8 = 3// VEHICLE_VTOL_STATE, should match 1:1 MAVLinks's MAV_VTOL_STATE
	VtolVehicleStatus_VEHICLE_VTOL_STATE_FW uint8 = 4// VEHICLE_VTOL_STATE, should match 1:1 MAVLinks's MAV_VTOL_STATE
)

// Do not create instances of this type directly. Always use NewVtolVehicleStatus
// function instead.
type VtolVehicleStatus struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	VtolInRwMode bool `yaml:"vtol_in_rw_mode"`// true: vtol vehicle is in rotating wing mode
	VtolInTransMode bool `yaml:"vtol_in_trans_mode"`
	InTransitionToFw bool `yaml:"in_transition_to_fw"`// True if VTOL is doing a transition from MC to FW
	VtolTransitionFailsafe bool `yaml:"vtol_transition_failsafe"`// vtol in transition failsafe mode
	FwPermanentStab bool `yaml:"fw_permanent_stab"`// In fw mode stabilize attitude even if in manual mode
}

// NewVtolVehicleStatus creates a new VtolVehicleStatus with default values.
func NewVtolVehicleStatus() *VtolVehicleStatus {
	self := VtolVehicleStatus{}
	self.SetDefaults()
	return &self
}

func (t *VtolVehicleStatus) Clone() *VtolVehicleStatus {
	c := &VtolVehicleStatus{}
	c.Timestamp = t.Timestamp
	c.VtolInRwMode = t.VtolInRwMode
	c.VtolInTransMode = t.VtolInTransMode
	c.InTransitionToFw = t.InTransitionToFw
	c.VtolTransitionFailsafe = t.VtolTransitionFailsafe
	c.FwPermanentStab = t.FwPermanentStab
	return c
}

func (t *VtolVehicleStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VtolVehicleStatus) SetDefaults() {
	t.Timestamp = 0
	t.VtolInRwMode = false
	t.VtolInTransMode = false
	t.InTransitionToFw = false
	t.VtolTransitionFailsafe = false
	t.FwPermanentStab = false
}

// CloneVtolVehicleStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVtolVehicleStatusSlice(dst, src []VtolVehicleStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VtolVehicleStatusTypeSupport types.MessageTypeSupport = _VtolVehicleStatusTypeSupport{}

type _VtolVehicleStatusTypeSupport struct{}

func (t _VtolVehicleStatusTypeSupport) New() types.Message {
	return NewVtolVehicleStatus()
}

func (t _VtolVehicleStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VtolVehicleStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__VtolVehicleStatus__create())
}

func (t _VtolVehicleStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VtolVehicleStatus__destroy((*C.px4_msgs__msg__VtolVehicleStatus)(pointer_to_free))
}

func (t _VtolVehicleStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VtolVehicleStatus)
	mem := (*C.px4_msgs__msg__VtolVehicleStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.vtol_in_rw_mode = C.bool(m.VtolInRwMode)
	mem.vtol_in_trans_mode = C.bool(m.VtolInTransMode)
	mem.in_transition_to_fw = C.bool(m.InTransitionToFw)
	mem.vtol_transition_failsafe = C.bool(m.VtolTransitionFailsafe)
	mem.fw_permanent_stab = C.bool(m.FwPermanentStab)
}

func (t _VtolVehicleStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VtolVehicleStatus)
	mem := (*C.px4_msgs__msg__VtolVehicleStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.VtolInRwMode = bool(mem.vtol_in_rw_mode)
	m.VtolInTransMode = bool(mem.vtol_in_trans_mode)
	m.InTransitionToFw = bool(mem.in_transition_to_fw)
	m.VtolTransitionFailsafe = bool(mem.vtol_transition_failsafe)
	m.FwPermanentStab = bool(mem.fw_permanent_stab)
}

func (t _VtolVehicleStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VtolVehicleStatus())
}

type CVtolVehicleStatus = C.px4_msgs__msg__VtolVehicleStatus
type CVtolVehicleStatus__Sequence = C.px4_msgs__msg__VtolVehicleStatus__Sequence

func VtolVehicleStatus__Sequence_to_Go(goSlice *[]VtolVehicleStatus, cSlice CVtolVehicleStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VtolVehicleStatus, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__VtolVehicleStatus__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VtolVehicleStatus * uintptr(i)),
		))
		VtolVehicleStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func VtolVehicleStatus__Sequence_to_C(cSlice *CVtolVehicleStatus__Sequence, goSlice []VtolVehicleStatus) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VtolVehicleStatus)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__VtolVehicleStatus * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__VtolVehicleStatus)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VtolVehicleStatus * uintptr(i)),
		))
		VtolVehicleStatusTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func VtolVehicleStatus__Array_to_Go(goSlice []VtolVehicleStatus, cSlice []CVtolVehicleStatus) {
	for i := 0; i < len(cSlice); i++ {
		VtolVehicleStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VtolVehicleStatus__Array_to_C(cSlice []CVtolVehicleStatus, goSlice []VtolVehicleStatus) {
	for i := 0; i < len(goSlice); i++ {
		VtolVehicleStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
