/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/wheel_encoders.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/WheelEncoders", WheelEncodersTypeSupport)
}

// Do not create instances of this type directly. Always use NewWheelEncoders
// function instead.
type WheelEncoders struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	EncoderPosition int64 `yaml:"encoder_position"`// The wheel position, in encoder counts since boot. Positive is forward rotation, negative is reverse rotation
	Speed int32 `yaml:"speed"`// Speed of each wheel, in encoder counts per second. Positive is forward, negative is reverse
	PulsesPerRev uint32 `yaml:"pulses_per_rev"`// Number of pulses per revolution for each wheel
}

// NewWheelEncoders creates a new WheelEncoders with default values.
func NewWheelEncoders() *WheelEncoders {
	self := WheelEncoders{}
	self.SetDefaults()
	return &self
}

func (t *WheelEncoders) Clone() *WheelEncoders {
	c := &WheelEncoders{}
	c.Timestamp = t.Timestamp
	c.EncoderPosition = t.EncoderPosition
	c.Speed = t.Speed
	c.PulsesPerRev = t.PulsesPerRev
	return c
}

func (t *WheelEncoders) CloneMsg() types.Message {
	return t.Clone()
}

func (t *WheelEncoders) SetDefaults() {
	t.Timestamp = 0
	t.EncoderPosition = 0
	t.Speed = 0
	t.PulsesPerRev = 0
}

// CloneWheelEncodersSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneWheelEncodersSlice(dst, src []WheelEncoders) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var WheelEncodersTypeSupport types.MessageTypeSupport = _WheelEncodersTypeSupport{}

type _WheelEncodersTypeSupport struct{}

func (t _WheelEncodersTypeSupport) New() types.Message {
	return NewWheelEncoders()
}

func (t _WheelEncodersTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__WheelEncoders
	return (unsafe.Pointer)(C.px4_msgs__msg__WheelEncoders__create())
}

func (t _WheelEncodersTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__WheelEncoders__destroy((*C.px4_msgs__msg__WheelEncoders)(pointer_to_free))
}

func (t _WheelEncodersTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*WheelEncoders)
	mem := (*C.px4_msgs__msg__WheelEncoders)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.encoder_position = C.int64_t(m.EncoderPosition)
	mem.speed = C.int32_t(m.Speed)
	mem.pulses_per_rev = C.uint32_t(m.PulsesPerRev)
}

func (t _WheelEncodersTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*WheelEncoders)
	mem := (*C.px4_msgs__msg__WheelEncoders)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.EncoderPosition = int64(mem.encoder_position)
	m.Speed = int32(mem.speed)
	m.PulsesPerRev = uint32(mem.pulses_per_rev)
}

func (t _WheelEncodersTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__WheelEncoders())
}

type CWheelEncoders = C.px4_msgs__msg__WheelEncoders
type CWheelEncoders__Sequence = C.px4_msgs__msg__WheelEncoders__Sequence

func WheelEncoders__Sequence_to_Go(goSlice *[]WheelEncoders, cSlice CWheelEncoders__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]WheelEncoders, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__WheelEncoders__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__WheelEncoders * uintptr(i)),
		))
		WheelEncodersTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func WheelEncoders__Sequence_to_C(cSlice *CWheelEncoders__Sequence, goSlice []WheelEncoders) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__WheelEncoders)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__WheelEncoders * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__WheelEncoders)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__WheelEncoders * uintptr(i)),
		))
		WheelEncodersTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func WheelEncoders__Array_to_Go(goSlice []WheelEncoders, cSlice []CWheelEncoders) {
	for i := 0; i < len(cSlice); i++ {
		WheelEncodersTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func WheelEncoders__Array_to_C(cSlice []CWheelEncoders, goSlice []WheelEncoders) {
	for i := 0; i < len(goSlice); i++ {
		WheelEncodersTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
