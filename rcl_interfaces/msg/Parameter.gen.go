/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package rcl_interfaces_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lrcl_interfaces__rosidl_typesupport_c -lrcl_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/msg/parameter.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rcl_interfaces/Parameter", ParameterTypeSupport)
}

// Do not create instances of this type directly. Always use NewParameter
// function instead.
type Parameter struct {
	Name string `yaml:"name"`// The full name of the parameter.
	Value ParameterValue `yaml:"value"`// The parameter's value which can be one of several types, see`ParameterValue.msg` and `ParameterType.msg`.
}

// NewParameter creates a new Parameter with default values.
func NewParameter() *Parameter {
	self := Parameter{}
	self.SetDefaults()
	return &self
}

func (t *Parameter) Clone() *Parameter {
	c := &Parameter{}
	c.Name = t.Name
	c.Value = *t.Value.Clone()
	return c
}

func (t *Parameter) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Parameter) SetDefaults() {
	t.Name = ""
	t.Value.SetDefaults()
}

// CloneParameterSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParameterSlice(dst, src []Parameter) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParameterTypeSupport types.MessageTypeSupport = _ParameterTypeSupport{}

type _ParameterTypeSupport struct{}

func (t _ParameterTypeSupport) New() types.Message {
	return NewParameter()
}

func (t _ParameterTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__msg__Parameter
	return (unsafe.Pointer)(C.rcl_interfaces__msg__Parameter__create())
}

func (t _ParameterTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__msg__Parameter__destroy((*C.rcl_interfaces__msg__Parameter)(pointer_to_free))
}

func (t _ParameterTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Parameter)
	mem := (*C.rcl_interfaces__msg__Parameter)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	ParameterValueTypeSupport.AsCStruct(unsafe.Pointer(&mem.value), &m.Value)
}

func (t _ParameterTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Parameter)
	mem := (*C.rcl_interfaces__msg__Parameter)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	ParameterValueTypeSupport.AsGoStruct(&m.Value, unsafe.Pointer(&mem.value))
}

func (t _ParameterTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter())
}

type CParameter = C.rcl_interfaces__msg__Parameter
type CParameter__Sequence = C.rcl_interfaces__msg__Parameter__Sequence

func Parameter__Sequence_to_Go(goSlice *[]Parameter, cSlice CParameter__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Parameter, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.rcl_interfaces__msg__Parameter__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__msg__Parameter * uintptr(i)),
		))
		ParameterTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func Parameter__Sequence_to_C(cSlice *CParameter__Sequence, goSlice []Parameter) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.rcl_interfaces__msg__Parameter)(C.malloc((C.size_t)(C.sizeof_struct_rcl_interfaces__msg__Parameter * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.rcl_interfaces__msg__Parameter)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__msg__Parameter * uintptr(i)),
		))
		ParameterTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func Parameter__Array_to_Go(goSlice []Parameter, cSlice []CParameter) {
	for i := 0; i < len(cSlice); i++ {
		ParameterTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Parameter__Array_to_C(cSlice []CParameter, goSlice []Parameter) {
	for i := 0; i < len(goSlice); i++ {
		ParameterTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
