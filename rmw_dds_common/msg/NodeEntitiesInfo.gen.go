/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package rmw_dds_common_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lrmw_dds_common__rosidl_typesupport_c -lrmw_dds_common__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rmw_dds_common/msg/node_entities_info.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rmw_dds_common/NodeEntitiesInfo", NodeEntitiesInfoTypeSupport)
}

// Do not create instances of this type directly. Always use NewNodeEntitiesInfo
// function instead.
type NodeEntitiesInfo struct {
	NodeNamespace string `yaml:"node_namespace"`
	NodeName string `yaml:"node_name"`
	ReaderGidSeq []Gid `yaml:"reader_gid_seq"`
	WriterGidSeq []Gid `yaml:"writer_gid_seq"`
}

// NewNodeEntitiesInfo creates a new NodeEntitiesInfo with default values.
func NewNodeEntitiesInfo() *NodeEntitiesInfo {
	self := NodeEntitiesInfo{}
	self.SetDefaults()
	return &self
}

func (t *NodeEntitiesInfo) Clone() *NodeEntitiesInfo {
	c := &NodeEntitiesInfo{}
	c.NodeNamespace = t.NodeNamespace
	c.NodeName = t.NodeName
	if t.ReaderGidSeq != nil {
		c.ReaderGidSeq = make([]Gid, len(t.ReaderGidSeq))
		CloneGidSlice(c.ReaderGidSeq, t.ReaderGidSeq)
	}
	if t.WriterGidSeq != nil {
		c.WriterGidSeq = make([]Gid, len(t.WriterGidSeq))
		CloneGidSlice(c.WriterGidSeq, t.WriterGidSeq)
	}
	return c
}

func (t *NodeEntitiesInfo) CloneMsg() types.Message {
	return t.Clone()
}

func (t *NodeEntitiesInfo) SetDefaults() {
	t.NodeNamespace = ""
	t.NodeName = ""
	t.ReaderGidSeq = nil
	t.WriterGidSeq = nil
}

// CloneNodeEntitiesInfoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneNodeEntitiesInfoSlice(dst, src []NodeEntitiesInfo) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var NodeEntitiesInfoTypeSupport types.MessageTypeSupport = _NodeEntitiesInfoTypeSupport{}

type _NodeEntitiesInfoTypeSupport struct{}

func (t _NodeEntitiesInfoTypeSupport) New() types.Message {
	return NewNodeEntitiesInfo()
}

func (t _NodeEntitiesInfoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rmw_dds_common__msg__NodeEntitiesInfo
	return (unsafe.Pointer)(C.rmw_dds_common__msg__NodeEntitiesInfo__create())
}

func (t _NodeEntitiesInfoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rmw_dds_common__msg__NodeEntitiesInfo__destroy((*C.rmw_dds_common__msg__NodeEntitiesInfo)(pointer_to_free))
}

func (t _NodeEntitiesInfoTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*NodeEntitiesInfo)
	mem := (*C.rmw_dds_common__msg__NodeEntitiesInfo)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.node_namespace), m.NodeNamespace)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.node_name), m.NodeName)
	Gid__Sequence_to_C(&mem.reader_gid_seq, m.ReaderGidSeq)
	Gid__Sequence_to_C(&mem.writer_gid_seq, m.WriterGidSeq)
}

func (t _NodeEntitiesInfoTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*NodeEntitiesInfo)
	mem := (*C.rmw_dds_common__msg__NodeEntitiesInfo)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.NodeNamespace, unsafe.Pointer(&mem.node_namespace))
	primitives.StringAsGoStruct(&m.NodeName, unsafe.Pointer(&mem.node_name))
	Gid__Sequence_to_Go(&m.ReaderGidSeq, mem.reader_gid_seq)
	Gid__Sequence_to_Go(&m.WriterGidSeq, mem.writer_gid_seq)
}

func (t _NodeEntitiesInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rmw_dds_common__msg__NodeEntitiesInfo())
}

type CNodeEntitiesInfo = C.rmw_dds_common__msg__NodeEntitiesInfo
type CNodeEntitiesInfo__Sequence = C.rmw_dds_common__msg__NodeEntitiesInfo__Sequence

func NodeEntitiesInfo__Sequence_to_Go(goSlice *[]NodeEntitiesInfo, cSlice CNodeEntitiesInfo__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]NodeEntitiesInfo, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.rmw_dds_common__msg__NodeEntitiesInfo__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rmw_dds_common__msg__NodeEntitiesInfo * uintptr(i)),
		))
		NodeEntitiesInfoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func NodeEntitiesInfo__Sequence_to_C(cSlice *CNodeEntitiesInfo__Sequence, goSlice []NodeEntitiesInfo) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.rmw_dds_common__msg__NodeEntitiesInfo)(C.malloc((C.size_t)(C.sizeof_struct_rmw_dds_common__msg__NodeEntitiesInfo * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.rmw_dds_common__msg__NodeEntitiesInfo)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rmw_dds_common__msg__NodeEntitiesInfo * uintptr(i)),
		))
		NodeEntitiesInfoTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func NodeEntitiesInfo__Array_to_Go(goSlice []NodeEntitiesInfo, cSlice []CNodeEntitiesInfo) {
	for i := 0; i < len(cSlice); i++ {
		NodeEntitiesInfoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func NodeEntitiesInfo__Array_to_C(cSlice []CNodeEntitiesInfo, goSlice []NodeEntitiesInfo) {
	for i := 0; i < len(goSlice); i++ {
		NodeEntitiesInfoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
