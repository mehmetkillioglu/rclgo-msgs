/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package rmw_dds_common_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lrmw_dds_common__rosidl_typesupport_c -lrmw_dds_common__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rmw_dds_common/msg/participant_entities_info.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rmw_dds_common/ParticipantEntitiesInfo", ParticipantEntitiesInfoTypeSupport)
}

// Do not create instances of this type directly. Always use NewParticipantEntitiesInfo
// function instead.
type ParticipantEntitiesInfo struct {
	Gid Gid `yaml:"gid"`
	NodeEntitiesInfoSeq []NodeEntitiesInfo `yaml:"node_entities_info_seq"`
}

// NewParticipantEntitiesInfo creates a new ParticipantEntitiesInfo with default values.
func NewParticipantEntitiesInfo() *ParticipantEntitiesInfo {
	self := ParticipantEntitiesInfo{}
	self.SetDefaults()
	return &self
}

func (t *ParticipantEntitiesInfo) Clone() *ParticipantEntitiesInfo {
	c := &ParticipantEntitiesInfo{}
	c.Gid = *t.Gid.Clone()
	if t.NodeEntitiesInfoSeq != nil {
		c.NodeEntitiesInfoSeq = make([]NodeEntitiesInfo, len(t.NodeEntitiesInfoSeq))
		CloneNodeEntitiesInfoSlice(c.NodeEntitiesInfoSeq, t.NodeEntitiesInfoSeq)
	}
	return c
}

func (t *ParticipantEntitiesInfo) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ParticipantEntitiesInfo) SetDefaults() {
	t.Gid.SetDefaults()
	t.NodeEntitiesInfoSeq = nil
}

// CloneParticipantEntitiesInfoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParticipantEntitiesInfoSlice(dst, src []ParticipantEntitiesInfo) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParticipantEntitiesInfoTypeSupport types.MessageTypeSupport = _ParticipantEntitiesInfoTypeSupport{}

type _ParticipantEntitiesInfoTypeSupport struct{}

func (t _ParticipantEntitiesInfoTypeSupport) New() types.Message {
	return NewParticipantEntitiesInfo()
}

func (t _ParticipantEntitiesInfoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rmw_dds_common__msg__ParticipantEntitiesInfo
	return (unsafe.Pointer)(C.rmw_dds_common__msg__ParticipantEntitiesInfo__create())
}

func (t _ParticipantEntitiesInfoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rmw_dds_common__msg__ParticipantEntitiesInfo__destroy((*C.rmw_dds_common__msg__ParticipantEntitiesInfo)(pointer_to_free))
}

func (t _ParticipantEntitiesInfoTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ParticipantEntitiesInfo)
	mem := (*C.rmw_dds_common__msg__ParticipantEntitiesInfo)(dst)
	GidTypeSupport.AsCStruct(unsafe.Pointer(&mem.gid), &m.Gid)
	NodeEntitiesInfo__Sequence_to_C(&mem.node_entities_info_seq, m.NodeEntitiesInfoSeq)
}

func (t _ParticipantEntitiesInfoTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ParticipantEntitiesInfo)
	mem := (*C.rmw_dds_common__msg__ParticipantEntitiesInfo)(ros2_message_buffer)
	GidTypeSupport.AsGoStruct(&m.Gid, unsafe.Pointer(&mem.gid))
	NodeEntitiesInfo__Sequence_to_Go(&m.NodeEntitiesInfoSeq, mem.node_entities_info_seq)
}

func (t _ParticipantEntitiesInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rmw_dds_common__msg__ParticipantEntitiesInfo())
}

type CParticipantEntitiesInfo = C.rmw_dds_common__msg__ParticipantEntitiesInfo
type CParticipantEntitiesInfo__Sequence = C.rmw_dds_common__msg__ParticipantEntitiesInfo__Sequence

func ParticipantEntitiesInfo__Sequence_to_Go(goSlice *[]ParticipantEntitiesInfo, cSlice CParticipantEntitiesInfo__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParticipantEntitiesInfo, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.rmw_dds_common__msg__ParticipantEntitiesInfo__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rmw_dds_common__msg__ParticipantEntitiesInfo * uintptr(i)),
		))
		ParticipantEntitiesInfoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func ParticipantEntitiesInfo__Sequence_to_C(cSlice *CParticipantEntitiesInfo__Sequence, goSlice []ParticipantEntitiesInfo) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.rmw_dds_common__msg__ParticipantEntitiesInfo)(C.malloc((C.size_t)(C.sizeof_struct_rmw_dds_common__msg__ParticipantEntitiesInfo * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.rmw_dds_common__msg__ParticipantEntitiesInfo)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rmw_dds_common__msg__ParticipantEntitiesInfo * uintptr(i)),
		))
		ParticipantEntitiesInfoTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func ParticipantEntitiesInfo__Array_to_Go(goSlice []ParticipantEntitiesInfo, cSlice []CParticipantEntitiesInfo) {
	for i := 0; i < len(cSlice); i++ {
		ParticipantEntitiesInfoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ParticipantEntitiesInfo__Array_to_C(cSlice []CParticipantEntitiesInfo, goSlice []ParticipantEntitiesInfo) {
	for i := 0; i < len(goSlice); i++ {
		ParticipantEntitiesInfoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
