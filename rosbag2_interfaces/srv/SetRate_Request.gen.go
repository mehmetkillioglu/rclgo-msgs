/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package rosbag2_interfaces_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lrosbag2_interfaces__rosidl_typesupport_c -lrosbag2_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosbag2_interfaces/srv/set_rate.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rosbag2_interfaces/SetRate_Request", SetRate_RequestTypeSupport)
}

// Do not create instances of this type directly. Always use NewSetRate_Request
// function instead.
type SetRate_Request struct {
	Rate float64 `yaml:"rate"`
}

// NewSetRate_Request creates a new SetRate_Request with default values.
func NewSetRate_Request() *SetRate_Request {
	self := SetRate_Request{}
	self.SetDefaults()
	return &self
}

func (t *SetRate_Request) Clone() *SetRate_Request {
	c := &SetRate_Request{}
	c.Rate = t.Rate
	return c
}

func (t *SetRate_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SetRate_Request) SetDefaults() {
	t.Rate = 0
}

// CloneSetRate_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetRate_RequestSlice(dst, src []SetRate_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetRate_RequestTypeSupport types.MessageTypeSupport = _SetRate_RequestTypeSupport{}

type _SetRate_RequestTypeSupport struct{}

func (t _SetRate_RequestTypeSupport) New() types.Message {
	return NewSetRate_Request()
}

func (t _SetRate_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosbag2_interfaces__srv__SetRate_Request
	return (unsafe.Pointer)(C.rosbag2_interfaces__srv__SetRate_Request__create())
}

func (t _SetRate_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosbag2_interfaces__srv__SetRate_Request__destroy((*C.rosbag2_interfaces__srv__SetRate_Request)(pointer_to_free))
}

func (t _SetRate_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SetRate_Request)
	mem := (*C.rosbag2_interfaces__srv__SetRate_Request)(dst)
	mem.rate = C.double(m.Rate)
}

func (t _SetRate_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetRate_Request)
	mem := (*C.rosbag2_interfaces__srv__SetRate_Request)(ros2_message_buffer)
	m.Rate = float64(mem.rate)
}

func (t _SetRate_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosbag2_interfaces__srv__SetRate_Request())
}

type CSetRate_Request = C.rosbag2_interfaces__srv__SetRate_Request
type CSetRate_Request__Sequence = C.rosbag2_interfaces__srv__SetRate_Request__Sequence

func SetRate_Request__Sequence_to_Go(goSlice *[]SetRate_Request, cSlice CSetRate_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetRate_Request, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.rosbag2_interfaces__srv__SetRate_Request__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rosbag2_interfaces__srv__SetRate_Request * uintptr(i)),
		))
		SetRate_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func SetRate_Request__Sequence_to_C(cSlice *CSetRate_Request__Sequence, goSlice []SetRate_Request) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.rosbag2_interfaces__srv__SetRate_Request)(C.malloc((C.size_t)(C.sizeof_struct_rosbag2_interfaces__srv__SetRate_Request * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.rosbag2_interfaces__srv__SetRate_Request)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rosbag2_interfaces__srv__SetRate_Request * uintptr(i)),
		))
		SetRate_RequestTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func SetRate_Request__Array_to_Go(goSlice []SetRate_Request, cSlice []CSetRate_Request) {
	for i := 0; i < len(cSlice); i++ {
		SetRate_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SetRate_Request__Array_to_C(cSlice []CSetRate_Request, goSlice []SetRate_Request) {
	for i := 0; i < len(goSlice); i++ {
		SetRate_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
