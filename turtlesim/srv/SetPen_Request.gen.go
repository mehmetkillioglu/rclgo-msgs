/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package turtlesim_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lturtlesim__rosidl_typesupport_c -lturtlesim__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <turtlesim/srv/set_pen.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("turtlesim/SetPen_Request", SetPen_RequestTypeSupport)
}

// Do not create instances of this type directly. Always use NewSetPen_Request
// function instead.
type SetPen_Request struct {
	R uint8 `yaml:"r"`
	G uint8 `yaml:"g"`
	B uint8 `yaml:"b"`
	Width uint8 `yaml:"width"`
	Off uint8 `yaml:"off"`
}

// NewSetPen_Request creates a new SetPen_Request with default values.
func NewSetPen_Request() *SetPen_Request {
	self := SetPen_Request{}
	self.SetDefaults()
	return &self
}

func (t *SetPen_Request) Clone() *SetPen_Request {
	c := &SetPen_Request{}
	c.R = t.R
	c.G = t.G
	c.B = t.B
	c.Width = t.Width
	c.Off = t.Off
	return c
}

func (t *SetPen_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SetPen_Request) SetDefaults() {
	t.R = 0
	t.G = 0
	t.B = 0
	t.Width = 0
	t.Off = 0
}

// CloneSetPen_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetPen_RequestSlice(dst, src []SetPen_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetPen_RequestTypeSupport types.MessageTypeSupport = _SetPen_RequestTypeSupport{}

type _SetPen_RequestTypeSupport struct{}

func (t _SetPen_RequestTypeSupport) New() types.Message {
	return NewSetPen_Request()
}

func (t _SetPen_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.turtlesim__srv__SetPen_Request
	return (unsafe.Pointer)(C.turtlesim__srv__SetPen_Request__create())
}

func (t _SetPen_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.turtlesim__srv__SetPen_Request__destroy((*C.turtlesim__srv__SetPen_Request)(pointer_to_free))
}

func (t _SetPen_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SetPen_Request)
	mem := (*C.turtlesim__srv__SetPen_Request)(dst)
	mem.r = C.uint8_t(m.R)
	mem.g = C.uint8_t(m.G)
	mem.b = C.uint8_t(m.B)
	mem.width = C.uint8_t(m.Width)
	mem.off = C.uint8_t(m.Off)
}

func (t _SetPen_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetPen_Request)
	mem := (*C.turtlesim__srv__SetPen_Request)(ros2_message_buffer)
	m.R = uint8(mem.r)
	m.G = uint8(mem.g)
	m.B = uint8(mem.b)
	m.Width = uint8(mem.width)
	m.Off = uint8(mem.off)
}

func (t _SetPen_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__turtlesim__srv__SetPen_Request())
}

type CSetPen_Request = C.turtlesim__srv__SetPen_Request
type CSetPen_Request__Sequence = C.turtlesim__srv__SetPen_Request__Sequence

func SetPen_Request__Sequence_to_Go(goSlice *[]SetPen_Request, cSlice CSetPen_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetPen_Request, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.turtlesim__srv__SetPen_Request__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_turtlesim__srv__SetPen_Request * uintptr(i)),
		))
		SetPen_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func SetPen_Request__Sequence_to_C(cSlice *CSetPen_Request__Sequence, goSlice []SetPen_Request) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.turtlesim__srv__SetPen_Request)(C.malloc((C.size_t)(C.sizeof_struct_turtlesim__srv__SetPen_Request * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.turtlesim__srv__SetPen_Request)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_turtlesim__srv__SetPen_Request * uintptr(i)),
		))
		SetPen_RequestTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func SetPen_Request__Array_to_Go(goSlice []SetPen_Request, cSlice []CSetPen_Request) {
	for i := 0; i < len(cSlice); i++ {
		SetPen_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SetPen_Request__Array_to_C(cSlice []CSetPen_Request, goSlice []SetPen_Request) {
	for i := 0; i < len(goSlice); i++ {
		SetPen_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
