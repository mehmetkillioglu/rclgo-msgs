/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package visualization_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lvisualization_msgs__rosidl_typesupport_c -lvisualization_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <visualization_msgs/msg/marker_array.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("visualization_msgs/MarkerArray", MarkerArrayTypeSupport)
}

// Do not create instances of this type directly. Always use NewMarkerArray
// function instead.
type MarkerArray struct {
	Markers []Marker `yaml:"markers"`
}

// NewMarkerArray creates a new MarkerArray with default values.
func NewMarkerArray() *MarkerArray {
	self := MarkerArray{}
	self.SetDefaults()
	return &self
}

func (t *MarkerArray) Clone() *MarkerArray {
	c := &MarkerArray{}
	if t.Markers != nil {
		c.Markers = make([]Marker, len(t.Markers))
		CloneMarkerSlice(c.Markers, t.Markers)
	}
	return c
}

func (t *MarkerArray) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MarkerArray) SetDefaults() {
	t.Markers = nil
}

// CloneMarkerArraySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMarkerArraySlice(dst, src []MarkerArray) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MarkerArrayTypeSupport types.MessageTypeSupport = _MarkerArrayTypeSupport{}

type _MarkerArrayTypeSupport struct{}

func (t _MarkerArrayTypeSupport) New() types.Message {
	return NewMarkerArray()
}

func (t _MarkerArrayTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.visualization_msgs__msg__MarkerArray
	return (unsafe.Pointer)(C.visualization_msgs__msg__MarkerArray__create())
}

func (t _MarkerArrayTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.visualization_msgs__msg__MarkerArray__destroy((*C.visualization_msgs__msg__MarkerArray)(pointer_to_free))
}

func (t _MarkerArrayTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MarkerArray)
	mem := (*C.visualization_msgs__msg__MarkerArray)(dst)
	Marker__Sequence_to_C(&mem.markers, m.Markers)
}

func (t _MarkerArrayTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MarkerArray)
	mem := (*C.visualization_msgs__msg__MarkerArray)(ros2_message_buffer)
	Marker__Sequence_to_Go(&m.Markers, mem.markers)
}

func (t _MarkerArrayTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__msg__MarkerArray())
}

type CMarkerArray = C.visualization_msgs__msg__MarkerArray
type CMarkerArray__Sequence = C.visualization_msgs__msg__MarkerArray__Sequence

func MarkerArray__Sequence_to_Go(goSlice *[]MarkerArray, cSlice CMarkerArray__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MarkerArray, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.visualization_msgs__msg__MarkerArray__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_visualization_msgs__msg__MarkerArray * uintptr(i)),
		))
		MarkerArrayTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func MarkerArray__Sequence_to_C(cSlice *CMarkerArray__Sequence, goSlice []MarkerArray) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.visualization_msgs__msg__MarkerArray)(C.malloc((C.size_t)(C.sizeof_struct_visualization_msgs__msg__MarkerArray * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.visualization_msgs__msg__MarkerArray)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_visualization_msgs__msg__MarkerArray * uintptr(i)),
		))
		MarkerArrayTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func MarkerArray__Array_to_Go(goSlice []MarkerArray, cSlice []CMarkerArray) {
	for i := 0; i < len(cSlice); i++ {
		MarkerArrayTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MarkerArray__Array_to_C(cSlice []CMarkerArray, goSlice []MarkerArray) {
	for i := 0; i < len(goSlice); i++ {
		MarkerArrayTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
